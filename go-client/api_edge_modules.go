/*
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * API version: 0.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type EdgeModulesApiService service

/* 
EdgeModulesApiService Get Module
 |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mname Is the unique EMS EdgeModule identifier
 * @param optional nil or *GetModuleOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return EdgeModuleObject
*/

type GetModuleOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) GetModule(ctx context.Context, mname string, localVarOptionals *GetModuleOpts) (EdgeModuleObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue EdgeModuleObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/{mname}"
	localVarPath = strings.Replace(localVarPath, "{"+"mname"+"}", fmt.Sprintf("%v", mname), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v EdgeModuleObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Get EdgeModule Resource
 |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mname Is the unique EMS EdgeModule identifier
 * @param name Is the unique EMS EdgeModule Resource name
 * @param optional nil or *GetModuleResourceOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return EdgeModuleResourceObject
*/

type GetModuleResourceOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) GetModuleResource(ctx context.Context, mname string, name string, localVarOptionals *GetModuleResourceOpts) (EdgeModuleResourceObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue EdgeModuleResourceObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/{mname}/resources/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"mname"+"}", fmt.Sprintf("%v", mname), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v EdgeModuleResourceObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Get EdgeModule Resources
 |      Used to retrieve all data from the resources of an EdgeModule.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mname Is the unique EMS EdgeModule identifier
 * @param optional nil or *GetModuleResourcesOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return []EdgeModuleResourceObject
*/

type GetModuleResourcesOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) GetModuleResources(ctx context.Context, mname string, localVarOptionals *GetModuleResourcesOpts) ([]EdgeModuleResourceObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []EdgeModuleResourceObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/{mname}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"mname"+"}", fmt.Sprintf("%v", mname), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []EdgeModuleResourceObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Get Module
 |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetModulesOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return []EdgeModuleObject
*/

type GetModulesOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) GetModules(ctx context.Context, localVarOptionals *GetModulesOpts) ([]EdgeModuleObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []EdgeModuleObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []EdgeModuleObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Get Fields
 |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetModulesFieldsOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return FieldsEdgeModuleObject
*/

type GetModulesFieldsOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) GetModulesFields(ctx context.Context, localVarOptionals *GetModulesFieldsOpts) (FieldsEdgeModuleObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue FieldsEdgeModuleObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v FieldsEdgeModuleObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Get EdgeModules Resources
 |      Used to retrieve all data from the resources of all EdgeModules.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetResourcesOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return []EdgeModuleResourceObject
*/

type GetResourcesOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) GetResources(ctx context.Context, localVarOptionals *GetResourcesOpts) ([]EdgeModuleResourceObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []EdgeModuleResourceObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []EdgeModuleResourceObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Get Resource Fields
 |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetResourcesFieldsOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return FieldsEdgeModuleObject
*/

type GetResourcesFieldsOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) GetResourcesFields(ctx context.Context, localVarOptionals *GetResourcesFieldsOpts) (FieldsEdgeModuleObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue FieldsEdgeModuleObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/resources/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v FieldsEdgeModuleObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Add Module
 |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
 * @param optional nil or *RegisterModuleOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return EdgeModuleAddedObject
*/

type RegisterModuleOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) RegisterModule(ctx context.Context, body EdgeModuleAddObject, localVarOptionals *RegisterModuleOpts) (EdgeModuleAddedObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue EdgeModuleAddedObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 201 {
			var v EdgeModuleAddedObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Add Module Resource
 |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mname Is the unique EMS EdgeModule identifier
 * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
 * @param optional nil or *RegisterModuleResourceOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return EdgeModuleResourceAddedObject
*/

type RegisterModuleResourceOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) RegisterModuleResource(ctx context.Context, mname string, body EdgeModuleResourceAddObject, localVarOptionals *RegisterModuleResourceOpts) (EdgeModuleResourceAddedObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue EdgeModuleResourceAddedObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/{mname}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"mname"+"}", fmt.Sprintf("%v", mname), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v EdgeModuleResourceAddedObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Delete Module
 |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mname Is the unique EMS EdgeModule identifier
 * @param optional nil or *UnregisterModuleOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 


*/

type UnregisterModuleOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) UnregisterModule(ctx context.Context, mname string, localVarOptionals *UnregisterModuleOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/{mname}"
	localVarPath = strings.Replace(localVarPath, "{"+"mname"+"}", fmt.Sprintf("%v", mname), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Delete Module Resource
 |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mname Is the unique EMS EdgeModule identifier
 * @param name Is the unique EMS EdgeModule Resource name
 * @param optional nil or *UnregisterModuleResourceOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 


*/

type UnregisterModuleResourceOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) UnregisterModuleResource(ctx context.Context, mname string, name string, localVarOptionals *UnregisterModuleResourceOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/{mname}/resources/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"mname"+"}", fmt.Sprintf("%v", mname), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Update Module
 |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mname Is the unique EMS EdgeModule identifier
 * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
 * @param optional nil or *UpdateModuleOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return EdgeModuleUpdatedObject
*/

type UpdateModuleOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) UpdateModule(ctx context.Context, mname string, body EdgeModuleUpdateObject, localVarOptionals *UpdateModuleOpts) (EdgeModuleUpdatedObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue EdgeModuleUpdatedObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/{mname}"
	localVarPath = strings.Replace(localVarPath, "{"+"mname"+"}", fmt.Sprintf("%v", mname), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v EdgeModuleUpdatedObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
EdgeModulesApiService Update Module Resource
 |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mname Is the unique EMS EdgeModule identifier
 * @param name Is the unique EMS EdgeModule Resource name
 * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
 * @param optional nil or *UpdateModuleResourceOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return EdgeModuleResourceUpdatedObject
*/

type UpdateModuleResourceOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *EdgeModulesApiService) UpdateModuleResource(ctx context.Context, mname string, name string, body EdgeModuleResourceUpdateObject, localVarOptionals *UpdateModuleResourceOpts) (EdgeModuleResourceUpdatedObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue EdgeModuleResourceUpdatedObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/edgemodules/{mname}/resources/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"mname"+"}", fmt.Sprintf("%v", mname), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v EdgeModuleResourceUpdatedObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
