/*
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * API version: 0.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type InstallationsApiService service

/* 
InstallationsApiService Add Installation
 |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Object to sign up a new EMS User in the EMS Server
 * @param optional nil or *AddInstallationOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return InstallationAddedObject
*/

type AddInstallationOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *InstallationsApiService) AddInstallation(ctx context.Context, body InstallationAddObject, localVarOptionals *AddInstallationOpts) (InstallationAddedObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InstallationAddedObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/installations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 201 {
			var v InstallationAddedObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
InstallationsApiService Delete Installation
 |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A Installation ID
 * @param optional nil or *DeleteInstallationOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 


*/

type DeleteInstallationOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *InstallationsApiService) DeleteInstallation(ctx context.Context, id string, localVarOptionals *DeleteInstallationOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/installations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/* 
InstallationsApiService Get Installation Channels
 |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetChannelsOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return []ChannelName
*/

type GetChannelsOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *InstallationsApiService) GetChannels(ctx context.Context, localVarOptionals *GetChannelsOpts) ([]ChannelName, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []ChannelName
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/installations/channels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []ChannelName
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
InstallationsApiService Get Installation
 |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A Installation ID
 * @param optional nil or *GetInstallationOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return InstallationObject
*/

type GetInstallationOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *InstallationsApiService) GetInstallation(ctx context.Context, id string, localVarOptionals *GetInstallationOpts) (InstallationObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InstallationObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/installations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v InstallationObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
InstallationsApiService Get Fields
 |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetInstallationFieldsOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return []FieldInstallationObject
*/

type GetInstallationFieldsOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *InstallationsApiService) GetInstallationFields(ctx context.Context, localVarOptionals *GetInstallationFieldsOpts) ([]FieldInstallationObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []FieldInstallationObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/installations/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []FieldInstallationObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
InstallationsApiService Get Installations
 |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetInstallationsOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 
     * @param "Skip" (optional.Float32) -  users skipped
     * @param "Limit" (optional.Float32) -  maximum number of results to return
     * @param "Order" (optional.Float32) -  order ascending or descending (asc, desc)
     * @param "Where" (optional.String) -  filter operators (lt, lte, gt, gte, eq, neq, like, nlike)

@return []InstallationObject
*/

type GetInstallationsOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
	Skip optional.Float32
	Limit optional.Float32
	Order optional.Float32
	Where optional.String
}

func (a *InstallationsApiService) GetInstallations(ctx context.Context, localVarOptionals *GetInstallationsOpts) ([]InstallationObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []InstallationObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/installations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Order.IsSet() {
		localVarQueryParams.Add("order", parameterToString(localVarOptionals.Order.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Where.IsSet() {
		localVarQueryParams.Add("where", parameterToString(localVarOptionals.Where.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []InstallationObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
InstallationsApiService Update Installation
 |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A Installation ID
 * @param body Installation fields to update
 * @param optional nil or *UpdateInstallationOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 

@return UpdatedInstallationObject
*/

type UpdateInstallationOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *InstallationsApiService) UpdateInstallation(ctx context.Context, id string, body UpdateInstallationObject, localVarOptionals *UpdateInstallationOpts) (UpdatedInstallationObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue UpdatedInstallationObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/installations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v UpdatedInstallationObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
