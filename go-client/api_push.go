/*
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * API version: 0.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PushApiService service

/* 
PushApiService Send Push
Used to send a push notification message to a registered device
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Object containing the Push Message data structure
 * @param optional nil or *SendOpts - Optional Parameters:
     * @param "XEmbarcaderoApplicationId" (optional.String) - 
     * @param "XEmbarcaderoAppSecret" (optional.String) - 
     * @param "XEmbarcaderoMasterSecret" (optional.String) - 


*/

type SendOpts struct { 
	XEmbarcaderoApplicationId optional.String
	XEmbarcaderoAppSecret optional.String
	XEmbarcaderoMasterSecret optional.String
}

func (a *PushApiService) Send(ctx context.Context, body PushObject, localVarOptionals *SendOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/push"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoApplicationId.IsSet() {
		localVarHeaderParams["X-Embarcadero-Application-Id"] = parameterToString(localVarOptionals.XEmbarcaderoApplicationId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoAppSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-App-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoAppSecret.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XEmbarcaderoMasterSecret.IsSet() {
		localVarHeaderParams["X-Embarcadero-Master-Secret"] = parameterToString(localVarOptionals.XEmbarcaderoMasterSecret.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
