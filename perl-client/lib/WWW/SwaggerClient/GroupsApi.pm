=begin comment

EMS API Documentation

Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::GroupsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_group
#
# Add Group
# 
# @param GroupAddObject $body Object to sign up a new EMS User in the EMS Server (required)
# @param string $x_embarcadero_application_id  (optional)
# @param string $x_embarcadero_app_secret  (optional)
# @param string $x_embarcadero_master_secret  (optional)
{
    my $params = {
    'body' => {
        data_type => 'GroupAddObject',
        description => 'Object to sign up a new EMS User in the EMS Server',
        required => '1',
    },
    'x_embarcadero_application_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_app_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_master_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_group' } = { 
    	summary => 'Add Group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub add_group {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling add_group");
    }

    # parse inputs
    my $_resource_path = '/groups';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_embarcadero_application_id'}) {
        $header_params->{'X-Embarcadero-Application-Id'} = $self->{api_client}->to_header_value($args{'x_embarcadero_application_id'});
    }

    # header params
    if ( exists $args{'x_embarcadero_app_secret'}) {
        $header_params->{'X-Embarcadero-App-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_app_secret'});
    }

    # header params
    if ( exists $args{'x_embarcadero_master_secret'}) {
        $header_params->{'X-Embarcadero-Master-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_master_secret'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_group
#
# Delete Group
# 
# @param string $item A group name (required)
# @param string $x_embarcadero_application_id  (optional)
# @param string $x_embarcadero_app_secret  (optional)
# @param string $x_embarcadero_master_secret  (optional)
{
    my $params = {
    'item' => {
        data_type => 'string',
        description => 'A group name',
        required => '1',
    },
    'x_embarcadero_application_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_app_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_master_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_group' } = { 
    	summary => 'Delete Group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_group {
    my ($self, %args) = @_;

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling delete_group");
    }

    # parse inputs
    my $_resource_path = '/groups/{item}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'x_embarcadero_application_id'}) {
        $header_params->{'X-Embarcadero-Application-Id'} = $self->{api_client}->to_header_value($args{'x_embarcadero_application_id'});
    }

    # header params
    if ( exists $args{'x_embarcadero_app_secret'}) {
        $header_params->{'X-Embarcadero-App-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_app_secret'});
    }

    # header params
    if ( exists $args{'x_embarcadero_master_secret'}) {
        $header_params->{'X-Embarcadero-Master-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_master_secret'});
    }

    # path params
    if ( exists $args{'item'}) {
        my $_base_variable = "{" . "item" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_group
#
# Get Group
# 
# @param string $item A group name (required)
# @param string $x_embarcadero_application_id  (optional)
# @param string $x_embarcadero_app_secret  (optional)
# @param string $x_embarcadero_master_secret  (optional)
{
    my $params = {
    'item' => {
        data_type => 'string',
        description => 'A group name',
        required => '1',
    },
    'x_embarcadero_application_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_app_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_master_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_group' } = { 
    	summary => 'Get Group',
        params => $params,
        returns => 'GroupObject',
        };
}
# @return GroupObject
#
sub get_group {
    my ($self, %args) = @_;

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling get_group");
    }

    # parse inputs
    my $_resource_path = '/groups/{item}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'x_embarcadero_application_id'}) {
        $header_params->{'X-Embarcadero-Application-Id'} = $self->{api_client}->to_header_value($args{'x_embarcadero_application_id'});
    }

    # header params
    if ( exists $args{'x_embarcadero_app_secret'}) {
        $header_params->{'X-Embarcadero-App-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_app_secret'});
    }

    # header params
    if ( exists $args{'x_embarcadero_master_secret'}) {
        $header_params->{'X-Embarcadero-Master-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_master_secret'});
    }

    # path params
    if ( exists $args{'item'}) {
        my $_base_variable = "{" . "item" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GroupObject', $response);
    return $_response_object;
}

#
# get_group_fields
#
# Get Fields
# 
# @param string $x_embarcadero_application_id  (optional)
# @param string $x_embarcadero_app_secret  (optional)
# @param string $x_embarcadero_master_secret  (optional)
{
    my $params = {
    'x_embarcadero_application_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_app_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_master_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_group_fields' } = { 
    	summary => 'Get Fields',
        params => $params,
        returns => 'ARRAY[FieldGroupObject]',
        };
}
# @return ARRAY[FieldGroupObject]
#
sub get_group_fields {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/groups/fields';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'x_embarcadero_application_id'}) {
        $header_params->{'X-Embarcadero-Application-Id'} = $self->{api_client}->to_header_value($args{'x_embarcadero_application_id'});
    }

    # header params
    if ( exists $args{'x_embarcadero_app_secret'}) {
        $header_params->{'X-Embarcadero-App-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_app_secret'});
    }

    # header params
    if ( exists $args{'x_embarcadero_master_secret'}) {
        $header_params->{'X-Embarcadero-Master-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_master_secret'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[FieldGroupObject]', $response);
    return $_response_object;
}

#
# get_groups
#
# Get Groups
# 
# @param string $x_embarcadero_application_id  (optional)
# @param string $x_embarcadero_app_secret  (optional)
# @param string $x_embarcadero_master_secret  (optional)
# @param Number $skip users skipped (optional)
# @param Number $limit maximum number of results to return (optional)
# @param Number $order order ascending or descending (asc, desc) (optional)
# @param string $where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
{
    my $params = {
    'x_embarcadero_application_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_app_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_master_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'skip' => {
        data_type => 'Number',
        description => 'users skipped',
        required => '0',
    },
    'limit' => {
        data_type => 'Number',
        description => 'maximum number of results to return',
        required => '0',
    },
    'order' => {
        data_type => 'Number',
        description => 'order ascending or descending (asc, desc)',
        required => '0',
    },
    'where' => {
        data_type => 'string',
        description => 'filter operators (lt, lte, gt, gte, eq, neq, like, nlike)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_groups' } = { 
    	summary => 'Get Groups',
        params => $params,
        returns => 'ARRAY[GroupObject]',
        };
}
# @return ARRAY[GroupObject]
#
sub get_groups {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/groups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'skip'}) {
        $query_params->{'skip'} = $self->{api_client}->to_query_value($args{'skip'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    # query params
    if ( exists $args{'where'}) {
        $query_params->{'where'} = $self->{api_client}->to_query_value($args{'where'});
    }

    # header params
    if ( exists $args{'x_embarcadero_application_id'}) {
        $header_params->{'X-Embarcadero-Application-Id'} = $self->{api_client}->to_header_value($args{'x_embarcadero_application_id'});
    }

    # header params
    if ( exists $args{'x_embarcadero_app_secret'}) {
        $header_params->{'X-Embarcadero-App-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_app_secret'});
    }

    # header params
    if ( exists $args{'x_embarcadero_master_secret'}) {
        $header_params->{'X-Embarcadero-Master-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_master_secret'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GroupObject]', $response);
    return $_response_object;
}

#
# update_group
#
# Update Group
# 
# @param string $item A group name (required)
# @param UpdateGroupObject $body Object to sign up a new EMS User in the EMS Server (required)
# @param string $x_embarcadero_application_id  (optional)
# @param string $x_embarcadero_app_secret  (optional)
# @param string $x_embarcadero_master_secret  (optional)
{
    my $params = {
    'item' => {
        data_type => 'string',
        description => 'A group name',
        required => '1',
    },
    'body' => {
        data_type => 'UpdateGroupObject',
        description => 'Object to sign up a new EMS User in the EMS Server',
        required => '1',
    },
    'x_embarcadero_application_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_app_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_embarcadero_master_secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_group' } = { 
    	summary => 'Update Group',
        params => $params,
        returns => 'UpdatedGroupObject',
        };
}
# @return UpdatedGroupObject
#
sub update_group {
    my ($self, %args) = @_;

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling update_group");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling update_group");
    }

    # parse inputs
    my $_resource_path = '/groups/{item}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_embarcadero_application_id'}) {
        $header_params->{'X-Embarcadero-Application-Id'} = $self->{api_client}->to_header_value($args{'x_embarcadero_application_id'});
    }

    # header params
    if ( exists $args{'x_embarcadero_app_secret'}) {
        $header_params->{'X-Embarcadero-App-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_app_secret'});
    }

    # header params
    if ( exists $args{'x_embarcadero_master_secret'}) {
        $header_params->{'X-Embarcadero-Master-Secret'} = $self->{api_client}->to_header_value($args{'x_embarcadero_master_secret'});
    }

    # path params
    if ( exists $args{'item'}) {
        my $_base_variable = "{" . "item" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdatedGroupObject', $response);
    return $_response_object;
}

1;
