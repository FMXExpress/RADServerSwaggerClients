/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// $in
    /// </summary>
    [DataContract]
    public partial class PushWhereObjectDeviceToken :  IEquatable<PushWhereObjectDeviceToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushWhereObjectDeviceToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PushWhereObjectDeviceToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PushWhereObjectDeviceToken" /> class.
        /// </summary>
        /// <param name="_in">_in (required).</param>
        public PushWhereObjectDeviceToken(List<string> _in = default(List<string>))
        {
            // to ensure "_in" is required (not null)
            if (_in == null)
            {
                throw new InvalidDataException("_in is a required property for PushWhereObjectDeviceToken and cannot be null");
            }
            else
            {
                this.In = _in;
            }
        }
        
        /// <summary>
        /// Gets or Sets In
        /// </summary>
        [DataMember(Name="$in", EmitDefaultValue=false)]
        public List<string> In { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushWhereObjectDeviceToken {\n");
            sb.Append("  In: ").Append(In).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PushWhereObjectDeviceToken);
        }

        /// <summary>
        /// Returns true if PushWhereObjectDeviceToken instances are equal
        /// </summary>
        /// <param name="input">Instance of PushWhereObjectDeviceToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushWhereObjectDeviceToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.In == input.In ||
                    this.In != null &&
                    this.In.SequenceEqual(input.In)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.In != null)
                    hashCode = hashCode * 59 + this.In.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
