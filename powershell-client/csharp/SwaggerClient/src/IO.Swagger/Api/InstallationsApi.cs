/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstallationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to sign up a new EMS User in the EMS Server</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>InstallationAddedObject</returns>
        InstallationAddedObject AddInstallation (InstallationAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Add Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to sign up a new EMS User in the EMS Server</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of InstallationAddedObject</returns>
        ApiResponse<InstallationAddedObject> AddInstallationWithHttpInfo (InstallationAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Delete Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void DeleteInstallation (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Delete Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInstallationWithHttpInfo (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Installation Channels
        /// </summary>
        /// <remarks>
        ///  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;ChannelName&gt;</returns>
        List<ChannelName> GetChannels (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Installation Channels
        /// </summary>
        /// <remarks>
        ///  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelName&gt;</returns>
        ApiResponse<List<ChannelName>> GetChannelsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>InstallationObject</returns>
        InstallationObject GetInstallation (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of InstallationObject</returns>
        ApiResponse<InstallationObject> GetInstallationWithHttpInfo (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;FieldInstallationObject&gt;</returns>
        List<FieldInstallationObject> GetInstallationFields (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldInstallationObject&gt;</returns>
        ApiResponse<List<FieldInstallationObject>> GetInstallationFieldsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Installations
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <param name="skip">users skipped (optional)</param>
        /// <param name="limit">maximum number of results to return (optional)</param>
        /// <param name="order">order ascending or descending (asc, desc) (optional)</param>
        /// <param name="where">filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)</param>
        /// <returns>List&lt;InstallationObject&gt;</returns>
        List<InstallationObject> GetInstallations (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null, decimal? skip = null, decimal? limit = null, decimal? order = null, string where = null);

        /// <summary>
        /// Get Installations
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <param name="skip">users skipped (optional)</param>
        /// <param name="limit">maximum number of results to return (optional)</param>
        /// <param name="order">order ascending or descending (asc, desc) (optional)</param>
        /// <param name="where">filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)</param>
        /// <returns>ApiResponse of List&lt;InstallationObject&gt;</returns>
        ApiResponse<List<InstallationObject>> GetInstallationsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null, decimal? skip = null, decimal? limit = null, decimal? order = null, string where = null);
        /// <summary>
        /// Update Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="body">Installation fields to update</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>UpdatedInstallationObject</returns>
        UpdatedInstallationObject UpdateInstallation (string id, UpdateInstallationObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Update Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="body">Installation fields to update</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of UpdatedInstallationObject</returns>
        ApiResponse<UpdatedInstallationObject> UpdateInstallationWithHttpInfo (string id, UpdateInstallationObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to sign up a new EMS User in the EMS Server</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of InstallationAddedObject</returns>
        System.Threading.Tasks.Task<InstallationAddedObject> AddInstallationAsync (InstallationAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Add Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to sign up a new EMS User in the EMS Server</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (InstallationAddedObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallationAddedObject>> AddInstallationAsyncWithHttpInfo (InstallationAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Delete Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInstallationAsync (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Delete Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstallationAsyncWithHttpInfo (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Installation Channels
        /// </summary>
        /// <remarks>
        ///  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;ChannelName&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelName>> GetChannelsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Installation Channels
        /// </summary>
        /// <remarks>
        ///  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelName&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelName>>> GetChannelsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of InstallationObject</returns>
        System.Threading.Tasks.Task<InstallationObject> GetInstallationAsync (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (InstallationObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallationObject>> GetInstallationAsyncWithHttpInfo (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;FieldInstallationObject&gt;</returns>
        System.Threading.Tasks.Task<List<FieldInstallationObject>> GetInstallationFieldsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FieldInstallationObject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldInstallationObject>>> GetInstallationFieldsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Installations
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <param name="skip">users skipped (optional)</param>
        /// <param name="limit">maximum number of results to return (optional)</param>
        /// <param name="order">order ascending or descending (asc, desc) (optional)</param>
        /// <param name="where">filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)</param>
        /// <returns>Task of List&lt;InstallationObject&gt;</returns>
        System.Threading.Tasks.Task<List<InstallationObject>> GetInstallationsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null, decimal? skip = null, decimal? limit = null, decimal? order = null, string where = null);

        /// <summary>
        /// Get Installations
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <param name="skip">users skipped (optional)</param>
        /// <param name="limit">maximum number of results to return (optional)</param>
        /// <param name="order">order ascending or descending (asc, desc) (optional)</param>
        /// <param name="where">filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InstallationObject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InstallationObject>>> GetInstallationsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null, decimal? skip = null, decimal? limit = null, decimal? order = null, string where = null);
        /// <summary>
        /// Update Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="body">Installation fields to update</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of UpdatedInstallationObject</returns>
        System.Threading.Tasks.Task<UpdatedInstallationObject> UpdateInstallationAsync (string id, UpdateInstallationObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Update Installation
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="body">Installation fields to update</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedInstallationObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedInstallationObject>> UpdateInstallationAsyncWithHttpInfo (string id, UpdateInstallationObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstallationsApi : IInstallationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstallationsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstallationsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Installation  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to sign up a new EMS User in the EMS Server</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>InstallationAddedObject</returns>
        public InstallationAddedObject AddInstallation (InstallationAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<InstallationAddedObject> localVarResponse = AddInstallationWithHttpInfo(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Installation  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to sign up a new EMS User in the EMS Server</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of InstallationAddedObject</returns>
        public ApiResponse< InstallationAddedObject > AddInstallationWithHttpInfo (InstallationAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InstallationsApi->AddInstallation");

            var localVarPath = "/installations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInstallation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallationAddedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstallationAddedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallationAddedObject)));
        }

        /// <summary>
        /// Add Installation  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to sign up a new EMS User in the EMS Server</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of InstallationAddedObject</returns>
        public async System.Threading.Tasks.Task<InstallationAddedObject> AddInstallationAsync (InstallationAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<InstallationAddedObject> localVarResponse = await AddInstallationAsyncWithHttpInfo(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Installation  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to sign up a new EMS User in the EMS Server</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (InstallationAddedObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallationAddedObject>> AddInstallationAsyncWithHttpInfo (InstallationAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InstallationsApi->AddInstallation");

            var localVarPath = "/installations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInstallation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallationAddedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstallationAddedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallationAddedObject)));
        }

        /// <summary>
        /// Delete Installation  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void DeleteInstallation (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             DeleteInstallationWithHttpInfo(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Delete Installation  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInstallationWithHttpInfo (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstallationsApi->DeleteInstallation");

            var localVarPath = "/installations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstallation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Installation  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInstallationAsync (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await DeleteInstallationAsyncWithHttpInfo(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Delete Installation  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstallationAsyncWithHttpInfo (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstallationsApi->DeleteInstallation");

            var localVarPath = "/installations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstallation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Installation Channels  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;ChannelName&gt;</returns>
        public List<ChannelName> GetChannels (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<ChannelName>> localVarResponse = GetChannelsWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Installation Channels  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelName&gt;</returns>
        public ApiResponse< List<ChannelName> > GetChannelsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/installations/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChannelName>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChannelName>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChannelName>)));
        }

        /// <summary>
        /// Get Installation Channels  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;ChannelName&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelName>> GetChannelsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<ChannelName>> localVarResponse = await GetChannelsAsyncWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Installation Channels  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelName&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChannelName>>> GetChannelsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/installations/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChannelName>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChannelName>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChannelName>)));
        }

        /// <summary>
        /// Get Installation  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>InstallationObject</returns>
        public InstallationObject GetInstallation (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<InstallationObject> localVarResponse = GetInstallationWithHttpInfo(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Installation  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of InstallationObject</returns>
        public ApiResponse< InstallationObject > GetInstallationWithHttpInfo (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstallationsApi->GetInstallation");

            var localVarPath = "/installations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstallation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallationObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstallationObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallationObject)));
        }

        /// <summary>
        /// Get Installation  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of InstallationObject</returns>
        public async System.Threading.Tasks.Task<InstallationObject> GetInstallationAsync (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<InstallationObject> localVarResponse = await GetInstallationAsyncWithHttpInfo(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Installation  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (InstallationObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallationObject>> GetInstallationAsyncWithHttpInfo (string id, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstallationsApi->GetInstallation");

            var localVarPath = "/installations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstallation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallationObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstallationObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallationObject)));
        }

        /// <summary>
        /// Get Fields  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;FieldInstallationObject&gt;</returns>
        public List<FieldInstallationObject> GetInstallationFields (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<FieldInstallationObject>> localVarResponse = GetInstallationFieldsWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fields  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldInstallationObject&gt;</returns>
        public ApiResponse< List<FieldInstallationObject> > GetInstallationFieldsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/installations/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstallationFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldInstallationObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldInstallationObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldInstallationObject>)));
        }

        /// <summary>
        /// Get Fields  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;FieldInstallationObject&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldInstallationObject>> GetInstallationFieldsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<FieldInstallationObject>> localVarResponse = await GetInstallationFieldsAsyncWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fields  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FieldInstallationObject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldInstallationObject>>> GetInstallationFieldsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/installations/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstallationFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldInstallationObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldInstallationObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldInstallationObject>)));
        }

        /// <summary>
        /// Get Installations  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <param name="skip">users skipped (optional)</param>
        /// <param name="limit">maximum number of results to return (optional)</param>
        /// <param name="order">order ascending or descending (asc, desc) (optional)</param>
        /// <param name="where">filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)</param>
        /// <returns>List&lt;InstallationObject&gt;</returns>
        public List<InstallationObject> GetInstallations (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null, decimal? skip = null, decimal? limit = null, decimal? order = null, string where = null)
        {
             ApiResponse<List<InstallationObject>> localVarResponse = GetInstallationsWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Installations  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <param name="skip">users skipped (optional)</param>
        /// <param name="limit">maximum number of results to return (optional)</param>
        /// <param name="order">order ascending or descending (asc, desc) (optional)</param>
        /// <param name="where">filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)</param>
        /// <returns>ApiResponse of List&lt;InstallationObject&gt;</returns>
        public ApiResponse< List<InstallationObject> > GetInstallationsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null, decimal? skip = null, decimal? limit = null, decimal? order = null, string where = null)
        {

            var localVarPath = "/installations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (where != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "where", where)); // query parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstallations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InstallationObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InstallationObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InstallationObject>)));
        }

        /// <summary>
        /// Get Installations  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <param name="skip">users skipped (optional)</param>
        /// <param name="limit">maximum number of results to return (optional)</param>
        /// <param name="order">order ascending or descending (asc, desc) (optional)</param>
        /// <param name="where">filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)</param>
        /// <returns>Task of List&lt;InstallationObject&gt;</returns>
        public async System.Threading.Tasks.Task<List<InstallationObject>> GetInstallationsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null, decimal? skip = null, decimal? limit = null, decimal? order = null, string where = null)
        {
             ApiResponse<List<InstallationObject>> localVarResponse = await GetInstallationsAsyncWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Installations  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <param name="skip">users skipped (optional)</param>
        /// <param name="limit">maximum number of results to return (optional)</param>
        /// <param name="order">order ascending or descending (asc, desc) (optional)</param>
        /// <param name="where">filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InstallationObject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InstallationObject>>> GetInstallationsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null, decimal? skip = null, decimal? limit = null, decimal? order = null, string where = null)
        {

            var localVarPath = "/installations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (where != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "where", where)); // query parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstallations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InstallationObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InstallationObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InstallationObject>)));
        }

        /// <summary>
        /// Update Installation  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="body">Installation fields to update</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>UpdatedInstallationObject</returns>
        public UpdatedInstallationObject UpdateInstallation (string id, UpdateInstallationObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<UpdatedInstallationObject> localVarResponse = UpdateInstallationWithHttpInfo(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Installation  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="body">Installation fields to update</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of UpdatedInstallationObject</returns>
        public ApiResponse< UpdatedInstallationObject > UpdateInstallationWithHttpInfo (string id, UpdateInstallationObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstallationsApi->UpdateInstallation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InstallationsApi->UpdateInstallation");

            var localVarPath = "/installations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInstallation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedInstallationObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedInstallationObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedInstallationObject)));
        }

        /// <summary>
        /// Update Installation  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="body">Installation fields to update</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of UpdatedInstallationObject</returns>
        public async System.Threading.Tasks.Task<UpdatedInstallationObject> UpdateInstallationAsync (string id, UpdateInstallationObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<UpdatedInstallationObject> localVarResponse = await UpdateInstallationAsyncWithHttpInfo(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Installation  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A Installation ID</param>
        /// <param name="body">Installation fields to update</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedInstallationObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedInstallationObject>> UpdateInstallationAsyncWithHttpInfo (string id, UpdateInstallationObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstallationsApi->UpdateInstallation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InstallationsApi->UpdateInstallation");

            var localVarPath = "/installations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInstallation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedInstallationObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedInstallationObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedInstallationObject)));
        }

    }
}
