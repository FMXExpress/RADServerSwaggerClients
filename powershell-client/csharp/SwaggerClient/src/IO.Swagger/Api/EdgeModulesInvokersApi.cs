/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEdgeModulesInvokersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Invoke Resource Delete Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void DeleteResourceEndpoint (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Delete Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteResourceEndpointWithHttpInfo (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Delete Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void DeleteResourceEndpointItem (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Delete Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource Get Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void GetResourceEndpoint (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Get Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetResourceEndpointWithHttpInfo (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Get Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void GetResourceEndpointItem (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Get Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource Patch Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void PatchResourceEndpoint (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Patch Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchResourceEndpointWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Patch Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void PatchResourceEndpointItem (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Patch Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource Post Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void PostResourceEndpoint (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Post Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostResourceEndpointWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Post Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void PostResourceEndpointItem (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Post Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource Put Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void PutResourceEndpoint (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Put Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutResourceEndpointWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Put Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void PutResourceEndpointItem (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Put Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Invoke Resource Delete Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResourceEndpointAsync (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Delete Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceEndpointAsyncWithHttpInfo (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Delete Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResourceEndpointItemAsync (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Delete Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource Get Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetResourceEndpointAsync (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Get Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceEndpointAsyncWithHttpInfo (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Get Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetResourceEndpointItemAsync (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Get Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource Patch Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchResourceEndpointAsync (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Patch Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchResourceEndpointAsyncWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Patch Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchResourceEndpointItemAsync (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Patch Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource Post Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostResourceEndpointAsync (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Post Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostResourceEndpointAsyncWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Post Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostResourceEndpointItemAsync (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Post Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource Put Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutResourceEndpointAsync (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource Put Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutResourceEndpointAsyncWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Invoke Resource/_* Put Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutResourceEndpointItemAsync (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Invoke Resource/_* Put Method
        /// </summary>
        /// <remarks>
        /// Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EdgeModulesInvokersApi : IEdgeModulesInvokersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeModulesInvokersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeModulesInvokersApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeModulesInvokersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EdgeModulesInvokersApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Invoke Resource Delete Method Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void DeleteResourceEndpoint (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             DeleteResourceEndpointWithHttpInfo(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource Delete Method Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteResourceEndpointWithHttpInfo (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->DeleteResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->DeleteResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Delete Method Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResourceEndpointAsync (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await DeleteResourceEndpointAsyncWithHttpInfo(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource Delete Method Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceEndpointAsyncWithHttpInfo (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->DeleteResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->DeleteResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Delete Method Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void DeleteResourceEndpointItem (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             DeleteResourceEndpointItemWithHttpInfo(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource/_* Delete Method Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->DeleteResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->DeleteResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->DeleteResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Delete Method Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResourceEndpointItemAsync (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await DeleteResourceEndpointItemAsyncWithHttpInfo(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource/_* Delete Method Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->DeleteResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->DeleteResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->DeleteResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Get Method Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void GetResourceEndpoint (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             GetResourceEndpointWithHttpInfo(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource Get Method Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetResourceEndpointWithHttpInfo (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->GetResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->GetResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Get Method Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetResourceEndpointAsync (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await GetResourceEndpointAsyncWithHttpInfo(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource Get Method Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceEndpointAsyncWithHttpInfo (string mname, string rname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->GetResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->GetResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Get Method Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void GetResourceEndpointItem (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             GetResourceEndpointItemWithHttpInfo(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource/_* Get Method Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->GetResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->GetResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->GetResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Get Method Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetResourceEndpointItemAsync (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await GetResourceEndpointItemAsyncWithHttpInfo(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource/_* Get Method Used to invoke the GET method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->GetResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->GetResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->GetResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Patch Method Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void PatchResourceEndpoint (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             PatchResourceEndpointWithHttpInfo(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource Patch Method Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchResourceEndpointWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PatchResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PatchResourceEndpoint");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PatchResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Patch Method Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchResourceEndpointAsync (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await PatchResourceEndpointAsyncWithHttpInfo(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource Patch Method Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchResourceEndpointAsyncWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PatchResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PatchResourceEndpoint");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PatchResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Patch Method Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void PatchResourceEndpointItem (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             PatchResourceEndpointItemWithHttpInfo(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource/_* Patch Method Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PatchResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PatchResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->PatchResourceEndpointItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PatchResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Patch Method Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchResourceEndpointItemAsync (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await PatchResourceEndpointItemAsyncWithHttpInfo(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource/_* Patch Method Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PatchResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PatchResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->PatchResourceEndpointItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PatchResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Post Method Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void PostResourceEndpoint (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             PostResourceEndpointWithHttpInfo(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource Post Method Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostResourceEndpointWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PostResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PostResourceEndpoint");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PostResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Post Method Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostResourceEndpointAsync (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await PostResourceEndpointAsyncWithHttpInfo(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource Post Method Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostResourceEndpointAsyncWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PostResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PostResourceEndpoint");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PostResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Post Method Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void PostResourceEndpointItem (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             PostResourceEndpointItemWithHttpInfo(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource/_* Post Method Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PostResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PostResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->PostResourceEndpointItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PostResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Post Method Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostResourceEndpointItemAsync (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await PostResourceEndpointItemAsyncWithHttpInfo(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource/_* Post Method Used to invoke the POST method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PostResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PostResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->PostResourceEndpointItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PostResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Put Method Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void PutResourceEndpoint (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             PutResourceEndpointWithHttpInfo(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource Put Method Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutResourceEndpointWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PutResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PutResourceEndpoint");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PutResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource Put Method Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutResourceEndpointAsync (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await PutResourceEndpointAsyncWithHttpInfo(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource Put Method Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutResourceEndpointAsyncWithHttpInfo (string mname, string rname, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PutResourceEndpoint");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PutResourceEndpoint");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PutResourceEndpoint");

            var localVarPath = "/edgemodules/{mname}/{rname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutResourceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Put Method Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void PutResourceEndpointItem (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             PutResourceEndpointItemWithHttpInfo(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Invoke Resource/_* Put Method Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutResourceEndpointItemWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PutResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PutResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->PutResourceEndpointItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PutResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invoke Resource/_* Put Method Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutResourceEndpointItemAsync (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await PutResourceEndpointItemAsyncWithHttpInfo(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Invoke Resource/_* Put Method Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the EMS EdgeModule name</param>
        /// <param name="rname">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="wildcard">Is the Wild card part of the URL</param>
        /// <param name="body">Body Object</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutResourceEndpointItemAsyncWithHttpInfo (string mname, string rname, string wildcard, Object body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesInvokersApi->PutResourceEndpointItem");
            // verify the required parameter 'rname' is set
            if (rname == null)
                throw new ApiException(400, "Missing required parameter 'rname' when calling EdgeModulesInvokersApi->PutResourceEndpointItem");
            // verify the required parameter 'wildcard' is set
            if (wildcard == null)
                throw new ApiException(400, "Missing required parameter 'wildcard' when calling EdgeModulesInvokersApi->PutResourceEndpointItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesInvokersApi->PutResourceEndpointItem");

            var localVarPath = "/edgemodules/{mname}/{rname}/{wildcard}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (rname != null) localVarPathParams.Add("rname", this.Configuration.ApiClient.ParameterToString(rname)); // path parameter
            if (wildcard != null) localVarPathParams.Add("wildcard", this.Configuration.ApiClient.ParameterToString(wildcard)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutResourceEndpointItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
