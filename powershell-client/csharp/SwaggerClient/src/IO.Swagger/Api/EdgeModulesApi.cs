/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEdgeModulesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Module
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleObject</returns>
        EdgeModuleObject GetModule (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Module
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleObject</returns>
        ApiResponse<EdgeModuleObject> GetModuleWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get EdgeModule Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleResourceObject</returns>
        EdgeModuleResourceObject GetModuleResource (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get EdgeModule Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleResourceObject</returns>
        ApiResponse<EdgeModuleResourceObject> GetModuleResourceWithHttpInfo (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get EdgeModule Resources
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from the resources of an EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;EdgeModuleResourceObject&gt;</returns>
        List<EdgeModuleResourceObject> GetModuleResources (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get EdgeModule Resources
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from the resources of an EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdgeModuleResourceObject&gt;</returns>
        ApiResponse<List<EdgeModuleResourceObject>> GetModuleResourcesWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Module
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;EdgeModuleObject&gt;</returns>
        List<EdgeModuleObject> GetModules (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Module
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdgeModuleObject&gt;</returns>
        ApiResponse<List<EdgeModuleObject>> GetModulesWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>FieldsEdgeModuleObject</returns>
        FieldsEdgeModuleObject GetModulesFields (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of FieldsEdgeModuleObject</returns>
        ApiResponse<FieldsEdgeModuleObject> GetModulesFieldsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get EdgeModules Resources
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from the resources of all EdgeModules.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;EdgeModuleResourceObject&gt;</returns>
        List<EdgeModuleResourceObject> GetResources (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get EdgeModules Resources
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from the resources of all EdgeModules.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdgeModuleResourceObject&gt;</returns>
        ApiResponse<List<EdgeModuleResourceObject>> GetResourcesWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Resource Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>FieldsEdgeModuleObject</returns>
        FieldsEdgeModuleObject GetResourcesFields (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Resource Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of FieldsEdgeModuleObject</returns>
        ApiResponse<FieldsEdgeModuleObject> GetResourcesFieldsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Add Module
        /// </summary>
        /// <remarks>
        ///  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleAddedObject</returns>
        EdgeModuleAddedObject RegisterModule (EdgeModuleAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Add Module
        /// </summary>
        /// <remarks>
        ///  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleAddedObject</returns>
        ApiResponse<EdgeModuleAddedObject> RegisterModuleWithHttpInfo (EdgeModuleAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Add Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleResourceAddedObject</returns>
        EdgeModuleResourceAddedObject RegisterModuleResource (string mname, EdgeModuleResourceAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Add Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleResourceAddedObject</returns>
        ApiResponse<EdgeModuleResourceAddedObject> RegisterModuleResourceWithHttpInfo (string mname, EdgeModuleResourceAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Delete Module
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void UnregisterModule (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Delete Module
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnregisterModuleWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Delete Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        void UnregisterModuleResource (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Delete Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnregisterModuleResourceWithHttpInfo (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Update Module
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleUpdatedObject</returns>
        EdgeModuleUpdatedObject UpdateModule (string mname, EdgeModuleUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Update Module
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleUpdatedObject</returns>
        ApiResponse<EdgeModuleUpdatedObject> UpdateModuleWithHttpInfo (string mname, EdgeModuleUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Update Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleResourceUpdatedObject</returns>
        EdgeModuleResourceUpdatedObject UpdateModuleResource (string mname, string name, EdgeModuleResourceUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Update Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleResourceUpdatedObject</returns>
        ApiResponse<EdgeModuleResourceUpdatedObject> UpdateModuleResourceWithHttpInfo (string mname, string name, EdgeModuleResourceUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Module
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleObject</returns>
        System.Threading.Tasks.Task<EdgeModuleObject> GetModuleAsync (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Module
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeModuleObject>> GetModuleAsyncWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get EdgeModule Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleResourceObject</returns>
        System.Threading.Tasks.Task<EdgeModuleResourceObject> GetModuleResourceAsync (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get EdgeModule Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleResourceObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeModuleResourceObject>> GetModuleResourceAsyncWithHttpInfo (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get EdgeModule Resources
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from the resources of an EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;EdgeModuleResourceObject&gt;</returns>
        System.Threading.Tasks.Task<List<EdgeModuleResourceObject>> GetModuleResourcesAsync (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get EdgeModule Resources
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from the resources of an EdgeModule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdgeModuleResourceObject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdgeModuleResourceObject>>> GetModuleResourcesAsyncWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Module
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;EdgeModuleObject&gt;</returns>
        System.Threading.Tasks.Task<List<EdgeModuleObject>> GetModulesAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Module
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdgeModuleObject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdgeModuleObject>>> GetModulesAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of FieldsEdgeModuleObject</returns>
        System.Threading.Tasks.Task<FieldsEdgeModuleObject> GetModulesFieldsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldsEdgeModuleObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldsEdgeModuleObject>> GetModulesFieldsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get EdgeModules Resources
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from the resources of all EdgeModules.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;EdgeModuleResourceObject&gt;</returns>
        System.Threading.Tasks.Task<List<EdgeModuleResourceObject>> GetResourcesAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get EdgeModules Resources
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve all data from the resources of all EdgeModules.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdgeModuleResourceObject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdgeModuleResourceObject>>> GetResourcesAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Get Resource Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of FieldsEdgeModuleObject</returns>
        System.Threading.Tasks.Task<FieldsEdgeModuleObject> GetResourcesFieldsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Get Resource Fields
        /// </summary>
        /// <remarks>
        ///  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldsEdgeModuleObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldsEdgeModuleObject>> GetResourcesFieldsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Add Module
        /// </summary>
        /// <remarks>
        ///  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleAddedObject</returns>
        System.Threading.Tasks.Task<EdgeModuleAddedObject> RegisterModuleAsync (EdgeModuleAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Add Module
        /// </summary>
        /// <remarks>
        ///  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleAddedObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeModuleAddedObject>> RegisterModuleAsyncWithHttpInfo (EdgeModuleAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Add Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleResourceAddedObject</returns>
        System.Threading.Tasks.Task<EdgeModuleResourceAddedObject> RegisterModuleResourceAsync (string mname, EdgeModuleResourceAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Add Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleResourceAddedObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeModuleResourceAddedObject>> RegisterModuleResourceAsyncWithHttpInfo (string mname, EdgeModuleResourceAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Delete Module
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnregisterModuleAsync (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Delete Module
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterModuleAsyncWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Delete Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnregisterModuleResourceAsync (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Delete Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterModuleResourceAsyncWithHttpInfo (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Update Module
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleUpdatedObject</returns>
        System.Threading.Tasks.Task<EdgeModuleUpdatedObject> UpdateModuleAsync (string mname, EdgeModuleUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Update Module
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleUpdatedObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeModuleUpdatedObject>> UpdateModuleAsyncWithHttpInfo (string mname, EdgeModuleUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        /// <summary>
        /// Update Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleResourceUpdatedObject</returns>
        System.Threading.Tasks.Task<EdgeModuleResourceUpdatedObject> UpdateModuleResourceAsync (string mname, string name, EdgeModuleResourceUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);

        /// <summary>
        /// Update Module Resource
        /// </summary>
        /// <remarks>
        ///  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleResourceUpdatedObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeModuleResourceUpdatedObject>> UpdateModuleResourceAsyncWithHttpInfo (string mname, string name, EdgeModuleResourceUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EdgeModulesApi : IEdgeModulesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeModulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeModulesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeModulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EdgeModulesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Module  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleObject</returns>
        public EdgeModuleObject GetModule (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleObject> localVarResponse = GetModuleWithHttpInfo(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Module  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleObject</returns>
        public ApiResponse< EdgeModuleObject > GetModuleWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->GetModule");

            var localVarPath = "/edgemodules/{mname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleObject)));
        }

        /// <summary>
        /// Get Module  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleObject</returns>
        public async System.Threading.Tasks.Task<EdgeModuleObject> GetModuleAsync (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleObject> localVarResponse = await GetModuleAsyncWithHttpInfo(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Module  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdgeModuleObject>> GetModuleAsyncWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->GetModule");

            var localVarPath = "/edgemodules/{mname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleObject)));
        }

        /// <summary>
        /// Get EdgeModule Resource  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleResourceObject</returns>
        public EdgeModuleResourceObject GetModuleResource (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleResourceObject> localVarResponse = GetModuleResourceWithHttpInfo(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get EdgeModule Resource  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleResourceObject</returns>
        public ApiResponse< EdgeModuleResourceObject > GetModuleResourceWithHttpInfo (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->GetModuleResource");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EdgeModulesApi->GetModuleResource");

            var localVarPath = "/edgemodules/{mname}/resources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModuleResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleResourceObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleResourceObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleResourceObject)));
        }

        /// <summary>
        /// Get EdgeModule Resource  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleResourceObject</returns>
        public async System.Threading.Tasks.Task<EdgeModuleResourceObject> GetModuleResourceAsync (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleResourceObject> localVarResponse = await GetModuleResourceAsyncWithHttpInfo(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get EdgeModule Resource  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleResourceObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdgeModuleResourceObject>> GetModuleResourceAsyncWithHttpInfo (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->GetModuleResource");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EdgeModulesApi->GetModuleResource");

            var localVarPath = "/edgemodules/{mname}/resources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModuleResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleResourceObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleResourceObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleResourceObject)));
        }

        /// <summary>
        /// Get EdgeModule Resources  |      Used to retrieve all data from the resources of an EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;EdgeModuleResourceObject&gt;</returns>
        public List<EdgeModuleResourceObject> GetModuleResources (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<EdgeModuleResourceObject>> localVarResponse = GetModuleResourcesWithHttpInfo(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get EdgeModule Resources  |      Used to retrieve all data from the resources of an EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdgeModuleResourceObject&gt;</returns>
        public ApiResponse< List<EdgeModuleResourceObject> > GetModuleResourcesWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->GetModuleResources");

            var localVarPath = "/edgemodules/{mname}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModuleResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdgeModuleResourceObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdgeModuleResourceObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdgeModuleResourceObject>)));
        }

        /// <summary>
        /// Get EdgeModule Resources  |      Used to retrieve all data from the resources of an EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;EdgeModuleResourceObject&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdgeModuleResourceObject>> GetModuleResourcesAsync (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<EdgeModuleResourceObject>> localVarResponse = await GetModuleResourcesAsyncWithHttpInfo(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get EdgeModule Resources  |      Used to retrieve all data from the resources of an EdgeModule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdgeModuleResourceObject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EdgeModuleResourceObject>>> GetModuleResourcesAsyncWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->GetModuleResources");

            var localVarPath = "/edgemodules/{mname}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModuleResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdgeModuleResourceObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdgeModuleResourceObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdgeModuleResourceObject>)));
        }

        /// <summary>
        /// Get Module  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;EdgeModuleObject&gt;</returns>
        public List<EdgeModuleObject> GetModules (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<EdgeModuleObject>> localVarResponse = GetModulesWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Module  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdgeModuleObject&gt;</returns>
        public ApiResponse< List<EdgeModuleObject> > GetModulesWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/edgemodules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdgeModuleObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdgeModuleObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdgeModuleObject>)));
        }

        /// <summary>
        /// Get Module  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;EdgeModuleObject&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdgeModuleObject>> GetModulesAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<EdgeModuleObject>> localVarResponse = await GetModulesAsyncWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Module  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdgeModuleObject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EdgeModuleObject>>> GetModulesAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/edgemodules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdgeModuleObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdgeModuleObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdgeModuleObject>)));
        }

        /// <summary>
        /// Get Fields  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>FieldsEdgeModuleObject</returns>
        public FieldsEdgeModuleObject GetModulesFields (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<FieldsEdgeModuleObject> localVarResponse = GetModulesFieldsWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fields  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of FieldsEdgeModuleObject</returns>
        public ApiResponse< FieldsEdgeModuleObject > GetModulesFieldsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/edgemodules/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModulesFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsEdgeModuleObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsEdgeModuleObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldsEdgeModuleObject)));
        }

        /// <summary>
        /// Get Fields  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of FieldsEdgeModuleObject</returns>
        public async System.Threading.Tasks.Task<FieldsEdgeModuleObject> GetModulesFieldsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<FieldsEdgeModuleObject> localVarResponse = await GetModulesFieldsAsyncWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fields  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldsEdgeModuleObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldsEdgeModuleObject>> GetModulesFieldsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/edgemodules/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModulesFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsEdgeModuleObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsEdgeModuleObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldsEdgeModuleObject)));
        }

        /// <summary>
        /// Get EdgeModules Resources  |      Used to retrieve all data from the resources of all EdgeModules.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>List&lt;EdgeModuleResourceObject&gt;</returns>
        public List<EdgeModuleResourceObject> GetResources (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<EdgeModuleResourceObject>> localVarResponse = GetResourcesWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get EdgeModules Resources  |      Used to retrieve all data from the resources of all EdgeModules.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdgeModuleResourceObject&gt;</returns>
        public ApiResponse< List<EdgeModuleResourceObject> > GetResourcesWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/edgemodules/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdgeModuleResourceObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdgeModuleResourceObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdgeModuleResourceObject>)));
        }

        /// <summary>
        /// Get EdgeModules Resources  |      Used to retrieve all data from the resources of all EdgeModules.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of List&lt;EdgeModuleResourceObject&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdgeModuleResourceObject>> GetResourcesAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<List<EdgeModuleResourceObject>> localVarResponse = await GetResourcesAsyncWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get EdgeModules Resources  |      Used to retrieve all data from the resources of all EdgeModules.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdgeModuleResourceObject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EdgeModuleResourceObject>>> GetResourcesAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/edgemodules/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdgeModuleResourceObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdgeModuleResourceObject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdgeModuleResourceObject>)));
        }

        /// <summary>
        /// Get Resource Fields  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>FieldsEdgeModuleObject</returns>
        public FieldsEdgeModuleObject GetResourcesFields (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<FieldsEdgeModuleObject> localVarResponse = GetResourcesFieldsWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Resource Fields  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of FieldsEdgeModuleObject</returns>
        public ApiResponse< FieldsEdgeModuleObject > GetResourcesFieldsWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/edgemodules/resources/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsEdgeModuleObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsEdgeModuleObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldsEdgeModuleObject)));
        }

        /// <summary>
        /// Get Resource Fields  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of FieldsEdgeModuleObject</returns>
        public async System.Threading.Tasks.Task<FieldsEdgeModuleObject> GetResourcesFieldsAsync (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<FieldsEdgeModuleObject> localVarResponse = await GetResourcesFieldsAsyncWithHttpInfo(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Resource Fields  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldsEdgeModuleObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldsEdgeModuleObject>> GetResourcesFieldsAsyncWithHttpInfo (string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {

            var localVarPath = "/edgemodules/resources/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsEdgeModuleObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsEdgeModuleObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldsEdgeModuleObject)));
        }

        /// <summary>
        /// Add Module  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleAddedObject</returns>
        public EdgeModuleAddedObject RegisterModule (EdgeModuleAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleAddedObject> localVarResponse = RegisterModuleWithHttpInfo(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Module  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleAddedObject</returns>
        public ApiResponse< EdgeModuleAddedObject > RegisterModuleWithHttpInfo (EdgeModuleAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesApi->RegisterModule");

            var localVarPath = "/edgemodules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleAddedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleAddedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleAddedObject)));
        }

        /// <summary>
        /// Add Module  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleAddedObject</returns>
        public async System.Threading.Tasks.Task<EdgeModuleAddedObject> RegisterModuleAsync (EdgeModuleAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleAddedObject> localVarResponse = await RegisterModuleAsyncWithHttpInfo(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Module  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleAddedObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdgeModuleAddedObject>> RegisterModuleAsyncWithHttpInfo (EdgeModuleAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesApi->RegisterModule");

            var localVarPath = "/edgemodules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleAddedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleAddedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleAddedObject)));
        }

        /// <summary>
        /// Add Module Resource  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleResourceAddedObject</returns>
        public EdgeModuleResourceAddedObject RegisterModuleResource (string mname, EdgeModuleResourceAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleResourceAddedObject> localVarResponse = RegisterModuleResourceWithHttpInfo(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Module Resource  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleResourceAddedObject</returns>
        public ApiResponse< EdgeModuleResourceAddedObject > RegisterModuleResourceWithHttpInfo (string mname, EdgeModuleResourceAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->RegisterModuleResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesApi->RegisterModuleResource");

            var localVarPath = "/edgemodules/{mname}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterModuleResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleResourceAddedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleResourceAddedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleResourceAddedObject)));
        }

        /// <summary>
        /// Add Module Resource  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleResourceAddedObject</returns>
        public async System.Threading.Tasks.Task<EdgeModuleResourceAddedObject> RegisterModuleResourceAsync (string mname, EdgeModuleResourceAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleResourceAddedObject> localVarResponse = await RegisterModuleResourceAsyncWithHttpInfo(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Module Resource  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleResourceAddedObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdgeModuleResourceAddedObject>> RegisterModuleResourceAsyncWithHttpInfo (string mname, EdgeModuleResourceAddObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->RegisterModuleResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesApi->RegisterModuleResource");

            var localVarPath = "/edgemodules/{mname}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterModuleResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleResourceAddedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleResourceAddedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleResourceAddedObject)));
        }

        /// <summary>
        /// Delete Module  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void UnregisterModule (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             UnregisterModuleWithHttpInfo(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Delete Module  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnregisterModuleWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->UnregisterModule");

            var localVarPath = "/edgemodules/{mname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnregisterModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Module  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnregisterModuleAsync (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await UnregisterModuleAsyncWithHttpInfo(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Delete Module  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterModuleAsyncWithHttpInfo (string mname, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->UnregisterModule");

            var localVarPath = "/edgemodules/{mname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnregisterModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Module Resource  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns></returns>
        public void UnregisterModuleResource (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             UnregisterModuleResourceWithHttpInfo(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        }

        /// <summary>
        /// Delete Module Resource  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnregisterModuleResourceWithHttpInfo (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->UnregisterModuleResource");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EdgeModulesApi->UnregisterModuleResource");

            var localVarPath = "/edgemodules/{mname}/resources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnregisterModuleResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Module Resource  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnregisterModuleResourceAsync (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             await UnregisterModuleResourceAsyncWithHttpInfo(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);

        }

        /// <summary>
        /// Delete Module Resource  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterModuleResourceAsyncWithHttpInfo (string mname, string name, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->UnregisterModuleResource");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EdgeModulesApi->UnregisterModuleResource");

            var localVarPath = "/edgemodules/{mname}/resources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnregisterModuleResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Module  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleUpdatedObject</returns>
        public EdgeModuleUpdatedObject UpdateModule (string mname, EdgeModuleUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleUpdatedObject> localVarResponse = UpdateModuleWithHttpInfo(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Module  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleUpdatedObject</returns>
        public ApiResponse< EdgeModuleUpdatedObject > UpdateModuleWithHttpInfo (string mname, EdgeModuleUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->UpdateModule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesApi->UpdateModule");

            var localVarPath = "/edgemodules/{mname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleUpdatedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleUpdatedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleUpdatedObject)));
        }

        /// <summary>
        /// Update Module  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleUpdatedObject</returns>
        public async System.Threading.Tasks.Task<EdgeModuleUpdatedObject> UpdateModuleAsync (string mname, EdgeModuleUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleUpdatedObject> localVarResponse = await UpdateModuleAsyncWithHttpInfo(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Module  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleUpdatedObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdgeModuleUpdatedObject>> UpdateModuleAsyncWithHttpInfo (string mname, EdgeModuleUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->UpdateModule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesApi->UpdateModule");

            var localVarPath = "/edgemodules/{mname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleUpdatedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleUpdatedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleUpdatedObject)));
        }

        /// <summary>
        /// Update Module Resource  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>EdgeModuleResourceUpdatedObject</returns>
        public EdgeModuleResourceUpdatedObject UpdateModuleResource (string mname, string name, EdgeModuleResourceUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleResourceUpdatedObject> localVarResponse = UpdateModuleResourceWithHttpInfo(mname, name, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Module Resource  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>ApiResponse of EdgeModuleResourceUpdatedObject</returns>
        public ApiResponse< EdgeModuleResourceUpdatedObject > UpdateModuleResourceWithHttpInfo (string mname, string name, EdgeModuleResourceUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->UpdateModuleResource");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EdgeModulesApi->UpdateModuleResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesApi->UpdateModuleResource");

            var localVarPath = "/edgemodules/{mname}/resources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModuleResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleResourceUpdatedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleResourceUpdatedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleResourceUpdatedObject)));
        }

        /// <summary>
        /// Update Module Resource  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of EdgeModuleResourceUpdatedObject</returns>
        public async System.Threading.Tasks.Task<EdgeModuleResourceUpdatedObject> UpdateModuleResourceAsync (string mname, string name, EdgeModuleResourceUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
             ApiResponse<EdgeModuleResourceUpdatedObject> localVarResponse = await UpdateModuleResourceAsyncWithHttpInfo(mname, name, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Module Resource  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mname">Is the unique EMS EdgeModule identifier</param>
        /// <param name="name">Is the unique EMS EdgeModule Resource name</param>
        /// <param name="body">EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}</param>
        /// <param name="xEmbarcaderoApplicationId"> (optional)</param>
        /// <param name="xEmbarcaderoAppSecret"> (optional)</param>
        /// <param name="xEmbarcaderoMasterSecret"> (optional)</param>
        /// <returns>Task of ApiResponse (EdgeModuleResourceUpdatedObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdgeModuleResourceUpdatedObject>> UpdateModuleResourceAsyncWithHttpInfo (string mname, string name, EdgeModuleResourceUpdateObject body, string xEmbarcaderoApplicationId = null, string xEmbarcaderoAppSecret = null, string xEmbarcaderoMasterSecret = null)
        {
            // verify the required parameter 'mname' is set
            if (mname == null)
                throw new ApiException(400, "Missing required parameter 'mname' when calling EdgeModulesApi->UpdateModuleResource");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EdgeModulesApi->UpdateModuleResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdgeModulesApi->UpdateModuleResource");

            var localVarPath = "/edgemodules/{mname}/resources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mname != null) localVarPathParams.Add("mname", this.Configuration.ApiClient.ParameterToString(mname)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xEmbarcaderoApplicationId != null) localVarHeaderParams.Add("X-Embarcadero-Application-Id", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoApplicationId)); // header parameter
            if (xEmbarcaderoAppSecret != null) localVarHeaderParams.Add("X-Embarcadero-App-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoAppSecret)); // header parameter
            if (xEmbarcaderoMasterSecret != null) localVarHeaderParams.Add("X-Embarcadero-Master-Secret", this.Configuration.ApiClient.ParameterToString(xEmbarcaderoMasterSecret)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModuleResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeModuleResourceUpdatedObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdgeModuleResourceUpdatedObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeModuleResourceUpdatedObject)));
        }

    }
}
