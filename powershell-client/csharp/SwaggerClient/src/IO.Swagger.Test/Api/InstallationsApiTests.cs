/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing InstallationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InstallationsApiTests
    {
        private InstallationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InstallationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InstallationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InstallationsApi
            //Assert.IsInstanceOfType(typeof(InstallationsApi), instance, "instance is a InstallationsApi");
        }

        
        /// <summary>
        /// Test AddInstallation
        /// </summary>
        [Test]
        public void AddInstallationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstallationAddObject body = null;
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //var response = instance.AddInstallation(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            //Assert.IsInstanceOf<InstallationAddedObject> (response, "response is InstallationAddedObject");
        }
        
        /// <summary>
        /// Test DeleteInstallation
        /// </summary>
        [Test]
        public void DeleteInstallationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //instance.DeleteInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            
        }
        
        /// <summary>
        /// Test GetChannels
        /// </summary>
        [Test]
        public void GetChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //var response = instance.GetChannels(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            //Assert.IsInstanceOf<List<ChannelName>> (response, "response is List<ChannelName>");
        }
        
        /// <summary>
        /// Test GetInstallation
        /// </summary>
        [Test]
        public void GetInstallationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //var response = instance.GetInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            //Assert.IsInstanceOf<InstallationObject> (response, "response is InstallationObject");
        }
        
        /// <summary>
        /// Test GetInstallationFields
        /// </summary>
        [Test]
        public void GetInstallationFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //var response = instance.GetInstallationFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            //Assert.IsInstanceOf<List<FieldInstallationObject>> (response, "response is List<FieldInstallationObject>");
        }
        
        /// <summary>
        /// Test GetInstallations
        /// </summary>
        [Test]
        public void GetInstallationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //decimal? skip = null;
            //decimal? limit = null;
            //decimal? order = null;
            //string where = null;
            //var response = instance.GetInstallations(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where);
            //Assert.IsInstanceOf<List<InstallationObject>> (response, "response is List<InstallationObject>");
        }
        
        /// <summary>
        /// Test UpdateInstallation
        /// </summary>
        [Test]
        public void UpdateInstallationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateInstallationObject body = null;
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //var response = instance.UpdateInstallation(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            //Assert.IsInstanceOf<UpdatedInstallationObject> (response, "response is UpdatedInstallationObject");
        }
        
    }

}
