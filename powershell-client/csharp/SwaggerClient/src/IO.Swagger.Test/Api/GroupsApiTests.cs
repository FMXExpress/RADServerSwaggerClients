/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupsApiTests
    {
        private GroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupsApi
            //Assert.IsInstanceOfType(typeof(GroupsApi), instance, "instance is a GroupsApi");
        }

        
        /// <summary>
        /// Test AddGroup
        /// </summary>
        [Test]
        public void AddGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupAddObject body = null;
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //instance.AddGroup(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            
        }
        
        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Test]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string item = null;
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //instance.DeleteGroup(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            
        }
        
        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Test]
        public void GetGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string item = null;
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //var response = instance.GetGroup(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            //Assert.IsInstanceOf<GroupObject> (response, "response is GroupObject");
        }
        
        /// <summary>
        /// Test GetGroupFields
        /// </summary>
        [Test]
        public void GetGroupFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //var response = instance.GetGroupFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            //Assert.IsInstanceOf<List<FieldGroupObject>> (response, "response is List<FieldGroupObject>");
        }
        
        /// <summary>
        /// Test GetGroups
        /// </summary>
        [Test]
        public void GetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //decimal? skip = null;
            //decimal? limit = null;
            //decimal? order = null;
            //string where = null;
            //var response = instance.GetGroups(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where);
            //Assert.IsInstanceOf<List<GroupObject>> (response, "response is List<GroupObject>");
        }
        
        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Test]
        public void UpdateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string item = null;
            //UpdateGroupObject body = null;
            //string xEmbarcaderoApplicationId = null;
            //string xEmbarcaderoAppSecret = null;
            //string xEmbarcaderoMasterSecret = null;
            //var response = instance.UpdateGroup(item, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
            //Assert.IsInstanceOf<UpdatedGroupObject> (response, "response is UpdatedGroupObject");
        }
        
    }

}
