/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  FieldGroupObject,
  GroupAddObject,
  UpdateGroupObject,
  UpdatedGroupObject,
  GroupObject,
} from './models';

/**
 * addGroup - parameters interface
 */
export interface IAddGroupParams {
  body: GroupAddObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * deleteGroup - parameters interface
 */
export interface IDeleteGroupParams {
  item: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getGroup - parameters interface
 */
export interface IGetGroupParams {
  item: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getGroupFields - parameters interface
 */
export interface IGetGroupFieldsParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getGroups - parameters interface
 */
export interface IGetGroupsParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
  skip?: number;
  limit?: number;
  order?: number;
  where?: string;
}

/**
 * updateGroup - parameters interface
 */
export interface IUpdateGroupParams {
  item: string;
  body: UpdateGroupObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * GroupsApi - API class
 */
@autoinject()
export class GroupsApi extends Api {

  /**
   * Creates a new GroupsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Add Group
   *  |      Used to add a new &#x60;Group&#x60; object to the EMS database.
   * @param params.body Object to sign up a new EMS User in the EMS Server
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async addGroup(params: IAddGroupParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('addGroup', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/groups`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Group
   *  |      Used to delete a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
   * @param params.item A group name
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async deleteGroup(params: IDeleteGroupParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteGroup', params, 'item');

    // Create URL to call
    const url = `${this.basePath}/groups/{item}`
      .replace(`{${'item'}}`, encodeURIComponent(`${params['item']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Group
   *  |      Used to retrieve all data from a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
   * @param params.item A group name
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getGroup(params: IGetGroupParams): Promise<GroupObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getGroup', params, 'item');

    // Create URL to call
    const url = `${this.basePath}/groups/{item}`
      .replace(`{${'item'}}`, encodeURIComponent(`${params['item']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Fields
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Group (including the custom fields).
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getGroupFields(params: IGetGroupFieldsParams): Promise<Array<FieldGroupObject>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/groups/fields`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Groups
   *  |      Used to retrieve all data from &#x60;Groups&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   * @param params.skip users skipped
   * @param params.limit maximum number of results to return
   * @param params.order order ascending or descending (asc, desc)
   * @param params.where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
   */
  async getGroups(params: IGetGroupsParams): Promise<Array<GroupObject>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/groups`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'skip': params['skip'],
        'limit': params['limit'],
        'order': params['order'],
        'where': params['where'],
      })
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Group
   *  |      Used to update a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
   * @param params.item A group name
   * @param params.body Object to sign up a new EMS User in the EMS Server
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async updateGroup(params: IUpdateGroupParams): Promise<UpdatedGroupObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateGroup', params, 'item');
    this.ensureParamIsSet('updateGroup', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/groups/{item}`
      .replace(`{${'item'}}`, encodeURIComponent(`${params['item']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

