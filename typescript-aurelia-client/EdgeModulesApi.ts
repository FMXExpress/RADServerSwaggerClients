/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  EdgeModuleResourceUpdateObject,
  FieldsEdgeModuleObject,
  EdgeModuleAddObject,
  EdgeModuleResourceAddObject,
  EdgeModuleResourceObject,
  EdgeModuleObject,
  EdgeModuleUpdatedObject,
  EdgeModuleResourceUpdatedObject,
  EdgeModuleUpdateObject,
  EdgeModuleAddedObject,
  EdgeModuleResourceAddedObject,
} from './models';

/**
 * getModule - parameters interface
 */
export interface IGetModuleParams {
  mname: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getModuleResource - parameters interface
 */
export interface IGetModuleResourceParams {
  mname: string;
  name: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getModuleResources - parameters interface
 */
export interface IGetModuleResourcesParams {
  mname: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getModules - parameters interface
 */
export interface IGetModulesParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getModulesFields - parameters interface
 */
export interface IGetModulesFieldsParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getResources - parameters interface
 */
export interface IGetResourcesParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getResourcesFields - parameters interface
 */
export interface IGetResourcesFieldsParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * registerModule - parameters interface
 */
export interface IRegisterModuleParams {
  body: EdgeModuleAddObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * registerModuleResource - parameters interface
 */
export interface IRegisterModuleResourceParams {
  mname: string;
  body: EdgeModuleResourceAddObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * unregisterModule - parameters interface
 */
export interface IUnregisterModuleParams {
  mname: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * unregisterModuleResource - parameters interface
 */
export interface IUnregisterModuleResourceParams {
  mname: string;
  name: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * updateModule - parameters interface
 */
export interface IUpdateModuleParams {
  mname: string;
  body: EdgeModuleUpdateObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * updateModuleResource - parameters interface
 */
export interface IUpdateModuleResourceParams {
  mname: string;
  name: string;
  body: EdgeModuleResourceUpdateObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * EdgeModulesApi - API class
 */
@autoinject()
export class EdgeModulesApi extends Api {

  /**
   * Creates a new EdgeModulesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get Module
   *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   * @param params.mname Is the unique EMS EdgeModule identifier
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getModule(params: IGetModuleParams): Promise<EdgeModuleObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getModule', params, 'mname');

    // Create URL to call
    const url = `${this.basePath}/edgemodules/{mname}`
      .replace(`{${'mname'}}`, encodeURIComponent(`${params['mname']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get EdgeModule Resource
   *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
   * @param params.mname Is the unique EMS EdgeModule identifier
   * @param params.name Is the unique EMS EdgeModule Resource name
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getModuleResource(params: IGetModuleResourceParams): Promise<EdgeModuleResourceObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getModuleResource', params, 'mname');
    this.ensureParamIsSet('getModuleResource', params, 'name');

    // Create URL to call
    const url = `${this.basePath}/edgemodules/{mname}/resources/{name}`
      .replace(`{${'mname'}}`, encodeURIComponent(`${params['mname']}`))
      .replace(`{${'name'}}`, encodeURIComponent(`${params['name']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get EdgeModule Resources
   *  |      Used to retrieve all data from the resources of an EdgeModule.
   * @param params.mname Is the unique EMS EdgeModule identifier
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getModuleResources(params: IGetModuleResourcesParams): Promise<Array<EdgeModuleResourceObject>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getModuleResources', params, 'mname');

    // Create URL to call
    const url = `${this.basePath}/edgemodules/{mname}/resources`
      .replace(`{${'mname'}}`, encodeURIComponent(`${params['mname']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Module
   *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getModules(params: IGetModulesParams): Promise<Array<EdgeModuleObject>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/edgemodules`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Fields
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getModulesFields(params: IGetModulesFieldsParams): Promise<FieldsEdgeModuleObject> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/edgemodules/fields`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get EdgeModules Resources
   *  |      Used to retrieve all data from the resources of all EdgeModules.
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getResources(params: IGetResourcesParams): Promise<Array<EdgeModuleResourceObject>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/edgemodules/resources`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Resource Fields
   *  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getResourcesFields(params: IGetResourcesFieldsParams): Promise<FieldsEdgeModuleObject> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/edgemodules/resources/fields`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add Module
   *  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
   * @param params.body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async registerModule(params: IRegisterModuleParams): Promise<EdgeModuleAddedObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('registerModule', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/edgemodules`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add Module Resource
   *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
   * @param params.mname Is the unique EMS EdgeModule identifier
   * @param params.body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async registerModuleResource(params: IRegisterModuleResourceParams): Promise<EdgeModuleResourceAddedObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('registerModuleResource', params, 'mname');
    this.ensureParamIsSet('registerModuleResource', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/edgemodules/{mname}/resources`
      .replace(`{${'mname'}}`, encodeURIComponent(`${params['mname']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Module
   *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
   * @param params.mname Is the unique EMS EdgeModule identifier
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async unregisterModule(params: IUnregisterModuleParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('unregisterModule', params, 'mname');

    // Create URL to call
    const url = `${this.basePath}/edgemodules/{mname}`
      .replace(`{${'mname'}}`, encodeURIComponent(`${params['mname']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Module Resource
   *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
   * @param params.mname Is the unique EMS EdgeModule identifier
   * @param params.name Is the unique EMS EdgeModule Resource name
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async unregisterModuleResource(params: IUnregisterModuleResourceParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('unregisterModuleResource', params, 'mname');
    this.ensureParamIsSet('unregisterModuleResource', params, 'name');

    // Create URL to call
    const url = `${this.basePath}/edgemodules/{mname}/resources/{name}`
      .replace(`{${'mname'}}`, encodeURIComponent(`${params['mname']}`))
      .replace(`{${'name'}}`, encodeURIComponent(`${params['name']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Module
   *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
   * @param params.mname Is the unique EMS EdgeModule identifier
   * @param params.body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async updateModule(params: IUpdateModuleParams): Promise<EdgeModuleUpdatedObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateModule', params, 'mname');
    this.ensureParamIsSet('updateModule', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/edgemodules/{mname}`
      .replace(`{${'mname'}}`, encodeURIComponent(`${params['mname']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Module Resource
   *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
   * @param params.mname Is the unique EMS EdgeModule identifier
   * @param params.name Is the unique EMS EdgeModule Resource name
   * @param params.body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async updateModuleResource(params: IUpdateModuleResourceParams): Promise<EdgeModuleResourceUpdatedObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateModuleResource', params, 'mname');
    this.ensureParamIsSet('updateModuleResource', params, 'name');
    this.ensureParamIsSet('updateModuleResource', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/edgemodules/{mname}/resources/{name}`
      .replace(`{${'mname'}}`, encodeURIComponent(`${params['mname']}`))
      .replace(`{${'name'}}`, encodeURIComponent(`${params['name']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

