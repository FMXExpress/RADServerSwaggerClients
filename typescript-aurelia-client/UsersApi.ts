/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GroupName,
  FieldObject,
  UserTokenObject,
  UpdateObject,
  UserObject,
  UpdatedObject,
  UseridObject,
  UserCredentialsObject,
  UserSignUpResponseObject,
} from './models';

/**
 * addUser - parameters interface
 */
export interface IAddUserParams {
  body: UserCredentialsObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * deleteUser - parameters interface
 */
export interface IDeleteUserParams {
  id: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getUser - parameters interface
 */
export interface IGetUserParams {
  id: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getUserFields - parameters interface
 */
export interface IGetUserFieldsParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getUserGroups - parameters interface
 */
export interface IGetUserGroupsParams {
  id: string;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * getUsers - parameters interface
 */
export interface IGetUsersParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
  skip?: number;
  limit?: number;
  order?: number;
  where?: string;
}

/**
 * loginUser - parameters interface
 */
export interface ILoginUserParams {
  body: UserCredentialsObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * logoutUser - parameters interface
 */
export interface ILogoutUserParams {
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * signupUser - parameters interface
 */
export interface ISignupUserParams {
  body: UserCredentialsObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * updateUser - parameters interface
 */
export interface IUpdateUserParams {
  id: string;
  body: UpdateObject;
  xEmbarcaderoApplicationId?: string;
  xEmbarcaderoAppSecret?: string;
  xEmbarcaderoMasterSecret?: string;
}

/**
 * UsersApi - API class
 */
@autoinject()
export class UsersApi extends Api {

  /**
   * Creates a new UsersApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Add User
   *  |      Used to add a new &#x60;User&#x60; object to the EMS database.
   * @param params.body Object to add a new EMS User in the EMS Server
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async addUser(params: IAddUserParams): Promise<UseridObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('addUser', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/users`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete User
   *  |      Used to delete a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
   * @param params.id A user ID
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async deleteUser(params: IDeleteUserParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteUser', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/users/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get User
   *  |      Used to retrieve all data from a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
   * @param params.id A user ID
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getUser(params: IGetUserParams): Promise<UserObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('getUser', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/users/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Fields
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Users (including the custom fields).
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getUserFields(params: IGetUserFieldsParams): Promise<Array<FieldObject>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/users/fields`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get User Groups
   *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
   * @param params.id A user ID
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async getUserGroups(params: IGetUserGroupsParams): Promise<Array<GroupName>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getUserGroups', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/users/{id}/groups`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Users
   *  |      Used to retrieve all data from &#x60;Users&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   * @param params.skip users skipped
   * @param params.limit maximum number of results to return
   * @param params.order order ascending or descending (asc, desc)
   * @param params.where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
   */
  async getUsers(params: IGetUsersParams): Promise<Array<UserObject>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/users`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'skip': params['skip'],
        'limit': params['limit'],
        'order': params['order'],
        'where': params['where'],
      })
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Log In
   *  |      Logs in to the EMS Server with a specific EMS User.
   * @param params.body A user object
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async loginUser(params: ILoginUserParams): Promise<UserTokenObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('loginUser', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/users/login`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * sPostLogoutSummaryTitle
   * sPostLogoutSummaryDesc
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async logoutUser(params: ILogoutUserParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/users/logout`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Sign Up  User
   *  |      Signs up to the EMS Server with an appropriate EMS User.
   * @param params.body Object to sign up a new EMS User in the EMS Server
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async signupUser(params: ISignupUserParams): Promise<UserSignUpResponseObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('signupUser', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/users/signup`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update User
   *  |      Used to update a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
   * @param params.id A user ID
   * @param params.body Add any fieldName
   * @param params.xEmbarcaderoApplicationId 
   * @param params.xEmbarcaderoAppSecret 
   * @param params.xEmbarcaderoMasterSecret 
   */
  async updateUser(params: IUpdateUserParams): Promise<UpdatedObject> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateUser', params, 'id');
    this.ensureParamIsSet('updateUser', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/users/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('X-Embarcadero-Application-Id', params['xEmbarcaderoApplicationId'])      .withHeader('X-Embarcadero-App-Secret', params['xEmbarcaderoAppSecret'])      .withHeader('X-Embarcadero-Master-Secret', params['xEmbarcaderoMasterSecret'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

