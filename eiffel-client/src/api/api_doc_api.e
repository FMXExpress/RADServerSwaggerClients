note
 description:"[
		EMS API Documentation
 		Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
  		OpenAPI spec version: 0.0.0
 	    

  	NOTE: This class is auto generated by the swagger code generator program.

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel swagger codegen", "src=https://github.com/swagger-api/swagger-codegen.git", "protocol=uri"

class
	APIDOC_API

inherit

    API_I


feature -- API Access


	a_pi (x__embarcadero__application__id: STRING_32; x__embarcadero__app__secret: STRING_32; x__embarcadero__master__secret: STRING_32)
			-- Get API EndPoints
			--  |      Used to retrieve all the API EndPoints.
			-- 
			-- argument: x__embarcadero__application__id  (optional)
			-- 
			-- argument: x__embarcadero__app__secret  (optional)
			-- 
			-- argument: x__embarcadero__master__secret  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api"

			if attached x__embarcadero__application__id as l_x__embarcadero__application__id then
				l_request.add_header(l_x__embarcadero__application__id.out,"X-Embarcadero-Application-Id");
			end
			if attached x__embarcadero__app__secret as l_x__embarcadero__app__secret then
				l_request.add_header(l_x__embarcadero__app__secret.out,"X-Embarcadero-App-Secret");
			end
			if attached x__embarcadero__master__secret as l_x__embarcadero__master__secret then
				l_request.add_header(l_x__embarcadero__master__secret.out,"X-Embarcadero-Master-Secret");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	ap_ij_so_nformat (x__embarcadero__application__id: STRING_32; x__embarcadero__app__secret: STRING_32; x__embarcadero__master__secret: STRING_32)
			-- Get JSON
			-- Get API in JSON format
			-- 
			-- argument: x__embarcadero__application__id  (optional)
			-- 
			-- argument: x__embarcadero__app__secret  (optional)
			-- 
			-- argument: x__embarcadero__master__secret  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/apidoc.json"

			if attached x__embarcadero__application__id as l_x__embarcadero__application__id then
				l_request.add_header(l_x__embarcadero__application__id.out,"X-Embarcadero-Application-Id");
			end
			if attached x__embarcadero__app__secret as l_x__embarcadero__app__secret then
				l_request.add_header(l_x__embarcadero__app__secret.out,"X-Embarcadero-App-Secret");
			end
			if attached x__embarcadero__master__secret as l_x__embarcadero__master__secret then
				l_request.add_header(l_x__embarcadero__master__secret.out,"X-Embarcadero-Master-Secret");
			end

			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	ap_iy_am_lformat (x__embarcadero__application__id: STRING_32; x__embarcadero__app__secret: STRING_32; x__embarcadero__master__secret: STRING_32)
			-- Get YAML
			-- Get API in YAML format
			-- 
			-- argument: x__embarcadero__application__id  (optional)
			-- 
			-- argument: x__embarcadero__app__secret  (optional)
			-- 
			-- argument: x__embarcadero__master__secret  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/apidoc.yaml"

			if attached x__embarcadero__application__id as l_x__embarcadero__application__id then
				l_request.add_header(l_x__embarcadero__application__id.out,"X-Embarcadero-Application-Id");
			end
			if attached x__embarcadero__app__secret as l_x__embarcadero__app__secret then
				l_request.add_header(l_x__embarcadero__app__secret.out,"X-Embarcadero-App-Secret");
			end
			if attached x__embarcadero__master__secret as l_x__embarcadero__master__secret then
				l_request.add_header(l_x__embarcadero__master__secret.out,"X-Embarcadero-Master-Secret");
			end

			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	ap_iy_am_lformat__end_point (item: STRING_32; x__embarcadero__application__id: STRING_32; x__embarcadero__app__secret: STRING_32; x__embarcadero__master__secret: STRING_32)
			-- Get API EndPoint
			--  |      Used to retrieve an EndPoint for the API EndPoints.
			-- 
			-- argument: item Path Segment to an EndPoint (required)
			-- 
			-- argument: x__embarcadero__application__id  (optional)
			-- 
			-- argument: x__embarcadero__app__secret  (optional)
			-- 
			-- argument: x__embarcadero__master__secret  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/{item}/apidoc.yaml"
			l_path.replace_substring_all ("{"+"item"+"}", api_client.url_encode (item.out))

			if attached x__embarcadero__application__id as l_x__embarcadero__application__id then
				l_request.add_header(l_x__embarcadero__application__id.out,"X-Embarcadero-Application-Id");
			end
			if attached x__embarcadero__app__secret as l_x__embarcadero__app__secret then
				l_request.add_header(l_x__embarcadero__app__secret.out,"X-Embarcadero-App-Secret");
			end
			if attached x__embarcadero__master__secret as l_x__embarcadero__master__secret then
				l_request.add_header(l_x__embarcadero__master__secret.out,"X-Embarcadero-Master-Secret");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	


end
