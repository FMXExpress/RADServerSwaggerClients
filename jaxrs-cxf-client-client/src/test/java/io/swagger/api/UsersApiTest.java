/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.FieldObject;
import io.swagger.model.UpdateObject;
import io.swagger.model.UpdatedObject;
import io.swagger.model.UserCredentialsObject;
import io.swagger.model.UserObject;
import io.swagger.model.UserSignUpResponseObject;
import io.swagger.model.UserTokenObject;
import io.swagger.model.UseridObject;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * EMS API Documentation
 *
 * <p>Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * API tests for UsersApi 
 */
public class UsersApiTest {


    private UsersApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8080", UsersApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Add User
     *
     *  |      Used to add a new &#x60;User&#x60; object to the EMS database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTest() {
        UserCredentialsObject body = null;
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //UseridObject response = api.addUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Delete User
     *
     *  |      Used to delete a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() {
        String id = null;
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //api.deleteUser(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Get User
     *
     *  |      Used to retrieve all data from a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() {
        String id = null;
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //UserObject response = api.getUser(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get Fields
     *
     *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Users (including the custom fields).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserFieldsTest() {
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //List<FieldObject> response = api.getUserFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get User Groups
     *
     *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserGroupsTest() {
        String id = null;
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //List<String> response = api.getUserGroups(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get Users
     *
     *  |      Used to retrieve all data from &#x60;Users&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() {
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        BigDecimal skip = null;
        BigDecimal limit = null;
        BigDecimal order = null;
        String where = null;
        //List<UserObject> response = api.getUsers(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Log In
     *
     *  |      Logs in to the EMS Server with a specific EMS User.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginUserTest() {
        UserCredentialsObject body = null;
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //UserTokenObject response = api.loginUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * sPostLogoutSummaryTitle
     *
     * sPostLogoutSummaryDesc
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutUserTest() {
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //api.logoutUser(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Sign Up  User
     *
     *  |      Signs up to the EMS Server with an appropriate EMS User.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signupUserTest() {
        UserCredentialsObject body = null;
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //UserSignUpResponseObject response = api.signupUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Update User
     *
     *  |      Used to update a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() {
        String id = null;
        UpdateObject body = null;
        String xEmbarcaderoApplicationId = null;
        String xEmbarcaderoAppSecret = null;
        String xEmbarcaderoMasterSecret = null;
        //UpdatedObject response = api.updateUser(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
