# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule EMSAPIDocumentation.Api.EdgeModulesInvokers do
  @moduledoc """
  API calls for all endpoints tagged `EdgeModulesInvokers`.
  """

  alias EMSAPIDocumentation.Connection
  import EMSAPIDocumentation.RequestBuilder


  @doc """
  Invoke Resource Delete Method
  Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_resource_endpoint(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_resource_endpoint(connection, mname, rname, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/edgemodules/#{mname}/#{rname}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource/* Delete Method
  Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - wildcard (String.t): Is the Wild card part of the URL
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_resource_endpoint_item(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_resource_endpoint_item(connection, mname, rname, wildcard, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/edgemodules/#{mname}/#{rname}/#{wildcard}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource Get Method
  Used to invoke the GET method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_resource_endpoint(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_resource_endpoint(connection, mname, rname, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules/#{mname}/#{rname}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource/* Get Method
  Used to invoke the GET method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - wildcard (String.t): Is the Wild card part of the URL
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_resource_endpoint_item(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_resource_endpoint_item(connection, mname, rname, wildcard, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules/#{mname}/#{rname}/#{wildcard}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource Patch Method
  Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - body (Object): Body Object
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec patch_resource_endpoint(Tesla.Env.client, String.t, String.t, EMSAPIDocumentation.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def patch_resource_endpoint(connection, mname, rname, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/edgemodules/#{mname}/#{rname}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource/* Patch Method
  Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - wildcard (String.t): Is the Wild card part of the URL
  - body (Object): Body Object
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec patch_resource_endpoint_item(Tesla.Env.client, String.t, String.t, String.t, EMSAPIDocumentation.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def patch_resource_endpoint_item(connection, mname, rname, wildcard, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/edgemodules/#{mname}/#{rname}/#{wildcard}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource Post Method
  Used to invoke the POST method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - body (Object): Body Object
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec post_resource_endpoint(Tesla.Env.client, String.t, String.t, EMSAPIDocumentation.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_resource_endpoint(connection, mname, rname, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:post)
    |> url("/edgemodules/#{mname}/#{rname}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource/* Post Method
  Used to invoke the POST method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - wildcard (String.t): Is the Wild card part of the URL
  - body (Object): Body Object
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec post_resource_endpoint_item(Tesla.Env.client, String.t, String.t, String.t, EMSAPIDocumentation.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_resource_endpoint_item(connection, mname, rname, wildcard, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:post)
    |> url("/edgemodules/#{mname}/#{rname}/#{wildcard}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource Put Method
  Used to invoke the PUT method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - body (Object): Body Object
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec put_resource_endpoint(Tesla.Env.client, String.t, String.t, EMSAPIDocumentation.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def put_resource_endpoint(connection, mname, rname, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:put)
    |> url("/edgemodules/#{mname}/#{rname}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Invoke Resource/* Put Method
  Used to invoke the PUT method of the resource from an existing EMS EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the EMS EdgeModule name
  - rname (String.t): Is the unique EMS EdgeModule Resource name
  - wildcard (String.t): Is the Wild card part of the URL
  - body (Object): Body Object
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec put_resource_endpoint_item(Tesla.Env.client, String.t, String.t, String.t, EMSAPIDocumentation.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def put_resource_endpoint_item(connection, mname, rname, wildcard, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:put)
    |> url("/edgemodules/#{mname}/#{rname}/#{wildcard}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
