# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule EMSAPIDocumentation.Api.EdgeModules do
  @moduledoc """
  API calls for all endpoints tagged `EdgeModules`.
  """

  alias EMSAPIDocumentation.Connection
  import EMSAPIDocumentation.RequestBuilder


  @doc """
  Get Module
   |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the unique EMS EdgeModule identifier
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %EMSAPIDocumentation.Model.EdgeModuleObject{}} on success
  {:error, info} on failure
  """
  @spec get_module(Tesla.Env.client, String.t, keyword()) :: {:ok, EMSAPIDocumentation.Model.EdgeModuleObject.t} | {:error, Tesla.Env.t}
  def get_module(connection, mname, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules/#{mname}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EMSAPIDocumentation.Model.EdgeModuleObject{})
  end

  @doc """
  Get EdgeModule Resource
   |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the unique EMS EdgeModule identifier
  - name (String.t): Is the unique EMS EdgeModule Resource name
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %EMSAPIDocumentation.Model.EdgeModuleResourceObject{}} on success
  {:error, info} on failure
  """
  @spec get_module_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, EMSAPIDocumentation.Model.EdgeModuleResourceObject.t} | {:error, Tesla.Env.t}
  def get_module_resource(connection, mname, name, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules/#{mname}/resources/#{name}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EMSAPIDocumentation.Model.EdgeModuleResourceObject{})
  end

  @doc """
  Get EdgeModule Resources
   |      Used to retrieve all data from the resources of an EdgeModule.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the unique EMS EdgeModule identifier
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, [%EdgeModuleResourceObject{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_module_resources(Tesla.Env.client, String.t, keyword()) :: {:ok, list(EMSAPIDocumentation.Model.EdgeModuleResourceObject.t)} | {:error, Tesla.Env.t}
  def get_module_resources(connection, mname, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules/#{mname}/resources")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%EMSAPIDocumentation.Model.EdgeModuleResourceObject{}])
  end

  @doc """
  Get Module
   |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, [%EdgeModuleObject{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_modules(Tesla.Env.client, keyword()) :: {:ok, list(EMSAPIDocumentation.Model.EdgeModuleObject.t)} | {:error, Tesla.Env.t}
  def get_modules(connection, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%EMSAPIDocumentation.Model.EdgeModuleObject{}])
  end

  @doc """
  Get Fields
   |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %EMSAPIDocumentation.Model.FieldsEdgeModuleObject{}} on success
  {:error, info} on failure
  """
  @spec get_modules_fields(Tesla.Env.client, keyword()) :: {:ok, EMSAPIDocumentation.Model.FieldsEdgeModuleObject.t} | {:error, Tesla.Env.t}
  def get_modules_fields(connection, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules/fields")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EMSAPIDocumentation.Model.FieldsEdgeModuleObject{})
  end

  @doc """
  Get EdgeModules Resources
   |      Used to retrieve all data from the resources of all EdgeModules.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, [%EdgeModuleResourceObject{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_resources(Tesla.Env.client, keyword()) :: {:ok, list(EMSAPIDocumentation.Model.EdgeModuleResourceObject.t)} | {:error, Tesla.Env.t}
  def get_resources(connection, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules/resources")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%EMSAPIDocumentation.Model.EdgeModuleResourceObject{}])
  end

  @doc """
  Get Resource Fields
   |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %EMSAPIDocumentation.Model.FieldsEdgeModuleObject{}} on success
  {:error, info} on failure
  """
  @spec get_resources_fields(Tesla.Env.client, keyword()) :: {:ok, EMSAPIDocumentation.Model.FieldsEdgeModuleObject.t} | {:error, Tesla.Env.t}
  def get_resources_fields(connection, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:get)
    |> url("/edgemodules/resources/fields")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EMSAPIDocumentation.Model.FieldsEdgeModuleObject{})
  end

  @doc """
  Add Module
   |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - body (EdgeModuleAddObject): EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %EMSAPIDocumentation.Model.EdgeModuleAddedObject{}} on success
  {:error, info} on failure
  """
  @spec register_module(Tesla.Env.client, EMSAPIDocumentation.Model.EdgeModuleAddObject.t, keyword()) :: {:ok, EMSAPIDocumentation.Model.EdgeModuleAddedObject.t} | {:error, Tesla.Env.t}
  def register_module(connection, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:post)
    |> url("/edgemodules")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EMSAPIDocumentation.Model.EdgeModuleAddedObject{})
  end

  @doc """
  Add Module Resource
   |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the unique EMS EdgeModule identifier
  - body (EdgeModuleResourceAddObject): EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %EMSAPIDocumentation.Model.EdgeModuleResourceAddedObject{}} on success
  {:error, info} on failure
  """
  @spec register_module_resource(Tesla.Env.client, String.t, EMSAPIDocumentation.Model.EdgeModuleResourceAddObject.t, keyword()) :: {:ok, EMSAPIDocumentation.Model.EdgeModuleResourceAddedObject.t} | {:error, Tesla.Env.t}
  def register_module_resource(connection, mname, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:post)
    |> url("/edgemodules/#{mname}/resources")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EMSAPIDocumentation.Model.EdgeModuleResourceAddedObject{})
  end

  @doc """
  Delete Module
   |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the unique EMS EdgeModule identifier
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec unregister_module(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def unregister_module(connection, mname, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/edgemodules/#{mname}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete Module Resource
   |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the unique EMS EdgeModule identifier
  - name (String.t): Is the unique EMS EdgeModule Resource name
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec unregister_module_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def unregister_module_resource(connection, mname, name, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/edgemodules/#{mname}/resources/#{name}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Update Module
   |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the unique EMS EdgeModule identifier
  - body (EdgeModuleUpdateObject): EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %EMSAPIDocumentation.Model.EdgeModuleUpdatedObject{}} on success
  {:error, info} on failure
  """
  @spec update_module(Tesla.Env.client, String.t, EMSAPIDocumentation.Model.EdgeModuleUpdateObject.t, keyword()) :: {:ok, EMSAPIDocumentation.Model.EdgeModuleUpdatedObject.t} | {:error, Tesla.Env.t}
  def update_module(connection, mname, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:put)
    |> url("/edgemodules/#{mname}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EMSAPIDocumentation.Model.EdgeModuleUpdatedObject{})
  end

  @doc """
  Update Module Resource
   |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.

  ## Parameters

  - connection (EMSAPIDocumentation.Connection): Connection to server
  - mname (String.t): Is the unique EMS EdgeModule identifier
  - name (String.t): Is the unique EMS EdgeModule Resource name
  - body (EdgeModuleResourceUpdateObject): EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
  - opts (KeywordList): [optional] Optional parameters
    - :x_embarcadero_application_id (String.t): 
    - :x_embarcadero_app_secret (String.t): 
    - :x_embarcadero_master_secret (String.t): 

  ## Returns

  {:ok, %EMSAPIDocumentation.Model.EdgeModuleResourceUpdatedObject{}} on success
  {:error, info} on failure
  """
  @spec update_module_resource(Tesla.Env.client, String.t, String.t, EMSAPIDocumentation.Model.EdgeModuleResourceUpdateObject.t, keyword()) :: {:ok, EMSAPIDocumentation.Model.EdgeModuleResourceUpdatedObject.t} | {:error, Tesla.Env.t}
  def update_module_resource(connection, mname, name, body, opts \\ []) do
    optional_params = %{
      :"X-Embarcadero-Application-Id" => :headers,
      :"X-Embarcadero-App-Secret" => :headers,
      :"X-Embarcadero-Master-Secret" => :headers
    }
    %{}
    |> method(:put)
    |> url("/edgemodules/#{mname}/resources/#{name}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EMSAPIDocumentation.Model.EdgeModuleResourceUpdatedObject{})
  end
end
