/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ChannelName } from '../model/channelName';
import { FieldInstallationObject } from '../model/fieldInstallationObject';
import { InstallationAddObject } from '../model/installationAddObject';
import { InstallationAddedObject } from '../model/installationAddedObject';
import { InstallationObject } from '../model/installationObject';
import { UpdateInstallationObject } from '../model/updateInstallationObject';
import { UpdatedInstallationObject } from '../model/updatedInstallationObject';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class InstallationsService {
    private basePath: string = 'http://localhost:8080';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Add Installation
     *  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<InstallationAddedObject>;
    public addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<InstallationAddedObject>>;
    public addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling addInstallation.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<InstallationAddedObject>> = this.httpClient.post(`${this.basePath}/installations`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <InstallationAddedObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Delete Installation
     *  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @param id A Installation ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling deleteInstallation.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/installations/${encodeURIComponent(String(id))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Installation Channels
     *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<Array<ChannelName>>;
    public getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<ChannelName>>>;
    public getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<ChannelName>>> = this.httpClient.get(`${this.basePath}/installations/channels`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<ChannelName>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Installation
     *  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @param id A Installation ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<InstallationObject>;
    public getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<InstallationObject>>;
    public getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling getInstallation.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<InstallationObject>> = this.httpClient.get(`${this.basePath}/installations/${encodeURIComponent(String(id))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <InstallationObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Fields
     *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<Array<FieldInstallationObject>>;
    public getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<FieldInstallationObject>>>;
    public getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<FieldInstallationObject>>> = this.httpClient.get(`${this.basePath}/installations/fields`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<FieldInstallationObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Installations
     *  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param skip users skipped
     * @param limit maximum number of results to return
     * @param order order ascending or descending (asc, desc)
     * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     
     */
    public getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'body', headers?: Headers): Observable<Array<InstallationObject>>;
    public getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<InstallationObject>>>;
    public getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (skip !== undefined) {
            queryParameters.push("skip="+encodeURIComponent(String(skip)));
        }
        if (limit !== undefined) {
            queryParameters.push("limit="+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push("order="+encodeURIComponent(String(order)));
        }
        if (where !== undefined) {
            queryParameters.push("where="+encodeURIComponent(String(where)));
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<InstallationObject>>> = this.httpClient.get(`${this.basePath}/installations?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<InstallationObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Update Installation
     *  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @param id A Installation ID
     * @param body Installation fields to update
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<UpdatedInstallationObject>;
    public updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdatedInstallationObject>>;
    public updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling updateInstallation.');
        }

        if (!body){
            throw new Error('Required parameter body was null or undefined when calling updateInstallation.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdatedInstallationObject>> = this.httpClient.put(`${this.basePath}/installations/${encodeURIComponent(String(id))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <UpdatedInstallationObject>(httpResponse.response));
        }
        return response;
    }

}
