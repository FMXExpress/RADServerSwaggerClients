/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { FieldObject } from '../model/fieldObject';
import { GroupName } from '../model/groupName';
import { UpdateObject } from '../model/updateObject';
import { UpdatedObject } from '../model/updatedObject';
import { UserCredentialsObject } from '../model/userCredentialsObject';
import { UserObject } from '../model/userObject';
import { UserSignUpResponseObject } from '../model/userSignUpResponseObject';
import { UserTokenObject } from '../model/userTokenObject';
import { UseridObject } from '../model/useridObject';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UsersService {
    private basePath: string = 'http://localhost:8080';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Add User
     *  |      Used to add a new &#x60;User&#x60; object to the EMS database.
     * @param body Object to add a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<UseridObject>;
    public addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UseridObject>>;
    public addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling addUser.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UseridObject>> = this.httpClient.post(`${this.basePath}/users`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <UseridObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Delete User
     *  |      Used to delete a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @param id A user ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public deleteUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public deleteUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public deleteUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling deleteUser.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/users/${encodeURIComponent(String(id))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get User
     *  |      Used to retrieve all data from a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @param id A user ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<UserObject>;
    public getUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserObject>>;
    public getUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling getUser.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<UserObject>> = this.httpClient.get(`${this.basePath}/users/${encodeURIComponent(String(id))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <UserObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Fields
     *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Users (including the custom fields).
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getUserFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<Array<FieldObject>>;
    public getUserFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<FieldObject>>>;
    public getUserFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<FieldObject>>> = this.httpClient.get(`${this.basePath}/users/fields`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<FieldObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get User Groups
     *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @param id A user ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getUserGroups(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<Array<GroupName>>;
    public getUserGroups(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<GroupName>>>;
    public getUserGroups(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling getUserGroups.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<GroupName>>> = this.httpClient.get(`${this.basePath}/users/${encodeURIComponent(String(id))}/groups`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<GroupName>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Users
     *  |      Used to retrieve all data from &#x60;Users&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param skip users skipped
     * @param limit maximum number of results to return
     * @param order order ascending or descending (asc, desc)
     * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     
     */
    public getUsers(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'body', headers?: Headers): Observable<Array<UserObject>>;
    public getUsers(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<UserObject>>>;
    public getUsers(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (skip !== undefined) {
            queryParameters.push("skip="+encodeURIComponent(String(skip)));
        }
        if (limit !== undefined) {
            queryParameters.push("limit="+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push("order="+encodeURIComponent(String(order)));
        }
        if (where !== undefined) {
            queryParameters.push("where="+encodeURIComponent(String(where)));
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<UserObject>>> = this.httpClient.get(`${this.basePath}/users?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<UserObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Log In
     *  |      Logs in to the EMS Server with a specific EMS User.
     * @param body A user object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<UserTokenObject>;
    public loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserTokenObject>>;
    public loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling loginUser.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UserTokenObject>> = this.httpClient.post(`${this.basePath}/users/login`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <UserTokenObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * sPostLogoutSummaryTitle
     * sPostLogoutSummaryDesc
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public logoutUser(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logoutUser(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logoutUser(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/users/logout`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Sign Up  User
     *  |      Signs up to the EMS Server with an appropriate EMS User.
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<UserSignUpResponseObject>;
    public signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserSignUpResponseObject>>;
    public signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling signupUser.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UserSignUpResponseObject>> = this.httpClient.post(`${this.basePath}/users/signup`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <UserSignUpResponseObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Update User
     *  |      Used to update a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @param id A user ID
     * @param body Add any fieldName
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public updateUser(id: string, body: UpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<UpdatedObject>;
    public updateUser(id: string, body: UpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdatedObject>>;
    public updateUser(id: string, body: UpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling updateUser.');
        }

        if (!body){
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdatedObject>> = this.httpClient.put(`${this.basePath}/users/${encodeURIComponent(String(id))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <UpdatedObject>(httpResponse.response));
        }
        return response;
    }

}
