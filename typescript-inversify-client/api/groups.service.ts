/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { FieldGroupObject } from '../model/fieldGroupObject';
import { GroupAddObject } from '../model/groupAddObject';
import { GroupObject } from '../model/groupObject';
import { UpdateGroupObject } from '../model/updateGroupObject';
import { UpdatedGroupObject } from '../model/updatedGroupObject';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class GroupsService {
    private basePath: string = 'http://localhost:8080';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Add Group
     *  |      Used to add a new &#x60;Group&#x60; object to the EMS database.
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public addGroup(body: GroupAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public addGroup(body: GroupAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public addGroup(body: GroupAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling addGroup.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/groups`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Delete Group
     *  |      Used to delete a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
     * @param item A group name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public deleteGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public deleteGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public deleteGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!item){
            throw new Error('Required parameter item was null or undefined when calling deleteGroup.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/groups/${encodeURIComponent(String(item))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Group
     *  |      Used to retrieve all data from a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
     * @param item A group name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<GroupObject>;
    public getGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<GroupObject>>;
    public getGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!item){
            throw new Error('Required parameter item was null or undefined when calling getGroup.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GroupObject>> = this.httpClient.get(`${this.basePath}/groups/${encodeURIComponent(String(item))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <GroupObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Fields
     *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Group (including the custom fields).
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getGroupFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<Array<FieldGroupObject>>;
    public getGroupFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<FieldGroupObject>>>;
    public getGroupFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<FieldGroupObject>>> = this.httpClient.get(`${this.basePath}/groups/fields`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<FieldGroupObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Groups
     *  |      Used to retrieve all data from &#x60;Groups&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param skip users skipped
     * @param limit maximum number of results to return
     * @param order order ascending or descending (asc, desc)
     * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     
     */
    public getGroups(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'body', headers?: Headers): Observable<Array<GroupObject>>;
    public getGroups(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<GroupObject>>>;
    public getGroups(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (skip !== undefined) {
            queryParameters.push("skip="+encodeURIComponent(String(skip)));
        }
        if (limit !== undefined) {
            queryParameters.push("limit="+encodeURIComponent(String(limit)));
        }
        if (order !== undefined) {
            queryParameters.push("order="+encodeURIComponent(String(order)));
        }
        if (where !== undefined) {
            queryParameters.push("where="+encodeURIComponent(String(where)));
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<GroupObject>>> = this.httpClient.get(`${this.basePath}/groups?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<GroupObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Update Group
     *  |      Used to update a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
     * @param item A group name
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public updateGroup(item: string, body: UpdateGroupObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<UpdatedGroupObject>;
    public updateGroup(item: string, body: UpdateGroupObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdatedGroupObject>>;
    public updateGroup(item: string, body: UpdateGroupObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!item){
            throw new Error('Required parameter item was null or undefined when calling updateGroup.');
        }

        if (!body){
            throw new Error('Required parameter body was null or undefined when calling updateGroup.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdatedGroupObject>> = this.httpClient.put(`${this.basePath}/groups/${encodeURIComponent(String(item))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <UpdatedGroupObject>(httpResponse.response));
        }
        return response;
    }

}
