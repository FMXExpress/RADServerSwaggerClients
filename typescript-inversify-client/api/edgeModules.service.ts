/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { EdgeModuleAddObject } from '../model/edgeModuleAddObject';
import { EdgeModuleAddedObject } from '../model/edgeModuleAddedObject';
import { EdgeModuleObject } from '../model/edgeModuleObject';
import { EdgeModuleResourceAddObject } from '../model/edgeModuleResourceAddObject';
import { EdgeModuleResourceAddedObject } from '../model/edgeModuleResourceAddedObject';
import { EdgeModuleResourceObject } from '../model/edgeModuleResourceObject';
import { EdgeModuleResourceUpdateObject } from '../model/edgeModuleResourceUpdateObject';
import { EdgeModuleResourceUpdatedObject } from '../model/edgeModuleResourceUpdatedObject';
import { EdgeModuleUpdateObject } from '../model/edgeModuleUpdateObject';
import { EdgeModuleUpdatedObject } from '../model/edgeModuleUpdatedObject';
import { FieldsEdgeModuleObject } from '../model/fieldsEdgeModuleObject';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class EdgeModulesService {
    private basePath: string = 'http://localhost:8080';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Get Module
     *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<EdgeModuleObject>;
    public getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<EdgeModuleObject>>;
    public getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!mname){
            throw new Error('Required parameter mname was null or undefined when calling getModule.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<EdgeModuleObject>> = this.httpClient.get(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <EdgeModuleObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get EdgeModule Resource
     *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<EdgeModuleResourceObject>;
    public getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<EdgeModuleResourceObject>>;
    public getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!mname){
            throw new Error('Required parameter mname was null or undefined when calling getModuleResource.');
        }

        if (!name){
            throw new Error('Required parameter name was null or undefined when calling getModuleResource.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<EdgeModuleResourceObject>> = this.httpClient.get(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources/${encodeURIComponent(String(name))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <EdgeModuleResourceObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get EdgeModule Resources
     *  |      Used to retrieve all data from the resources of an EdgeModule.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<Array<EdgeModuleResourceObject>>;
    public getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<EdgeModuleResourceObject>>>;
    public getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!mname){
            throw new Error('Required parameter mname was null or undefined when calling getModuleResources.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<EdgeModuleResourceObject>>> = this.httpClient.get(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<EdgeModuleResourceObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Module
     *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<Array<EdgeModuleObject>>;
    public getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<EdgeModuleObject>>>;
    public getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<EdgeModuleObject>>> = this.httpClient.get(`${this.basePath}/edgemodules`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<EdgeModuleObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Fields
     *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<FieldsEdgeModuleObject>;
    public getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<FieldsEdgeModuleObject>>;
    public getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<FieldsEdgeModuleObject>> = this.httpClient.get(`${this.basePath}/edgemodules/fields`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <FieldsEdgeModuleObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get EdgeModules Resources
     *  |      Used to retrieve all data from the resources of all EdgeModules.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<Array<EdgeModuleResourceObject>>;
    public getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<EdgeModuleResourceObject>>>;
    public getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<EdgeModuleResourceObject>>> = this.httpClient.get(`${this.basePath}/edgemodules/resources`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<EdgeModuleResourceObject>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Get Resource Fields
     *  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<FieldsEdgeModuleObject>;
    public getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<FieldsEdgeModuleObject>>;
    public getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<FieldsEdgeModuleObject>> = this.httpClient.get(`${this.basePath}/edgemodules/resources/fields`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <FieldsEdgeModuleObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Add Module
     *  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
     * @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<EdgeModuleAddedObject>;
    public registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<EdgeModuleAddedObject>>;
    public registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling registerModule.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EdgeModuleAddedObject>> = this.httpClient.post(`${this.basePath}/edgemodules`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <EdgeModuleAddedObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Add Module Resource
     *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<EdgeModuleResourceAddedObject>;
    public registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<EdgeModuleResourceAddedObject>>;
    public registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!mname){
            throw new Error('Required parameter mname was null or undefined when calling registerModuleResource.');
        }

        if (!body){
            throw new Error('Required parameter body was null or undefined when calling registerModuleResource.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EdgeModuleResourceAddedObject>> = this.httpClient.post(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <EdgeModuleResourceAddedObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Delete Module
     *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!mname){
            throw new Error('Required parameter mname was null or undefined when calling unregisterModule.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Delete Module Resource
     *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!mname){
            throw new Error('Required parameter mname was null or undefined when calling unregisterModuleResource.');
        }

        if (!name){
            throw new Error('Required parameter name was null or undefined when calling unregisterModuleResource.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources/${encodeURIComponent(String(name))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Update Module
     *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<EdgeModuleUpdatedObject>;
    public updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<EdgeModuleUpdatedObject>>;
    public updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!mname){
            throw new Error('Required parameter mname was null or undefined when calling updateModule.');
        }

        if (!body){
            throw new Error('Required parameter body was null or undefined when calling updateModule.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EdgeModuleUpdatedObject>> = this.httpClient.put(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <EdgeModuleUpdatedObject>(httpResponse.response));
        }
        return response;
    }


    /**
     * Update Module Resource
     *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     
     */
    public updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', headers?: Headers): Observable<EdgeModuleResourceUpdatedObject>;
    public updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<EdgeModuleResourceUpdatedObject>>;
    public updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!mname){
            throw new Error('Required parameter mname was null or undefined when calling updateModuleResource.');
        }

        if (!name){
            throw new Error('Required parameter name was null or undefined when calling updateModuleResource.');
        }

        if (!body){
            throw new Error('Required parameter body was null or undefined when calling updateModuleResource.');
        }

        if (xEmbarcaderoApplicationId) {
            headers['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
        }

        if (xEmbarcaderoAppSecret) {
            headers['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
        }

        if (xEmbarcaderoMasterSecret) {
            headers['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<EdgeModuleResourceUpdatedObject>> = this.httpClient.put(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources/${encodeURIComponent(String(name))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <EdgeModuleResourceUpdatedObject>(httpResponse.response));
        }
        return response;
    }

}
