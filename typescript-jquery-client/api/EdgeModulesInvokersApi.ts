/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class EdgeModulesInvokersApi {
    protected basePath = 'http://localhost:8080';
    public defaultHeaders: Array<string> = [];
    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = null;
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        if (defaultExtraJQueryAjaxSettings) {
            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;
        }
    }

    private extendObj<T1, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Delete Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling deleteResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling deleteResourceEndpoint.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'DELETE',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Delete Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname))).replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling deleteResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling deleteResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling deleteResourceEndpointItem.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'DELETE',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Get Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling getResourceEndpoint.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Get Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname))).replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling getResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling getResourceEndpointItem.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Patch Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling patchResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling patchResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchResourceEndpoint.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'PATCH',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(body);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Patch Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname))).replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchResourceEndpointItem.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'PATCH',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(body);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Post Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling postResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling postResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postResourceEndpoint.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(body);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Post Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname))).replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postResourceEndpointItem.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(body);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Put Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling putResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling putResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putResourceEndpoint.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'PUT',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(body);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Put Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body?: any;  }> {
        let localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'.replace('{' + 'mname' + '}', encodeURIComponent(String(mname))).replace('{' + 'rname' + '}', encodeURIComponent(String(rname))).replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putResourceEndpointItem.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);

        headerParams['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);

        headerParams['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'PUT',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(body);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

}
