/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ChannelName
 */
export interface ChannelName {
}

/**
 * 
 * @export
 * @interface EdgeModuleAddObject
 */
export interface EdgeModuleAddObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof EdgeModuleAddObject
     */
    modulename: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleAddObject
     */
    protocol: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleAddObject
     */
    protocolprops: string;
}

/**
 * 
 * @export
 * @interface EdgeModuleAddedObject
 */
export interface EdgeModuleAddedObject {
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleAddedObject
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleAddedObject
     */
    modulename: string;
}

/**
 * 
 * @export
 * @interface EdgeModuleObject
 */
export interface EdgeModuleObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof EdgeModuleObject
     */
    modulename: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleObject
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleObject
     */
    protocol: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleObject
     */
    protocolprops: string;
    /**
     * 
     * @type {MetaEdgeModuleObject}
     * @memberof EdgeModuleObject
     */
    meta: MetaEdgeModuleObject;
}

/**
 * 
 * @export
 * @interface EdgeModuleResourceAddObject
 */
export interface EdgeModuleResourceAddObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof EdgeModuleResourceAddObject
     */
    resourcename: string;
}

/**
 * 
 * @export
 * @interface EdgeModuleResourceAddedObject
 */
export interface EdgeModuleResourceAddedObject {
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleResourceAddedObject
     */
    resourcename: string;
}

/**
 * 
 * @export
 * @interface EdgeModuleResourceObject
 */
export interface EdgeModuleResourceObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof EdgeModuleResourceObject
     */
    resourcename: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleResourceObject
     */
    modulename: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleResourceObject
     */
    moduleid: string;
    /**
     * 
     * @type {MetaEdgeModuleObject}
     * @memberof EdgeModuleResourceObject
     */
    meta: MetaEdgeModuleObject;
}

/**
 * 
 * @export
 * @interface EdgeModuleResourceUpdateObject
 */
export interface EdgeModuleResourceUpdateObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof EdgeModuleResourceUpdateObject
     */
    resourcename?: string;
}

/**
 * 
 * @export
 * @interface EdgeModuleResourceUpdatedObject
 */
export interface EdgeModuleResourceUpdatedObject {
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleResourceUpdatedObject
     */
    updated: string;
}

/**
 * 
 * @export
 * @interface EdgeModuleUpdateObject
 */
export interface EdgeModuleUpdateObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof EdgeModuleUpdateObject
     */
    modulename: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleUpdateObject
     */
    protocol: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleUpdateObject
     */
    protocolprops: string;
}

/**
 * 
 * @export
 * @interface EdgeModuleUpdatedObject
 */
export interface EdgeModuleUpdatedObject {
    /**
     * 
     * @type {string}
     * @memberof EdgeModuleUpdatedObject
     */
    updated: string;
}

/**
 * 
 * @export
 * @interface FieldGroupObject
 */
export interface FieldGroupObject {
    /**
     * 
     * @type {string}
     * @memberof FieldGroupObject
     */
    name: string;
    /**
     * 
     * @type {Array<FieldObjectFields>}
     * @memberof FieldGroupObject
     */
    fields?: Array<FieldObjectFields>;
    /**
     * 
     * @type {boolean}
     * @memberof FieldGroupObject
     */
    custom?: boolean;
}

/**
 * 
 * @export
 * @interface FieldInstallationObject
 */
export interface FieldInstallationObject {
    /**
     * 
     * @type {string}
     * @memberof FieldInstallationObject
     */
    name: string;
    /**
     * 
     * @type {Array<FieldObjectFields>}
     * @memberof FieldInstallationObject
     */
    fields?: Array<FieldObjectFields>;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInstallationObject
     */
    custom?: boolean;
}

/**
 * 
 * @export
 * @interface FieldObject
 */
export interface FieldObject {
    /**
     * 
     * @type {string}
     * @memberof FieldObject
     */
    name: string;
    /**
     * 
     * @type {Array<FieldObjectFields>}
     * @memberof FieldObject
     */
    fields?: Array<FieldObjectFields>;
    /**
     * 
     * @type {boolean}
     * @memberof FieldObject
     */
    custom?: boolean;
}

/**
 * 
 * @export
 * @interface FieldObjectFields
 */
export interface FieldObjectFields {
    /**
     * 
     * @type {string}
     * @memberof FieldObjectFields
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface FieldsEdgeModuleObject
 */
export interface FieldsEdgeModuleObject {
    /**
     * 
     * @type {string}
     * @memberof FieldsEdgeModuleObject
     */
    name: string;
    /**
     * 
     * @type {Array<FieldObjectFields>}
     * @memberof FieldsEdgeModuleObject
     */
    fields?: Array<FieldObjectFields>;
    /**
     * 
     * @type {boolean}
     * @memberof FieldsEdgeModuleObject
     */
    custom?: boolean;
}

/**
 * 
 * @export
 * @interface GroupAddObject
 */
export interface GroupAddObject {
    /**
     * 
     * @type {string}
     * @memberof GroupAddObject
     */
    groupname: string;
}

/**
 * 
 * @export
 * @interface GroupName
 */
export interface GroupName {
}

/**
 * 
 * @export
 * @interface GroupObject
 */
export interface GroupObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof GroupObject
     */
    name: string;
    /**
     * 
     * @type {MetaGroupObject}
     * @memberof GroupObject
     */
    meta: MetaGroupObject;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupObject
     */
    users?: Array<string>;
}

/**
 * 
 * @export
 * @interface InstallationAddObject
 */
export interface InstallationAddObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof InstallationAddObject
     */
    deviceToken: string;
    /**
     * 
     * @type {string}
     * @memberof InstallationAddObject
     */
    deviceType: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InstallationAddObject
     */
    channels?: Array<string>;
}

/**
 * 
 * @export
 * @interface InstallationAddedObject
 */
export interface InstallationAddedObject {
    /**
     * 
     * @type {string}
     * @memberof InstallationAddedObject
     */
    id: string;
}

/**
 * 
 * @export
 * @interface InstallationObject
 */
export interface InstallationObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof InstallationObject
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InstallationObject
     */
    deviceToken: string;
    /**
     * 
     * @type {string}
     * @memberof InstallationObject
     */
    deviceType: InstallationObject.DeviceTypeEnum;
    /**
     * 
     * @type {MetaInstallationObject}
     * @memberof InstallationObject
     */
    meta: MetaInstallationObject;
    /**
     * 
     * @type {Array<string>}
     * @memberof InstallationObject
     */
    channels?: Array<string>;
}

/**
 * @export
 * @namespace InstallationObject
 */
export namespace InstallationObject {
    /**
     * @export
     * @enum {string}
     */
    export enum DeviceTypeEnum {
        Ios = <any> 'ios',
        Android = <any> 'android'
    }
}

/**
 * 
 * @export
 * @interface MetaEdgeModuleObject
 */
export interface MetaEdgeModuleObject {
    /**
     * 
     * @type {string}
     * @memberof MetaEdgeModuleObject
     */
    creator: string;
    /**
     * 
     * @type {string}
     * @memberof MetaEdgeModuleObject
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof MetaEdgeModuleObject
     */
    updated?: string;
}

/**
 * 
 * @export
 * @interface MetaGroupObject
 */
export interface MetaGroupObject {
    /**
     * 
     * @type {string}
     * @memberof MetaGroupObject
     */
    creator: string;
    /**
     * 
     * @type {string}
     * @memberof MetaGroupObject
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof MetaGroupObject
     */
    updated?: string;
}

/**
 * 
 * @export
 * @interface MetaInstallationObject
 */
export interface MetaInstallationObject {
    /**
     * 
     * @type {string}
     * @memberof MetaInstallationObject
     */
    creator: string;
    /**
     * 
     * @type {string}
     * @memberof MetaInstallationObject
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof MetaInstallationObject
     */
    updated?: string;
}

/**
 * 
 * @export
 * @interface MetaObject
 */
export interface MetaObject {
    /**
     * 
     * @type {string}
     * @memberof MetaObject
     */
    creator: string;
    /**
     * 
     * @type {string}
     * @memberof MetaObject
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof MetaObject
     */
    updated?: string;
}

/**
 * 
 * @export
 * @interface PushDataObject
 */
export interface PushDataObject {
    /**
     * 
     * @type {PushDataObjectGcm}
     * @memberof PushDataObject
     */
    gcm?: PushDataObjectGcm;
    /**
     * 
     * @type {PushDataObjectAps}
     * @memberof PushDataObject
     */
    aps?: PushDataObjectAps;
    /**
     * 
     * @type {PushDataObjectExtras}
     * @memberof PushDataObject
     */
    extras?: PushDataObjectExtras;
}

/**
 * 
 * @export
 * @interface PushDataObjectAps
 */
export interface PushDataObjectAps {
    /**
     * 
     * @type {string}
     * @memberof PushDataObjectAps
     */
    alert?: string;
    /**
     * 
     * @type {string}
     * @memberof PushDataObjectAps
     */
    badge?: string;
    /**
     * 
     * @type {string}
     * @memberof PushDataObjectAps
     */
    sound?: string;
}

/**
 * 
 * @export
 * @interface PushDataObjectExtras
 */
export interface PushDataObjectExtras {
    /**
     * 
     * @type {string}
     * @memberof PushDataObjectExtras
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface PushDataObjectGcm
 */
export interface PushDataObjectGcm {
    /**
     * 
     * @type {string}
     * @memberof PushDataObjectGcm
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof PushDataObjectGcm
     */
    title?: string;
}

/**
 * 
 * @export
 * @interface PushObject
 */
export interface PushObject {
    /**
     * 
     * @type {PushDataObject}
     * @memberof PushObject
     */
    data: PushDataObject;
    /**
     * 
     * @type {Array<string>}
     * @memberof PushObject
     */
    channels?: Array<string>;
    /**
     * 
     * @type {PushWhereObject}
     * @memberof PushObject
     */
    where: PushWhereObject;
}

/**
 * 
 * @export
 * @interface PushWhereObject
 */
export interface PushWhereObject {
    /**
     * 
     * @type {string}
     * @memberof PushWhereObject
     */
    deviceType?: PushWhereObject.DeviceTypeEnum;
    /**
     * 
     * @type {PushWhereObjectDeviceToken}
     * @memberof PushWhereObject
     */
    deviceToken?: PushWhereObjectDeviceToken;
}

/**
 * @export
 * @namespace PushWhereObject
 */
export namespace PushWhereObject {
    /**
     * @export
     * @enum {string}
     */
    export enum DeviceTypeEnum {
        Ios = <any> 'ios',
        Android = <any> 'android'
    }
}

/**
 * $in
 * @export
 * @interface PushWhereObjectDeviceToken
 */
export interface PushWhereObjectDeviceToken {
    /**
     * 
     * @type {Array<string>}
     * @memberof PushWhereObjectDeviceToken
     */
    _in: Array<string>;
}

/**
 * 
 * @export
 * @interface UpdateGroupObject
 */
export interface UpdateGroupObject {
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupObject
     */
    fieldName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateGroupObject
     */
    users?: Array<string>;
}

/**
 * 
 * @export
 * @interface UpdateInstallationObject
 */
export interface UpdateInstallationObject {
    [key: string]: string | any;

    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateInstallationObject
     */
    channels?: Array<string>;
}

/**
 * 
 * @export
 * @interface UpdateObject
 */
export interface UpdateObject {
    /**
     * 
     * @type {string}
     * @memberof UpdateObject
     */
    fieldName?: string;
}

/**
 * 
 * @export
 * @interface UpdatedGroupObject
 */
export interface UpdatedGroupObject {
    /**
     * 
     * @type {string}
     * @memberof UpdatedGroupObject
     */
    updated: string;
}

/**
 * 
 * @export
 * @interface UpdatedInstallationObject
 */
export interface UpdatedInstallationObject {
    /**
     * 
     * @type {string}
     * @memberof UpdatedInstallationObject
     */
    updated: string;
}

/**
 * 
 * @export
 * @interface UpdatedObject
 */
export interface UpdatedObject {
    /**
     * 
     * @type {string}
     * @memberof UpdatedObject
     */
    updated: string;
}

/**
 * 
 * @export
 * @interface UserCredentialsObject
 */
export interface UserCredentialsObject {
    /**
     * 
     * @type {string}
     * @memberof UserCredentialsObject
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserCredentialsObject
     */
    password: string;
}

/**
 * 
 * @export
 * @interface UserObject
 */
export interface UserObject {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    username: string;
    /**
     * 
     * @type {MetaObject}
     * @memberof UserObject
     */
    meta: MetaObject;
}

/**
 * 
 * @export
 * @interface UserSignUpResponseObject
 */
export interface UserSignUpResponseObject {
    /**
     * 
     * @type {string}
     * @memberof UserSignUpResponseObject
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignUpResponseObject
     */
    sessionToken: string;
}

/**
 * 
 * @export
 * @interface UserTokenObject
 */
export interface UserTokenObject {
    /**
     * 
     * @type {string}
     * @memberof UserTokenObject
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserTokenObject
     */
    username: string;
    /**
     * 
     * @type {MetaObject}
     * @memberof UserTokenObject
     */
    meta: MetaObject;
    /**
     * 
     * @type {string}
     * @memberof UserTokenObject
     */
    sessiontoken: string;
}

/**
 * 
 * @export
 * @interface UseridObject
 */
export interface UseridObject {
    /**
     * 
     * @type {string}
     * @memberof UseridObject
     */
    id: string;
}

/**
 * 
 * @export
 * @interface VersionObject
 */
export interface VersionObject {
    /**
     * 
     * @type {string}
     * @memberof VersionObject
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof VersionObject
     */
    server?: string;
}


/**
 * ApiDocApi - fetch parameter creator
 * @export
 */
export const ApiDocApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  |      Used to retrieve all the API EndPoints.
         * @summary Get API EndPoints
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPI(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get API in JSON format
         * @summary Get JSON
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIJSONFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/apidoc.json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get API in YAML format
         * @summary Get YAML
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIYAMLFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/apidoc.yaml`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve an EndPoint for the API EndPoints.
         * @summary Get API EndPoint
         * @param {string} item Path Segment to an EndPoint
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIYAMLFormatEndPoint(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item','Required parameter item was null or undefined when calling getAPIYAMLFormatEndPoint.');
            }
            const localVarPath = `/api/{item}/apidoc.yaml`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiDocApi - functional programming interface
 * @export
 */
export const ApiDocApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  |      Used to retrieve all the API EndPoints.
         * @summary Get API EndPoints
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPI(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApiDocApiFetchParamCreator(configuration).aPI(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get API in JSON format
         * @summary Get JSON
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIJSONFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApiDocApiFetchParamCreator(configuration).getAPIJSONFormat(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get API in YAML format
         * @summary Get YAML
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIYAMLFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApiDocApiFetchParamCreator(configuration).getAPIYAMLFormat(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve an EndPoint for the API EndPoints.
         * @summary Get API EndPoint
         * @param {string} item Path Segment to an EndPoint
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIYAMLFormatEndPoint(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApiDocApiFetchParamCreator(configuration).getAPIYAMLFormatEndPoint(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ApiDocApi - factory interface
 * @export
 */
export const ApiDocApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *  |      Used to retrieve all the API EndPoints.
         * @summary Get API EndPoints
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPI(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return ApiDocApiFp(configuration).aPI(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Get API in JSON format
         * @summary Get JSON
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIJSONFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return ApiDocApiFp(configuration).getAPIJSONFormat(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Get API in YAML format
         * @summary Get YAML
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIYAMLFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return ApiDocApiFp(configuration).getAPIYAMLFormat(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve an EndPoint for the API EndPoints.
         * @summary Get API EndPoint
         * @param {string} item Path Segment to an EndPoint
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIYAMLFormatEndPoint(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return ApiDocApiFp(configuration).getAPIYAMLFormatEndPoint(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
    };
};

/**
 * ApiDocApi - object-oriented interface
 * @export
 * @class ApiDocApi
 * @extends {BaseAPI}
 */
export class ApiDocApi extends BaseAPI {
    /**
     *  |      Used to retrieve all the API EndPoints.
     * @summary Get API EndPoints
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocApi
     */
    public aPI(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return ApiDocApiFp(this.configuration).aPI(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Get API in JSON format
     * @summary Get JSON
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocApi
     */
    public getAPIJSONFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return ApiDocApiFp(this.configuration).getAPIJSONFormat(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Get API in YAML format
     * @summary Get YAML
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocApi
     */
    public getAPIYAMLFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return ApiDocApiFp(this.configuration).getAPIYAMLFormat(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve an EndPoint for the API EndPoints.
     * @summary Get API EndPoint
     * @param {string} item Path Segment to an EndPoint
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocApi
     */
    public getAPIYAMLFormatEndPoint(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return ApiDocApiFp(this.configuration).getAPIYAMLFormatEndPoint(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

}

/**
 * EdgeModulesApi - fetch parameter creator
 * @export
 */
export const EdgeModulesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling getModule.');
            }
            const localVarPath = `/edgemodules/{mname}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
         * @summary Get EdgeModule Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling getModuleResource.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getModuleResource.');
            }
            const localVarPath = `/edgemodules/{mname}/resources/{name}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from the resources of an EdgeModule.
         * @summary Get EdgeModule Resources
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling getModuleResources.');
            }
            const localVarPath = `/edgemodules/{mname}/resources`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Module
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/edgemodules`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS EdgeModule (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/edgemodules/fields`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from the resources of all EdgeModules.
         * @summary Get EdgeModules Resources
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/edgemodules/resources`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve the `field names` of all the resources of the EMS EdgeModule (including the custom fields).
         * @summary Get Resource Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/edgemodules/resources/fields`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to add a new `EdgeModule` object to the EMS database.
         * @summary Add Module
         * @param {EdgeModuleAddObject} body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerModule.');
            }
            const localVarPath = `/edgemodules`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EdgeModuleAddObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
         * @summary Add Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {EdgeModuleResourceAddObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling registerModuleResource.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerModuleResource.');
            }
            const localVarPath = `/edgemodules/{mname}/resources`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EdgeModuleResourceAddObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
         * @summary Delete Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling unregisterModule.');
            }
            const localVarPath = `/edgemodules/{mname}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
         * @summary Delete Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling unregisterModuleResource.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling unregisterModuleResource.');
            }
            const localVarPath = `/edgemodules/{mname}/resources/{name}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
         * @summary Update Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {EdgeModuleUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling updateModule.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateModule.');
            }
            const localVarPath = `/edgemodules/{mname}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EdgeModuleUpdateObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
         * @summary Update Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {EdgeModuleResourceUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling updateModuleResource.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateModuleResource.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateModuleResource.');
            }
            const localVarPath = `/edgemodules/{mname}/resources/{name}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EdgeModuleResourceUpdateObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdgeModulesApi - functional programming interface
 * @export
 */
export const EdgeModulesApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EdgeModuleObject> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).getModule(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
         * @summary Get EdgeModule Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EdgeModuleResourceObject> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).getModuleResource(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from the resources of an EdgeModule.
         * @summary Get EdgeModule Resources
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EdgeModuleResourceObject>> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).getModuleResources(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Module
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EdgeModuleObject>> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).getModules(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS EdgeModule (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FieldsEdgeModuleObject> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).getModulesFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from the resources of all EdgeModules.
         * @summary Get EdgeModules Resources
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EdgeModuleResourceObject>> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).getResources(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve the `field names` of all the resources of the EMS EdgeModule (including the custom fields).
         * @summary Get Resource Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FieldsEdgeModuleObject> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).getResourcesFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to add a new `EdgeModule` object to the EMS database.
         * @summary Add Module
         * @param {EdgeModuleAddObject} body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EdgeModuleAddedObject> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).registerModule(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
         * @summary Add Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {EdgeModuleResourceAddObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EdgeModuleResourceAddedObject> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).registerModuleResource(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
         * @summary Delete Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).unregisterModule(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
         * @summary Delete Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).unregisterModuleResource(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
         * @summary Update Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {EdgeModuleUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EdgeModuleUpdatedObject> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).updateModule(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
         * @summary Update Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {EdgeModuleResourceUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EdgeModuleResourceUpdatedObject> {
            const localVarFetchArgs = EdgeModulesApiFetchParamCreator(configuration).updateModuleResource(mname, name, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EdgeModulesApi - factory interface
 * @export
 */
export const EdgeModulesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).getModule(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
         * @summary Get EdgeModule Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).getModuleResource(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from the resources of an EdgeModule.
         * @summary Get EdgeModule Resources
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).getModuleResources(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Module
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).getModules(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS EdgeModule (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).getModulesFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from the resources of all EdgeModules.
         * @summary Get EdgeModules Resources
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).getResources(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve the `field names` of all the resources of the EMS EdgeModule (including the custom fields).
         * @summary Get Resource Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).getResourcesFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to add a new `EdgeModule` object to the EMS database.
         * @summary Add Module
         * @param {EdgeModuleAddObject} body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).registerModule(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
         * @summary Add Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {EdgeModuleResourceAddObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).registerModuleResource(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
         * @summary Delete Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).unregisterModule(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
         * @summary Delete Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).unregisterModuleResource(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
         * @summary Update Module
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {EdgeModuleUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).updateModule(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
         * @summary Update Module Resource
         * @param {string} mname Is the unique EMS EdgeModule identifier
         * @param {string} name Is the unique EMS EdgeModule Resource name
         * @param {EdgeModuleResourceUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesApiFp(configuration).updateModuleResource(mname, name, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
    };
};

/**
 * EdgeModulesApi - object-oriented interface
 * @export
 * @class EdgeModulesApi
 * @extends {BaseAPI}
 */
export class EdgeModulesApi extends BaseAPI {
    /**
     *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Module
     * @param {string} mname Is the unique EMS EdgeModule identifier
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).getModule(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
     * @summary Get EdgeModule Resource
     * @param {string} mname Is the unique EMS EdgeModule identifier
     * @param {string} name Is the unique EMS EdgeModule Resource name
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).getModuleResource(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from the resources of an EdgeModule.
     * @summary Get EdgeModule Resources
     * @param {string} mname Is the unique EMS EdgeModule identifier
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).getModuleResources(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Module
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).getModules(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all the `field names` of the EMS EdgeModule (including the custom fields).
     * @summary Get Fields
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).getModulesFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from the resources of all EdgeModules.
     * @summary Get EdgeModules Resources
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).getResources(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve the `field names` of all the resources of the EMS EdgeModule (including the custom fields).
     * @summary Get Resource Fields
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).getResourcesFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to add a new `EdgeModule` object to the EMS database.
     * @summary Add Module
     * @param {EdgeModuleAddObject} body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).registerModule(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
     * @summary Add Module Resource
     * @param {string} mname Is the unique EMS EdgeModule identifier
     * @param {EdgeModuleResourceAddObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).registerModuleResource(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
     * @summary Delete Module
     * @param {string} mname Is the unique EMS EdgeModule identifier
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).unregisterModule(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
     * @summary Delete Module Resource
     * @param {string} mname Is the unique EMS EdgeModule identifier
     * @param {string} name Is the unique EMS EdgeModule Resource name
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).unregisterModuleResource(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
     * @summary Update Module
     * @param {string} mname Is the unique EMS EdgeModule identifier
     * @param {EdgeModuleUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).updateModule(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
     * @summary Update Module Resource
     * @param {string} mname Is the unique EMS EdgeModule identifier
     * @param {string} name Is the unique EMS EdgeModule Resource name
     * @param {EdgeModuleResourceUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesApi
     */
    public updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesApiFp(this.configuration).updateModuleResource(mname, name, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

}

/**
 * EdgeModulesInvokersApi - fetch parameter creator
 * @export
 */
export const EdgeModulesInvokersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Delete Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling deleteResourceEndpoint.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling deleteResourceEndpoint.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Delete Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling deleteResourceEndpointItem.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling deleteResourceEndpointItem.');
            }
            // verify required parameter 'wildcard' is not null or undefined
            if (wildcard === null || wildcard === undefined) {
                throw new RequiredError('wildcard','Required parameter wildcard was null or undefined when calling deleteResourceEndpointItem.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}/{wildcard}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)))
                .replace(`{${"wildcard"}}`, encodeURIComponent(String(wildcard)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Get Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling getResourceEndpoint.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling getResourceEndpoint.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Get Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling getResourceEndpointItem.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling getResourceEndpointItem.');
            }
            // verify required parameter 'wildcard' is not null or undefined
            if (wildcard === null || wildcard === undefined) {
                throw new RequiredError('wildcard','Required parameter wildcard was null or undefined when calling getResourceEndpointItem.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}/{wildcard}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)))
                .replace(`{${"wildcard"}}`, encodeURIComponent(String(wildcard)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Patch Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling patchResourceEndpoint.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling patchResourceEndpoint.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchResourceEndpoint.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Patch Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling patchResourceEndpointItem.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling patchResourceEndpointItem.');
            }
            // verify required parameter 'wildcard' is not null or undefined
            if (wildcard === null || wildcard === undefined) {
                throw new RequiredError('wildcard','Required parameter wildcard was null or undefined when calling patchResourceEndpointItem.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchResourceEndpointItem.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}/{wildcard}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)))
                .replace(`{${"wildcard"}}`, encodeURIComponent(String(wildcard)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Post Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling postResourceEndpoint.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling postResourceEndpoint.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postResourceEndpoint.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Post Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling postResourceEndpointItem.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling postResourceEndpointItem.');
            }
            // verify required parameter 'wildcard' is not null or undefined
            if (wildcard === null || wildcard === undefined) {
                throw new RequiredError('wildcard','Required parameter wildcard was null or undefined when calling postResourceEndpointItem.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postResourceEndpointItem.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}/{wildcard}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)))
                .replace(`{${"wildcard"}}`, encodeURIComponent(String(wildcard)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Put Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling putResourceEndpoint.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling putResourceEndpoint.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putResourceEndpoint.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Put Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'mname' is not null or undefined
            if (mname === null || mname === undefined) {
                throw new RequiredError('mname','Required parameter mname was null or undefined when calling putResourceEndpointItem.');
            }
            // verify required parameter 'rname' is not null or undefined
            if (rname === null || rname === undefined) {
                throw new RequiredError('rname','Required parameter rname was null or undefined when calling putResourceEndpointItem.');
            }
            // verify required parameter 'wildcard' is not null or undefined
            if (wildcard === null || wildcard === undefined) {
                throw new RequiredError('wildcard','Required parameter wildcard was null or undefined when calling putResourceEndpointItem.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putResourceEndpointItem.');
            }
            const localVarPath = `/edgemodules/{mname}/{rname}/{wildcard}`
                .replace(`{${"mname"}}`, encodeURIComponent(String(mname)))
                .replace(`{${"rname"}}`, encodeURIComponent(String(rname)))
                .replace(`{${"wildcard"}}`, encodeURIComponent(String(wildcard)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdgeModulesInvokersApi - functional programming interface
 * @export
 */
export const EdgeModulesInvokersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Delete Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).deleteResourceEndpoint(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Delete Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).deleteResourceEndpointItem(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Get Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).getResourceEndpoint(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Get Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).getResourceEndpointItem(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Patch Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).patchResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Patch Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).patchResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Post Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).postResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Post Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).postResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Put Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).putResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Put Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EdgeModulesInvokersApiFetchParamCreator(configuration).putResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EdgeModulesInvokersApi - factory interface
 * @export
 */
export const EdgeModulesInvokersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Delete Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).deleteResourceEndpoint(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Delete Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).deleteResourceEndpointItem(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Get Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).getResourceEndpoint(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Get Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).getResourceEndpointItem(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Patch Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).patchResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Patch Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).patchResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Post Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).postResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Post Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).postResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource Put Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).putResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
         * @summary Invoke Resource/_* Put Method
         * @param {string} mname Is the EMS EdgeModule name
         * @param {string} rname Is the unique EMS EdgeModule Resource name
         * @param {string} wildcard Is the Wild card part of the URL
         * @param {any} body Body Object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return EdgeModulesInvokersApiFp(configuration).putResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
    };
};

/**
 * EdgeModulesInvokersApi - object-oriented interface
 * @export
 * @class EdgeModulesInvokersApi
 * @extends {BaseAPI}
 */
export class EdgeModulesInvokersApi extends BaseAPI {
    /**
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Delete Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).deleteResourceEndpoint(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Delete Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {string} wildcard Is the Wild card part of the URL
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).deleteResourceEndpointItem(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Get Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).getResourceEndpoint(mname, rname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Get Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {string} wildcard Is the Wild card part of the URL
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).getResourceEndpointItem(mname, rname, wildcard, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Patch Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {any} body Body Object
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).patchResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Patch Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {string} wildcard Is the Wild card part of the URL
     * @param {any} body Body Object
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).patchResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Post Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {any} body Body Object
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).postResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Post Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {string} wildcard Is the Wild card part of the URL
     * @param {any} body Body Object
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).postResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Put Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {any} body Body Object
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).putResourceEndpoint(mname, rname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Put Method
     * @param {string} mname Is the EMS EdgeModule name
     * @param {string} rname Is the unique EMS EdgeModule Resource name
     * @param {string} wildcard Is the Wild card part of the URL
     * @param {any} body Body Object
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeModulesInvokersApi
     */
    public putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return EdgeModulesInvokersApiFp(this.configuration).putResourceEndpointItem(mname, rname, wildcard, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

}

/**
 * GroupsApi - fetch parameter creator
 * @export
 */
export const GroupsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  |      Used to add a new `Group` object to the EMS database.
         * @summary Add Group
         * @param {GroupAddObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroup(body: GroupAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addGroup.');
            }
            const localVarPath = `/groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GroupAddObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to delete a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Delete Group
         * @param {string} item A group name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item','Required parameter item was null or undefined when calling deleteGroup.');
            }
            const localVarPath = `/groups/{item}`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Get Group
         * @param {string} item A group name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item','Required parameter item was null or undefined when calling getGroup.');
            }
            const localVarPath = `/groups/{item}`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Group (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/groups/fields`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from `Groups`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Groups
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options: any = {}): FetchArgs {
            const localVarPath = `/groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to update a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Update Group
         * @param {string} item A group name
         * @param {UpdateGroupObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(item: string, body: UpdateGroupObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item','Required parameter item was null or undefined when calling updateGroup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateGroup.');
            }
            const localVarPath = `/groups/{item}`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateGroupObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  |      Used to add a new `Group` object to the EMS database.
         * @summary Add Group
         * @param {GroupAddObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroup(body: GroupAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).addGroup(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to delete a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Delete Group
         * @param {string} item A group name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).deleteGroup(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Get Group
         * @param {string} item A group name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupObject> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).getGroup(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Group (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FieldGroupObject>> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).getGroupFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from `Groups`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Groups
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GroupObject>> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).getGroups(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to update a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Update Group
         * @param {string} item A group name
         * @param {UpdateGroupObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(item: string, body: UpdateGroupObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UpdatedGroupObject> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).updateGroup(item, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *  |      Used to add a new `Group` object to the EMS database.
         * @summary Add Group
         * @param {GroupAddObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroup(body: GroupAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return GroupsApiFp(configuration).addGroup(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to delete a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Delete Group
         * @param {string} item A group name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return GroupsApiFp(configuration).deleteGroup(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Get Group
         * @param {string} item A group name
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return GroupsApiFp(configuration).getGroup(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Group (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return GroupsApiFp(configuration).getGroupFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from `Groups`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Groups
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any) {
            return GroupsApiFp(configuration).getGroups(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options)(fetch, basePath);
        },
        /**
         *  |      Used to update a `Group`. **item** is the unique EMS Group name in the EMS database.
         * @summary Update Group
         * @param {string} item A group name
         * @param {UpdateGroupObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(item: string, body: UpdateGroupObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return GroupsApiFp(configuration).updateGroup(item, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     *  |      Used to add a new `Group` object to the EMS database.
     * @summary Add Group
     * @param {GroupAddObject} body Object to sign up a new EMS User in the EMS Server
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public addGroup(body: GroupAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return GroupsApiFp(this.configuration).addGroup(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to delete a `Group`. **item** is the unique EMS Group name in the EMS database.
     * @summary Delete Group
     * @param {string} item A group name
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return GroupsApiFp(this.configuration).deleteGroup(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from a `Group`. **item** is the unique EMS Group name in the EMS database.
     * @summary Get Group
     * @param {string} item A group name
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroup(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return GroupsApiFp(this.configuration).getGroup(item, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all the `field names` of the EMS Group (including the custom fields).
     * @summary Get Fields
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return GroupsApiFp(this.configuration).getGroupFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from `Groups`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Groups
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {number} [skip] users skipped
     * @param {number} [limit] maximum number of results to return
     * @param {number} [order] order ascending or descending (asc, desc)
     * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroups(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any) {
        return GroupsApiFp(this.configuration).getGroups(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to update a `Group`. **item** is the unique EMS Group name in the EMS database.
     * @summary Update Group
     * @param {string} item A group name
     * @param {UpdateGroupObject} body Object to sign up a new EMS User in the EMS Server
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroup(item: string, body: UpdateGroupObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return GroupsApiFp(this.configuration).updateGroup(item, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

}

/**
 * InstallationsApi - fetch parameter creator
 * @export
 */
export const InstallationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  |      Used to add a new `Installation` object to the EMS database.
         * @summary Add Installation
         * @param {InstallationAddObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addInstallation.');
            }
            const localVarPath = `/installations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InstallationAddObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to delete an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
         * @summary Delete Installation
         * @param {string} id A Installation ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteInstallation.');
            }
            const localVarPath = `/installations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
         * @summary Get Installation Channels
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/installations/channels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from a specific `Installation` (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
         * @summary Get Installation
         * @param {string} id A Installation ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInstallation.');
            }
            const localVarPath = `/installations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Installation (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/installations/fields`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from `Installation`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Installations
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options: any = {}): FetchArgs {
            const localVarPath = `/installations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to update an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
         * @summary Update Installation
         * @param {string} id A Installation ID
         * @param {UpdateInstallationObject} body Installation fields to update
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateInstallation.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateInstallation.');
            }
            const localVarPath = `/installations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateInstallationObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstallationsApi - functional programming interface
 * @export
 */
export const InstallationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  |      Used to add a new `Installation` object to the EMS database.
         * @summary Add Installation
         * @param {InstallationAddObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InstallationAddedObject> {
            const localVarFetchArgs = InstallationsApiFetchParamCreator(configuration).addInstallation(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to delete an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
         * @summary Delete Installation
         * @param {string} id A Installation ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InstallationsApiFetchParamCreator(configuration).deleteInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
         * @summary Get Installation Channels
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ChannelName>> {
            const localVarFetchArgs = InstallationsApiFetchParamCreator(configuration).getChannels(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from a specific `Installation` (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
         * @summary Get Installation
         * @param {string} id A Installation ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InstallationObject> {
            const localVarFetchArgs = InstallationsApiFetchParamCreator(configuration).getInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Installation (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FieldInstallationObject>> {
            const localVarFetchArgs = InstallationsApiFetchParamCreator(configuration).getInstallationFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from `Installation`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Installations
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InstallationObject>> {
            const localVarFetchArgs = InstallationsApiFetchParamCreator(configuration).getInstallations(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to update an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
         * @summary Update Installation
         * @param {string} id A Installation ID
         * @param {UpdateInstallationObject} body Installation fields to update
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UpdatedInstallationObject> {
            const localVarFetchArgs = InstallationsApiFetchParamCreator(configuration).updateInstallation(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InstallationsApi - factory interface
 * @export
 */
export const InstallationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *  |      Used to add a new `Installation` object to the EMS database.
         * @summary Add Installation
         * @param {InstallationAddObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return InstallationsApiFp(configuration).addInstallation(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to delete an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
         * @summary Delete Installation
         * @param {string} id A Installation ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return InstallationsApiFp(configuration).deleteInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
         * @summary Get Installation Channels
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return InstallationsApiFp(configuration).getChannels(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from a specific `Installation` (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
         * @summary Get Installation
         * @param {string} id A Installation ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return InstallationsApiFp(configuration).getInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Installation (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return InstallationsApiFp(configuration).getInstallationFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from `Installation`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Installations
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any) {
            return InstallationsApiFp(configuration).getInstallations(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options)(fetch, basePath);
        },
        /**
         *  |      Used to update an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
         * @summary Update Installation
         * @param {string} id A Installation ID
         * @param {UpdateInstallationObject} body Installation fields to update
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return InstallationsApiFp(configuration).updateInstallation(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
    };
};

/**
 * InstallationsApi - object-oriented interface
 * @export
 * @class InstallationsApi
 * @extends {BaseAPI}
 */
export class InstallationsApi extends BaseAPI {
    /**
     *  |      Used to add a new `Installation` object to the EMS database.
     * @summary Add Installation
     * @param {InstallationAddObject} body Object to sign up a new EMS User in the EMS Server
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallationsApi
     */
    public addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return InstallationsApiFp(this.configuration).addInstallation(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to delete an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @summary Delete Installation
     * @param {string} id A Installation ID
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallationsApi
     */
    public deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return InstallationsApiFp(this.configuration).deleteInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @summary Get Installation Channels
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallationsApi
     */
    public getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return InstallationsApiFp(this.configuration).getChannels(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from a specific `Installation` (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @summary Get Installation
     * @param {string} id A Installation ID
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallationsApi
     */
    public getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return InstallationsApiFp(this.configuration).getInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all the `field names` of the EMS Installation (including the custom fields).
     * @summary Get Fields
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallationsApi
     */
    public getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return InstallationsApiFp(this.configuration).getInstallationFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from `Installation`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Installations
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {number} [skip] users skipped
     * @param {number} [limit] maximum number of results to return
     * @param {number} [order] order ascending or descending (asc, desc)
     * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallationsApi
     */
    public getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any) {
        return InstallationsApiFp(this.configuration).getInstallations(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to update an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @summary Update Installation
     * @param {string} id A Installation ID
     * @param {UpdateInstallationObject} body Installation fields to update
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallationsApi
     */
    public updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return InstallationsApiFp(this.configuration).updateInstallation(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

}

/**
 * PushApi - fetch parameter creator
 * @export
 */
export const PushApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Used to send a push notification message to a registered device
         * @summary Send Push
         * @param {PushObject} body Object containing the Push Message data structure
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(body: PushObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling send.');
            }
            const localVarPath = `/push`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PushObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PushApi - functional programming interface
 * @export
 */
export const PushApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Used to send a push notification message to a registered device
         * @summary Send Push
         * @param {PushObject} body Object containing the Push Message data structure
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(body: PushObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PushApiFetchParamCreator(configuration).send(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PushApi - factory interface
 * @export
 */
export const PushApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Used to send a push notification message to a registered device
         * @summary Send Push
         * @param {PushObject} body Object containing the Push Message data structure
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(body: PushObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return PushApiFp(configuration).send(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
    };
};

/**
 * PushApi - object-oriented interface
 * @export
 * @class PushApi
 * @extends {BaseAPI}
 */
export class PushApi extends BaseAPI {
    /**
     * Used to send a push notification message to a registered device
     * @summary Send Push
     * @param {PushObject} body Object containing the Push Message data structure
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApi
     */
    public send(body: PushObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return PushApiFp(this.configuration).send(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

}

/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  |      Used to add a new `User` object to the EMS database.
         * @summary Add User
         * @param {UserCredentialsObject} body Object to add a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addUser.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserCredentialsObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to delete a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Delete User
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Get User
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Users (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/users/fields`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Get User Groups
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroups(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserGroups.');
            }
            const localVarPath = `/users/{id}/groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to retrieve all data from `Users`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Users
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Logs in to the EMS Server with a specific EMS User.
         * @summary Log In
         * @param {UserCredentialsObject} body A user object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loginUser.');
            }
            const localVarPath = `/users/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserCredentialsObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * sPostLogoutSummaryDesc
         * @summary sPostLogoutSummaryTitle
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/users/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Signs up to the EMS Server with an appropriate EMS User.
         * @summary Sign Up  User
         * @param {UserCredentialsObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling signupUser.');
            }
            const localVarPath = `/users/signup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserCredentialsObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  |      Used to update a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Update User
         * @param {string} id A user ID
         * @param {UpdateObject} body Add any fieldName
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: string, body: UpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateUser.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  |      Used to add a new `User` object to the EMS database.
         * @summary Add User
         * @param {UserCredentialsObject} body Object to add a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UseridObject> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).addUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to delete a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Delete User
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).deleteUser(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Get User
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserObject> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUser(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Users (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FieldObject>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUserFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Get User Groups
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroups(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GroupName>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUserGroups(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to retrieve all data from `Users`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Users
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserObject>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUsers(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Logs in to the EMS Server with a specific EMS User.
         * @summary Log In
         * @param {UserCredentialsObject} body A user object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserTokenObject> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).loginUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * sPostLogoutSummaryDesc
         * @summary sPostLogoutSummaryTitle
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).logoutUser(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Signs up to the EMS Server with an appropriate EMS User.
         * @summary Sign Up  User
         * @param {UserCredentialsObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserSignUpResponseObject> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).signupUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  |      Used to update a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Update User
         * @param {string} id A user ID
         * @param {UpdateObject} body Add any fieldName
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: string, body: UpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UpdatedObject> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).updateUser(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *  |      Used to add a new `User` object to the EMS database.
         * @summary Add User
         * @param {UserCredentialsObject} body Object to add a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).addUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to delete a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Delete User
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).deleteUser(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Get User
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).getUser(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all the `field names` of the EMS Users (including the custom fields).
         * @summary Get Fields
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).getUserFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Get User Groups
         * @param {string} id A user ID
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroups(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).getUserGroups(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to retrieve all data from `Users`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
         * @summary Get Users
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {number} [skip] users skipped
         * @param {number} [limit] maximum number of results to return
         * @param {number} [order] order ascending or descending (asc, desc)
         * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any) {
            return UsersApiFp(configuration).getUsers(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options)(fetch, basePath);
        },
        /**
         *  |      Logs in to the EMS Server with a specific EMS User.
         * @summary Log In
         * @param {UserCredentialsObject} body A user object
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).loginUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         * sPostLogoutSummaryDesc
         * @summary sPostLogoutSummaryTitle
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).logoutUser(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Signs up to the EMS Server with an appropriate EMS User.
         * @summary Sign Up  User
         * @param {UserCredentialsObject} body Object to sign up a new EMS User in the EMS Server
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).signupUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
        /**
         *  |      Used to update a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
         * @summary Update User
         * @param {string} id A user ID
         * @param {UpdateObject} body Add any fieldName
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: string, body: UpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return UsersApiFp(configuration).updateUser(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     *  |      Used to add a new `User` object to the EMS database.
     * @summary Add User
     * @param {UserCredentialsObject} body Object to add a new EMS User in the EMS Server
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).addUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to delete a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @summary Delete User
     * @param {string} id A user ID
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @summary Get User
     * @param {string} id A user ID
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).getUser(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all the `field names` of the EMS Users (including the custom fields).
     * @summary Get Fields
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).getUserFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @summary Get User Groups
     * @param {string} id A user ID
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserGroups(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).getUserGroups(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to retrieve all data from `Users`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Users
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {number} [skip] users skipped
     * @param {number} [limit] maximum number of results to return
     * @param {number} [order] order ascending or descending (asc, desc)
     * @param {string} [where] filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options?: any) {
        return UsersApiFp(this.configuration).getUsers(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Logs in to the EMS Server with a specific EMS User.
     * @summary Log In
     * @param {UserCredentialsObject} body A user object
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).loginUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     * sPostLogoutSummaryDesc
     * @summary sPostLogoutSummaryTitle
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public logoutUser(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).logoutUser(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Signs up to the EMS Server with an appropriate EMS User.
     * @summary Sign Up  User
     * @param {UserCredentialsObject} body Object to sign up a new EMS User in the EMS Server
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).signupUser(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

    /**
     *  |      Used to update a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @summary Update User
     * @param {string} id A user ID
     * @param {UpdateObject} body Add any fieldName
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(id: string, body: UpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return UsersApiFp(this.configuration).updateUser(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

}

/**
 * VersionApi - fetch parameter creator
 * @export
 */
export const VersionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  |      Used to retrieve the `Version` of the EMS Server.
         * @summary Get version
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}): FetchArgs {
            const localVarPath = `/version`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
                localVarHeaderParameter['X-Embarcadero-Application-Id'] = String(xEmbarcaderoApplicationId);
            }

            if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-App-Secret'] = String(xEmbarcaderoAppSecret);
            }

            if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
                localVarHeaderParameter['X-Embarcadero-Master-Secret'] = String(xEmbarcaderoMasterSecret);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  |      Used to retrieve the `Version` of the EMS Server.
         * @summary Get version
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VersionObject> {
            const localVarFetchArgs = VersionApiFetchParamCreator(configuration).getVersion(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *  |      Used to retrieve the `Version` of the EMS Server.
         * @summary Get version
         * @param {string} [xEmbarcaderoApplicationId] 
         * @param {string} [xEmbarcaderoAppSecret] 
         * @param {string} [xEmbarcaderoMasterSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
            return VersionApiFp(configuration).getVersion(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(fetch, basePath);
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     *  |      Used to retrieve the `Version` of the EMS Server.
     * @summary Get version
     * @param {string} [xEmbarcaderoApplicationId] 
     * @param {string} [xEmbarcaderoAppSecret] 
     * @param {string} [xEmbarcaderoMasterSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public getVersion(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options?: any) {
        return VersionApiFp(this.configuration).getVersion(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, options)(this.fetch, this.basePath);
    }

}

