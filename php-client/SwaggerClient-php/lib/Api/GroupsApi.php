<?php
/**
 * GroupsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addGroup
     *
     * Add Group
     *
     * @param  \Swagger\Client\Model\GroupAddObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addGroup($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $this->addGroupWithHttpInfo($body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
    }

    /**
     * Operation addGroupWithHttpInfo
     *
     * Add Group
     *
     * @param  \Swagger\Client\Model\GroupAddObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addGroupWithHttpInfo($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '';
        $request = $this->addGroupRequest($body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addGroupAsync
     *
     * Add Group
     *
     * @param  \Swagger\Client\Model\GroupAddObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupAsync($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->addGroupAsyncWithHttpInfo($body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addGroupAsyncWithHttpInfo
     *
     * Add Group
     *
     * @param  \Swagger\Client\Model\GroupAddObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupAsyncWithHttpInfo($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '';
        $request = $this->addGroupRequest($body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addGroup'
     *
     * @param  \Swagger\Client\Model\GroupAddObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addGroupRequest($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addGroup'
            );
        }

        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteGroup
     *
     * Delete Group
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteGroup($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $this->deleteGroupWithHttpInfo($item, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
    }

    /**
     * Operation deleteGroupWithHttpInfo
     *
     * Delete Group
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGroupWithHttpInfo($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '';
        $request = $this->deleteGroupRequest($item, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteGroupAsync
     *
     * Delete Group
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGroupAsync($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->deleteGroupAsyncWithHttpInfo($item, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteGroupAsyncWithHttpInfo
     *
     * Delete Group
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGroupAsyncWithHttpInfo($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '';
        $request = $this->deleteGroupRequest($item, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteGroup'
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteGroupRequest($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'item' is set
        if ($item === null || (is_array($item) && count($item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling deleteGroup'
            );
        }

        $resourcePath = '/groups/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroup
     *
     * Get Group
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GroupObject
     */
    public function getGroup($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getGroupWithHttpInfo($item, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getGroupWithHttpInfo
     *
     * Get Group
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GroupObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupWithHttpInfo($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\GroupObject';
        $request = $this->getGroupRequest($item, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GroupObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupAsync
     *
     * Get Group
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupAsync($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getGroupAsyncWithHttpInfo($item, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupAsyncWithHttpInfo
     *
     * Get Group
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupAsyncWithHttpInfo($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\GroupObject';
        $request = $this->getGroupRequest($item, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroup'
     *
     * @param  string $item A group name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGroupRequest($item, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'item' is set
        if ($item === null || (is_array($item) && count($item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling getGroup'
            );
        }

        $resourcePath = '/groups/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupFields
     *
     * Get Fields
     *
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FieldGroupObject[]
     */
    public function getGroupFields($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getGroupFieldsWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getGroupFieldsWithHttpInfo
     *
     * Get Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FieldGroupObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupFieldsWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\FieldGroupObject[]';
        $request = $this->getGroupFieldsRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FieldGroupObject[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupFieldsAsync
     *
     * Get Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupFieldsAsync($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getGroupFieldsAsyncWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupFieldsAsyncWithHttpInfo
     *
     * Get Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupFieldsAsyncWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\FieldGroupObject[]';
        $request = $this->getGroupFieldsRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupFields'
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGroupFieldsRequest($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {

        $resourcePath = '/groups/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroups
     *
     * Get Groups
     *
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     * @param  float $skip users skipped (optional)
     * @param  float $limit maximum number of results to return (optional)
     * @param  float $order order ascending or descending (asc, desc) (optional)
     * @param  string $where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GroupObject[]
     */
    public function getGroups($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null, $skip = null, $limit = null, $order = null, $where = null)
    {
        list($response) = $this->getGroupsWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret, $skip, $limit, $order, $where);
        return $response;
    }

    /**
     * Operation getGroupsWithHttpInfo
     *
     * Get Groups
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     * @param  float $skip users skipped (optional)
     * @param  float $limit maximum number of results to return (optional)
     * @param  float $order order ascending or descending (asc, desc) (optional)
     * @param  string $where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GroupObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupsWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null, $skip = null, $limit = null, $order = null, $where = null)
    {
        $returnType = '\Swagger\Client\Model\GroupObject[]';
        $request = $this->getGroupsRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret, $skip, $limit, $order, $where);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GroupObject[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupsAsync
     *
     * Get Groups
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     * @param  float $skip users skipped (optional)
     * @param  float $limit maximum number of results to return (optional)
     * @param  float $order order ascending or descending (asc, desc) (optional)
     * @param  string $where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsAsync($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null, $skip = null, $limit = null, $order = null, $where = null)
    {
        return $this->getGroupsAsyncWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret, $skip, $limit, $order, $where)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupsAsyncWithHttpInfo
     *
     * Get Groups
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     * @param  float $skip users skipped (optional)
     * @param  float $limit maximum number of results to return (optional)
     * @param  float $order order ascending or descending (asc, desc) (optional)
     * @param  string $where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsAsyncWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null, $skip = null, $limit = null, $order = null, $where = null)
    {
        $returnType = '\Swagger\Client\Model\GroupObject[]';
        $request = $this->getGroupsRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret, $skip, $limit, $order, $where);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroups'
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     * @param  float $skip users skipped (optional)
     * @param  float $limit maximum number of results to return (optional)
     * @param  float $order order ascending or descending (asc, desc) (optional)
     * @param  string $where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGroupsRequest($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null, $skip = null, $limit = null, $order = null, $where = null)
    {

        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGroup
     *
     * Update Group
     *
     * @param  string $item A group name (required)
     * @param  \Swagger\Client\Model\UpdateGroupObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UpdatedGroupObject
     */
    public function updateGroup($item, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->updateGroupWithHttpInfo($item, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation updateGroupWithHttpInfo
     *
     * Update Group
     *
     * @param  string $item A group name (required)
     * @param  \Swagger\Client\Model\UpdateGroupObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UpdatedGroupObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGroupWithHttpInfo($item, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\UpdatedGroupObject';
        $request = $this->updateGroupRequest($item, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UpdatedGroupObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGroupAsync
     *
     * Update Group
     *
     * @param  string $item A group name (required)
     * @param  \Swagger\Client\Model\UpdateGroupObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupAsync($item, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->updateGroupAsyncWithHttpInfo($item, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGroupAsyncWithHttpInfo
     *
     * Update Group
     *
     * @param  string $item A group name (required)
     * @param  \Swagger\Client\Model\UpdateGroupObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupAsyncWithHttpInfo($item, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\UpdatedGroupObject';
        $request = $this->updateGroupRequest($item, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGroup'
     *
     * @param  string $item A group name (required)
     * @param  \Swagger\Client\Model\UpdateGroupObject $body Object to sign up a new EMS User in the EMS Server (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGroupRequest($item, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'item' is set
        if ($item === null || (is_array($item) && count($item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling updateGroup'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateGroup'
            );
        }

        $resourcePath = '/groups/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
