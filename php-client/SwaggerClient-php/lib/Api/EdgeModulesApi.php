<?php
/**
 * EdgeModulesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * EdgeModulesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeModulesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getModule
     *
     * Get Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleObject
     */
    public function getModule($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getModuleWithHttpInfo($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getModuleWithHttpInfo
     *
     * Get Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModuleWithHttpInfo($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleObject';
        $request = $this->getModuleRequest($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModuleAsync
     *
     * Get Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModuleAsync($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getModuleAsyncWithHttpInfo($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModuleAsyncWithHttpInfo
     *
     * Get Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModuleAsyncWithHttpInfo($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleObject';
        $request = $this->getModuleRequest($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModule'
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getModuleRequest($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'mname' is set
        if ($mname === null || (is_array($mname) && count($mname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mname when calling getModule'
            );
        }

        $resourcePath = '/edgemodules/{mname}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($mname !== null) {
            $resourcePath = str_replace(
                '{' . 'mname' . '}',
                ObjectSerializer::toPathValue($mname),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModuleResource
     *
     * Get EdgeModule Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleResourceObject
     */
    public function getModuleResource($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getModuleResourceWithHttpInfo($mname, $name, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getModuleResourceWithHttpInfo
     *
     * Get EdgeModule Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleResourceObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModuleResourceWithHttpInfo($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceObject';
        $request = $this->getModuleResourceRequest($mname, $name, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleResourceObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModuleResourceAsync
     *
     * Get EdgeModule Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModuleResourceAsync($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getModuleResourceAsyncWithHttpInfo($mname, $name, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModuleResourceAsyncWithHttpInfo
     *
     * Get EdgeModule Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModuleResourceAsyncWithHttpInfo($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceObject';
        $request = $this->getModuleResourceRequest($mname, $name, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModuleResource'
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getModuleResourceRequest($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'mname' is set
        if ($mname === null || (is_array($mname) && count($mname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mname when calling getModuleResource'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getModuleResource'
            );
        }

        $resourcePath = '/edgemodules/{mname}/resources/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($mname !== null) {
            $resourcePath = str_replace(
                '{' . 'mname' . '}',
                ObjectSerializer::toPathValue($mname),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModuleResources
     *
     * Get EdgeModule Resources
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleResourceObject[]
     */
    public function getModuleResources($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getModuleResourcesWithHttpInfo($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getModuleResourcesWithHttpInfo
     *
     * Get EdgeModule Resources
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleResourceObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModuleResourcesWithHttpInfo($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceObject[]';
        $request = $this->getModuleResourcesRequest($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleResourceObject[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModuleResourcesAsync
     *
     * Get EdgeModule Resources
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModuleResourcesAsync($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getModuleResourcesAsyncWithHttpInfo($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModuleResourcesAsyncWithHttpInfo
     *
     * Get EdgeModule Resources
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModuleResourcesAsyncWithHttpInfo($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceObject[]';
        $request = $this->getModuleResourcesRequest($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModuleResources'
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getModuleResourcesRequest($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'mname' is set
        if ($mname === null || (is_array($mname) && count($mname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mname when calling getModuleResources'
            );
        }

        $resourcePath = '/edgemodules/{mname}/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($mname !== null) {
            $resourcePath = str_replace(
                '{' . 'mname' . '}',
                ObjectSerializer::toPathValue($mname),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModules
     *
     * Get Module
     *
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleObject[]
     */
    public function getModules($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getModulesWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getModulesWithHttpInfo
     *
     * Get Module
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModulesWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleObject[]';
        $request = $this->getModulesRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleObject[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModulesAsync
     *
     * Get Module
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModulesAsync($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getModulesAsyncWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModulesAsyncWithHttpInfo
     *
     * Get Module
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModulesAsyncWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleObject[]';
        $request = $this->getModulesRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModules'
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getModulesRequest($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {

        $resourcePath = '/edgemodules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModulesFields
     *
     * Get Fields
     *
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FieldsEdgeModuleObject
     */
    public function getModulesFields($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getModulesFieldsWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getModulesFieldsWithHttpInfo
     *
     * Get Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FieldsEdgeModuleObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModulesFieldsWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\FieldsEdgeModuleObject';
        $request = $this->getModulesFieldsRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FieldsEdgeModuleObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModulesFieldsAsync
     *
     * Get Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModulesFieldsAsync($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getModulesFieldsAsyncWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModulesFieldsAsyncWithHttpInfo
     *
     * Get Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModulesFieldsAsyncWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\FieldsEdgeModuleObject';
        $request = $this->getModulesFieldsRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModulesFields'
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getModulesFieldsRequest($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {

        $resourcePath = '/edgemodules/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResources
     *
     * Get EdgeModules Resources
     *
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleResourceObject[]
     */
    public function getResources($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getResourcesWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getResourcesWithHttpInfo
     *
     * Get EdgeModules Resources
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleResourceObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getResourcesWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceObject[]';
        $request = $this->getResourcesRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleResourceObject[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResourcesAsync
     *
     * Get EdgeModules Resources
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResourcesAsync($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getResourcesAsyncWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResourcesAsyncWithHttpInfo
     *
     * Get EdgeModules Resources
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResourcesAsyncWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceObject[]';
        $request = $this->getResourcesRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResources'
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResourcesRequest($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {

        $resourcePath = '/edgemodules/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResourcesFields
     *
     * Get Resource Fields
     *
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FieldsEdgeModuleObject
     */
    public function getResourcesFields($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->getResourcesFieldsWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation getResourcesFieldsWithHttpInfo
     *
     * Get Resource Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FieldsEdgeModuleObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResourcesFieldsWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\FieldsEdgeModuleObject';
        $request = $this->getResourcesFieldsRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FieldsEdgeModuleObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResourcesFieldsAsync
     *
     * Get Resource Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResourcesFieldsAsync($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->getResourcesFieldsAsyncWithHttpInfo($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResourcesFieldsAsyncWithHttpInfo
     *
     * Get Resource Fields
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResourcesFieldsAsyncWithHttpInfo($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\FieldsEdgeModuleObject';
        $request = $this->getResourcesFieldsRequest($x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResourcesFields'
     *
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResourcesFieldsRequest($x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {

        $resourcePath = '/edgemodules/resources/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerModule
     *
     * Add Module
     *
     * @param  \Swagger\Client\Model\EdgeModuleAddObject $body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleAddedObject
     */
    public function registerModule($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->registerModuleWithHttpInfo($body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation registerModuleWithHttpInfo
     *
     * Add Module
     *
     * @param  \Swagger\Client\Model\EdgeModuleAddObject $body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleAddedObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerModuleWithHttpInfo($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleAddedObject';
        $request = $this->registerModuleRequest($body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleAddedObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation registerModuleAsync
     *
     * Add Module
     *
     * @param  \Swagger\Client\Model\EdgeModuleAddObject $body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerModuleAsync($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->registerModuleAsyncWithHttpInfo($body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerModuleAsyncWithHttpInfo
     *
     * Add Module
     *
     * @param  \Swagger\Client\Model\EdgeModuleAddObject $body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerModuleAsyncWithHttpInfo($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleAddedObject';
        $request = $this->registerModuleRequest($body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerModule'
     *
     * @param  \Swagger\Client\Model\EdgeModuleAddObject $body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function registerModuleRequest($body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling registerModule'
            );
        }

        $resourcePath = '/edgemodules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerModuleResource
     *
     * Add Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceAddObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleResourceAddedObject
     */
    public function registerModuleResource($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->registerModuleResourceWithHttpInfo($mname, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation registerModuleResourceWithHttpInfo
     *
     * Add Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceAddObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleResourceAddedObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerModuleResourceWithHttpInfo($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceAddedObject';
        $request = $this->registerModuleResourceRequest($mname, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleResourceAddedObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation registerModuleResourceAsync
     *
     * Add Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceAddObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerModuleResourceAsync($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->registerModuleResourceAsyncWithHttpInfo($mname, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerModuleResourceAsyncWithHttpInfo
     *
     * Add Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceAddObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerModuleResourceAsyncWithHttpInfo($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceAddedObject';
        $request = $this->registerModuleResourceRequest($mname, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerModuleResource'
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceAddObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function registerModuleResourceRequest($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'mname' is set
        if ($mname === null || (is_array($mname) && count($mname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mname when calling registerModuleResource'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling registerModuleResource'
            );
        }

        $resourcePath = '/edgemodules/{mname}/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($mname !== null) {
            $resourcePath = str_replace(
                '{' . 'mname' . '}',
                ObjectSerializer::toPathValue($mname),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unregisterModule
     *
     * Delete Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unregisterModule($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $this->unregisterModuleWithHttpInfo($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
    }

    /**
     * Operation unregisterModuleWithHttpInfo
     *
     * Delete Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unregisterModuleWithHttpInfo($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '';
        $request = $this->unregisterModuleRequest($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation unregisterModuleAsync
     *
     * Delete Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unregisterModuleAsync($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->unregisterModuleAsyncWithHttpInfo($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unregisterModuleAsyncWithHttpInfo
     *
     * Delete Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unregisterModuleAsyncWithHttpInfo($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '';
        $request = $this->unregisterModuleRequest($mname, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unregisterModule'
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unregisterModuleRequest($mname, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'mname' is set
        if ($mname === null || (is_array($mname) && count($mname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mname when calling unregisterModule'
            );
        }

        $resourcePath = '/edgemodules/{mname}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($mname !== null) {
            $resourcePath = str_replace(
                '{' . 'mname' . '}',
                ObjectSerializer::toPathValue($mname),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unregisterModuleResource
     *
     * Delete Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unregisterModuleResource($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $this->unregisterModuleResourceWithHttpInfo($mname, $name, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
    }

    /**
     * Operation unregisterModuleResourceWithHttpInfo
     *
     * Delete Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unregisterModuleResourceWithHttpInfo($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '';
        $request = $this->unregisterModuleResourceRequest($mname, $name, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation unregisterModuleResourceAsync
     *
     * Delete Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unregisterModuleResourceAsync($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->unregisterModuleResourceAsyncWithHttpInfo($mname, $name, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unregisterModuleResourceAsyncWithHttpInfo
     *
     * Delete Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unregisterModuleResourceAsyncWithHttpInfo($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '';
        $request = $this->unregisterModuleResourceRequest($mname, $name, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unregisterModuleResource'
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unregisterModuleResourceRequest($mname, $name, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'mname' is set
        if ($mname === null || (is_array($mname) && count($mname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mname when calling unregisterModuleResource'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling unregisterModuleResource'
            );
        }

        $resourcePath = '/edgemodules/{mname}/resources/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($mname !== null) {
            $resourcePath = str_replace(
                '{' . 'mname' . '}',
                ObjectSerializer::toPathValue($mname),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateModule
     *
     * Update Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleUpdatedObject
     */
    public function updateModule($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->updateModuleWithHttpInfo($mname, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation updateModuleWithHttpInfo
     *
     * Update Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleUpdatedObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModuleWithHttpInfo($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleUpdatedObject';
        $request = $this->updateModuleRequest($mname, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleUpdatedObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateModuleAsync
     *
     * Update Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModuleAsync($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->updateModuleAsyncWithHttpInfo($mname, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateModuleAsyncWithHttpInfo
     *
     * Update Module
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModuleAsyncWithHttpInfo($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleUpdatedObject';
        $request = $this->updateModuleRequest($mname, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateModule'
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  \Swagger\Client\Model\EdgeModuleUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateModuleRequest($mname, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'mname' is set
        if ($mname === null || (is_array($mname) && count($mname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mname when calling updateModule'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateModule'
            );
        }

        $resourcePath = '/edgemodules/{mname}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($mname !== null) {
            $resourcePath = str_replace(
                '{' . 'mname' . '}',
                ObjectSerializer::toPathValue($mname),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateModuleResource
     *
     * Update Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdgeModuleResourceUpdatedObject
     */
    public function updateModuleResource($mname, $name, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        list($response) = $this->updateModuleResourceWithHttpInfo($mname, $name, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);
        return $response;
    }

    /**
     * Operation updateModuleResourceWithHttpInfo
     *
     * Update Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdgeModuleResourceUpdatedObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModuleResourceWithHttpInfo($mname, $name, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceUpdatedObject';
        $request = $this->updateModuleResourceRequest($mname, $name, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdgeModuleResourceUpdatedObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateModuleResourceAsync
     *
     * Update Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModuleResourceAsync($mname, $name, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        return $this->updateModuleResourceAsyncWithHttpInfo($mname, $name, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateModuleResourceAsyncWithHttpInfo
     *
     * Update Module Resource
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModuleResourceAsyncWithHttpInfo($mname, $name, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        $returnType = '\Swagger\Client\Model\EdgeModuleResourceUpdatedObject';
        $request = $this->updateModuleResourceRequest($mname, $name, $body, $x_embarcadero_application_id, $x_embarcadero_app_secret, $x_embarcadero_master_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateModuleResource'
     *
     * @param  string $mname Is the unique EMS EdgeModule identifier (required)
     * @param  string $name Is the unique EMS EdgeModule Resource name (required)
     * @param  \Swagger\Client\Model\EdgeModuleResourceUpdateObject $body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} (required)
     * @param  string $x_embarcadero_application_id (optional)
     * @param  string $x_embarcadero_app_secret (optional)
     * @param  string $x_embarcadero_master_secret (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateModuleResourceRequest($mname, $name, $body, $x_embarcadero_application_id = null, $x_embarcadero_app_secret = null, $x_embarcadero_master_secret = null)
    {
        // verify the required parameter 'mname' is set
        if ($mname === null || (is_array($mname) && count($mname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mname when calling updateModuleResource'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling updateModuleResource'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateModuleResource'
            );
        }

        $resourcePath = '/edgemodules/{mname}/resources/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_embarcadero_application_id !== null) {
            $headerParams['X-Embarcadero-Application-Id'] = ObjectSerializer::toHeaderValue($x_embarcadero_application_id);
        }
        // header params
        if ($x_embarcadero_app_secret !== null) {
            $headerParams['X-Embarcadero-App-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_app_secret);
        }
        // header params
        if ($x_embarcadero_master_secret !== null) {
            $headerParams['X-Embarcadero-Master-Secret'] = ObjectSerializer::toHeaderValue($x_embarcadero_master_secret);
        }

        // path params
        if ($mname !== null) {
            $resourcePath = str_replace(
                '{' . 'mname' . '}',
                ObjectSerializer::toPathValue($mname),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
