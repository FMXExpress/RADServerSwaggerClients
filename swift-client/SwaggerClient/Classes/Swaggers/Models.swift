// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [ChannelName]
            Decoders.addDecoder(clazz: [ChannelName].self) { (source: AnyObject) -> [ChannelName] in
                return Decoders.decode(clazz: [ChannelName].self, source: source)
            }
            // Decoder for ChannelName
            Decoders.addDecoder(clazz: ChannelName.self) { (source: AnyObject) -> ChannelName in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ChannelName()
                return instance
            }


            // Decoder for [EdgeModuleAddObject]
            Decoders.addDecoder(clazz: [EdgeModuleAddObject].self) { (source: AnyObject) -> [EdgeModuleAddObject] in
                return Decoders.decode(clazz: [EdgeModuleAddObject].self, source: source)
            }
            // Decoder for EdgeModuleAddObject
            Decoders.addDecoder(clazz: EdgeModuleAddObject.self) { (source: AnyObject) -> EdgeModuleAddObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleAddObject()
                instance.modulename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modulename"])
                instance._protocol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocol"])
                instance.protocolprops = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocolprops"])
                return instance
            }


            // Decoder for [EdgeModuleAddedObject]
            Decoders.addDecoder(clazz: [EdgeModuleAddedObject].self) { (source: AnyObject) -> [EdgeModuleAddedObject] in
                return Decoders.decode(clazz: [EdgeModuleAddedObject].self, source: source)
            }
            // Decoder for EdgeModuleAddedObject
            Decoders.addDecoder(clazz: EdgeModuleAddedObject.self) { (source: AnyObject) -> EdgeModuleAddedObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleAddedObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.modulename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modulename"])
                return instance
            }


            // Decoder for [EdgeModuleObject]
            Decoders.addDecoder(clazz: [EdgeModuleObject].self) { (source: AnyObject) -> [EdgeModuleObject] in
                return Decoders.decode(clazz: [EdgeModuleObject].self, source: source)
            }
            // Decoder for EdgeModuleObject
            Decoders.addDecoder(clazz: EdgeModuleObject.self) { (source: AnyObject) -> EdgeModuleObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleObject()
                instance.modulename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modulename"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance._protocol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocol"])
                instance.protocolprops = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocolprops"])
                instance.meta = Decoders.decodeOptional(clazz: MetaEdgeModuleObject.self, source: sourceDictionary["_meta"])
                return instance
            }


            // Decoder for [EdgeModuleResourceAddObject]
            Decoders.addDecoder(clazz: [EdgeModuleResourceAddObject].self) { (source: AnyObject) -> [EdgeModuleResourceAddObject] in
                return Decoders.decode(clazz: [EdgeModuleResourceAddObject].self, source: source)
            }
            // Decoder for EdgeModuleResourceAddObject
            Decoders.addDecoder(clazz: EdgeModuleResourceAddObject.self) { (source: AnyObject) -> EdgeModuleResourceAddObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleResourceAddObject()
                instance.resourcename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resourcename"])
                return instance
            }


            // Decoder for [EdgeModuleResourceAddedObject]
            Decoders.addDecoder(clazz: [EdgeModuleResourceAddedObject].self) { (source: AnyObject) -> [EdgeModuleResourceAddedObject] in
                return Decoders.decode(clazz: [EdgeModuleResourceAddedObject].self, source: source)
            }
            // Decoder for EdgeModuleResourceAddedObject
            Decoders.addDecoder(clazz: EdgeModuleResourceAddedObject.self) { (source: AnyObject) -> EdgeModuleResourceAddedObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleResourceAddedObject()
                instance.resourcename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resourcename"])
                return instance
            }


            // Decoder for [EdgeModuleResourceObject]
            Decoders.addDecoder(clazz: [EdgeModuleResourceObject].self) { (source: AnyObject) -> [EdgeModuleResourceObject] in
                return Decoders.decode(clazz: [EdgeModuleResourceObject].self, source: source)
            }
            // Decoder for EdgeModuleResourceObject
            Decoders.addDecoder(clazz: EdgeModuleResourceObject.self) { (source: AnyObject) -> EdgeModuleResourceObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleResourceObject()
                instance.resourcename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resourcename"])
                instance.modulename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modulename"])
                instance.moduleid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["moduleid"])
                instance.meta = Decoders.decodeOptional(clazz: MetaEdgeModuleObject.self, source: sourceDictionary["_meta"])
                return instance
            }


            // Decoder for [EdgeModuleResourceUpdateObject]
            Decoders.addDecoder(clazz: [EdgeModuleResourceUpdateObject].self) { (source: AnyObject) -> [EdgeModuleResourceUpdateObject] in
                return Decoders.decode(clazz: [EdgeModuleResourceUpdateObject].self, source: source)
            }
            // Decoder for EdgeModuleResourceUpdateObject
            Decoders.addDecoder(clazz: EdgeModuleResourceUpdateObject.self) { (source: AnyObject) -> EdgeModuleResourceUpdateObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleResourceUpdateObject()
                instance.resourcename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resourcename"])
                return instance
            }


            // Decoder for [EdgeModuleResourceUpdatedObject]
            Decoders.addDecoder(clazz: [EdgeModuleResourceUpdatedObject].self) { (source: AnyObject) -> [EdgeModuleResourceUpdatedObject] in
                return Decoders.decode(clazz: [EdgeModuleResourceUpdatedObject].self, source: source)
            }
            // Decoder for EdgeModuleResourceUpdatedObject
            Decoders.addDecoder(clazz: EdgeModuleResourceUpdatedObject.self) { (source: AnyObject) -> EdgeModuleResourceUpdatedObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleResourceUpdatedObject()
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [EdgeModuleUpdateObject]
            Decoders.addDecoder(clazz: [EdgeModuleUpdateObject].self) { (source: AnyObject) -> [EdgeModuleUpdateObject] in
                return Decoders.decode(clazz: [EdgeModuleUpdateObject].self, source: source)
            }
            // Decoder for EdgeModuleUpdateObject
            Decoders.addDecoder(clazz: EdgeModuleUpdateObject.self) { (source: AnyObject) -> EdgeModuleUpdateObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleUpdateObject()
                instance.modulename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modulename"])
                instance._protocol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocol"])
                instance.protocolprops = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocolprops"])
                return instance
            }


            // Decoder for [EdgeModuleUpdatedObject]
            Decoders.addDecoder(clazz: [EdgeModuleUpdatedObject].self) { (source: AnyObject) -> [EdgeModuleUpdatedObject] in
                return Decoders.decode(clazz: [EdgeModuleUpdatedObject].self, source: source)
            }
            // Decoder for EdgeModuleUpdatedObject
            Decoders.addDecoder(clazz: EdgeModuleUpdatedObject.self) { (source: AnyObject) -> EdgeModuleUpdatedObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EdgeModuleUpdatedObject()
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [FieldGroupObject]
            Decoders.addDecoder(clazz: [FieldGroupObject].self) { (source: AnyObject) -> [FieldGroupObject] in
                return Decoders.decode(clazz: [FieldGroupObject].self, source: source)
            }
            // Decoder for FieldGroupObject
            Decoders.addDecoder(clazz: FieldGroupObject.self) { (source: AnyObject) -> FieldGroupObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FieldGroupObject()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.custom = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["custom"])
                return instance
            }


            // Decoder for [FieldInstallationObject]
            Decoders.addDecoder(clazz: [FieldInstallationObject].self) { (source: AnyObject) -> [FieldInstallationObject] in
                return Decoders.decode(clazz: [FieldInstallationObject].self, source: source)
            }
            // Decoder for FieldInstallationObject
            Decoders.addDecoder(clazz: FieldInstallationObject.self) { (source: AnyObject) -> FieldInstallationObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FieldInstallationObject()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.custom = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["custom"])
                return instance
            }


            // Decoder for [FieldObject]
            Decoders.addDecoder(clazz: [FieldObject].self) { (source: AnyObject) -> [FieldObject] in
                return Decoders.decode(clazz: [FieldObject].self, source: source)
            }
            // Decoder for FieldObject
            Decoders.addDecoder(clazz: FieldObject.self) { (source: AnyObject) -> FieldObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FieldObject()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.custom = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["custom"])
                return instance
            }


            // Decoder for [FieldObjectFields]
            Decoders.addDecoder(clazz: [FieldObjectFields].self) { (source: AnyObject) -> [FieldObjectFields] in
                return Decoders.decode(clazz: [FieldObjectFields].self, source: source)
            }
            // Decoder for FieldObjectFields
            Decoders.addDecoder(clazz: FieldObjectFields.self) { (source: AnyObject) -> FieldObjectFields in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FieldObjectFields()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [FieldsEdgeModuleObject]
            Decoders.addDecoder(clazz: [FieldsEdgeModuleObject].self) { (source: AnyObject) -> [FieldsEdgeModuleObject] in
                return Decoders.decode(clazz: [FieldsEdgeModuleObject].self, source: source)
            }
            // Decoder for FieldsEdgeModuleObject
            Decoders.addDecoder(clazz: FieldsEdgeModuleObject.self) { (source: AnyObject) -> FieldsEdgeModuleObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FieldsEdgeModuleObject()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.custom = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["custom"])
                return instance
            }


            // Decoder for [GroupAddObject]
            Decoders.addDecoder(clazz: [GroupAddObject].self) { (source: AnyObject) -> [GroupAddObject] in
                return Decoders.decode(clazz: [GroupAddObject].self, source: source)
            }
            // Decoder for GroupAddObject
            Decoders.addDecoder(clazz: GroupAddObject.self) { (source: AnyObject) -> GroupAddObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupAddObject()
                instance.groupname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["groupname"])
                return instance
            }


            // Decoder for [GroupName]
            Decoders.addDecoder(clazz: [GroupName].self) { (source: AnyObject) -> [GroupName] in
                return Decoders.decode(clazz: [GroupName].self, source: source)
            }
            // Decoder for GroupName
            Decoders.addDecoder(clazz: GroupName.self) { (source: AnyObject) -> GroupName in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupName()
                return instance
            }


            // Decoder for [GroupObject]
            Decoders.addDecoder(clazz: [GroupObject].self) { (source: AnyObject) -> [GroupObject] in
                return Decoders.decode(clazz: [GroupObject].self, source: source)
            }
            // Decoder for GroupObject
            Decoders.addDecoder(clazz: GroupObject.self) { (source: AnyObject) -> GroupObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupObject()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.meta = Decoders.decodeOptional(clazz: MetaGroupObject.self, source: sourceDictionary["_meta"])
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                return instance
            }


            // Decoder for [InstallationAddObject]
            Decoders.addDecoder(clazz: [InstallationAddObject].self) { (source: AnyObject) -> [InstallationAddObject] in
                return Decoders.decode(clazz: [InstallationAddObject].self, source: source)
            }
            // Decoder for InstallationAddObject
            Decoders.addDecoder(clazz: InstallationAddObject.self) { (source: AnyObject) -> InstallationAddObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InstallationAddObject()
                instance.deviceToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceToken"])
                instance.deviceType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceType"])
                instance.channels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["channels"])
                return instance
            }


            // Decoder for [InstallationAddedObject]
            Decoders.addDecoder(clazz: [InstallationAddedObject].self) { (source: AnyObject) -> [InstallationAddedObject] in
                return Decoders.decode(clazz: [InstallationAddedObject].self, source: source)
            }
            // Decoder for InstallationAddedObject
            Decoders.addDecoder(clazz: InstallationAddedObject.self) { (source: AnyObject) -> InstallationAddedObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InstallationAddedObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                return instance
            }


            // Decoder for [InstallationObject]
            Decoders.addDecoder(clazz: [InstallationObject].self) { (source: AnyObject) -> [InstallationObject] in
                return Decoders.decode(clazz: [InstallationObject].self, source: source)
            }
            // Decoder for InstallationObject
            Decoders.addDecoder(clazz: InstallationObject.self) { (source: AnyObject) -> InstallationObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InstallationObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.deviceToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceToken"])
                instance.deviceType = InstallationObject.DeviceType(rawValue: (sourceDictionary["deviceType"] as? String) ?? "") 
                instance.meta = Decoders.decodeOptional(clazz: MetaInstallationObject.self, source: sourceDictionary["_meta"])
                instance.channels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["channels"])
                return instance
            }


            // Decoder for [MetaEdgeModuleObject]
            Decoders.addDecoder(clazz: [MetaEdgeModuleObject].self) { (source: AnyObject) -> [MetaEdgeModuleObject] in
                return Decoders.decode(clazz: [MetaEdgeModuleObject].self, source: source)
            }
            // Decoder for MetaEdgeModuleObject
            Decoders.addDecoder(clazz: MetaEdgeModuleObject.self) { (source: AnyObject) -> MetaEdgeModuleObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MetaEdgeModuleObject()
                instance.creator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["creator"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"])
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [MetaGroupObject]
            Decoders.addDecoder(clazz: [MetaGroupObject].self) { (source: AnyObject) -> [MetaGroupObject] in
                return Decoders.decode(clazz: [MetaGroupObject].self, source: source)
            }
            // Decoder for MetaGroupObject
            Decoders.addDecoder(clazz: MetaGroupObject.self) { (source: AnyObject) -> MetaGroupObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MetaGroupObject()
                instance.creator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["creator"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"])
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [MetaInstallationObject]
            Decoders.addDecoder(clazz: [MetaInstallationObject].self) { (source: AnyObject) -> [MetaInstallationObject] in
                return Decoders.decode(clazz: [MetaInstallationObject].self, source: source)
            }
            // Decoder for MetaInstallationObject
            Decoders.addDecoder(clazz: MetaInstallationObject.self) { (source: AnyObject) -> MetaInstallationObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MetaInstallationObject()
                instance.creator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["creator"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"])
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [MetaObject]
            Decoders.addDecoder(clazz: [MetaObject].self) { (source: AnyObject) -> [MetaObject] in
                return Decoders.decode(clazz: [MetaObject].self, source: source)
            }
            // Decoder for MetaObject
            Decoders.addDecoder(clazz: MetaObject.self) { (source: AnyObject) -> MetaObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MetaObject()
                instance.creator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["creator"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"])
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [PushDataObject]
            Decoders.addDecoder(clazz: [PushDataObject].self) { (source: AnyObject) -> [PushDataObject] in
                return Decoders.decode(clazz: [PushDataObject].self, source: source)
            }
            // Decoder for PushDataObject
            Decoders.addDecoder(clazz: PushDataObject.self) { (source: AnyObject) -> PushDataObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PushDataObject()
                instance.gcm = Decoders.decodeOptional(clazz: PushDataObjectGcm.self, source: sourceDictionary["gcm"])
                instance.aps = Decoders.decodeOptional(clazz: PushDataObjectAps.self, source: sourceDictionary["aps"])
                instance.extras = Decoders.decodeOptional(clazz: PushDataObjectExtras.self, source: sourceDictionary["extras"])
                return instance
            }


            // Decoder for [PushDataObjectAps]
            Decoders.addDecoder(clazz: [PushDataObjectAps].self) { (source: AnyObject) -> [PushDataObjectAps] in
                return Decoders.decode(clazz: [PushDataObjectAps].self, source: source)
            }
            // Decoder for PushDataObjectAps
            Decoders.addDecoder(clazz: PushDataObjectAps.self) { (source: AnyObject) -> PushDataObjectAps in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PushDataObjectAps()
                instance.alert = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alert"])
                instance.badge = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["badge"])
                instance.sound = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sound"])
                return instance
            }


            // Decoder for [PushDataObjectExtras]
            Decoders.addDecoder(clazz: [PushDataObjectExtras].self) { (source: AnyObject) -> [PushDataObjectExtras] in
                return Decoders.decode(clazz: [PushDataObjectExtras].self, source: source)
            }
            // Decoder for PushDataObjectExtras
            Decoders.addDecoder(clazz: PushDataObjectExtras.self) { (source: AnyObject) -> PushDataObjectExtras in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PushDataObjectExtras()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [PushDataObjectGcm]
            Decoders.addDecoder(clazz: [PushDataObjectGcm].self) { (source: AnyObject) -> [PushDataObjectGcm] in
                return Decoders.decode(clazz: [PushDataObjectGcm].self, source: source)
            }
            // Decoder for PushDataObjectGcm
            Decoders.addDecoder(clazz: PushDataObjectGcm.self) { (source: AnyObject) -> PushDataObjectGcm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PushDataObjectGcm()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                return instance
            }


            // Decoder for [PushObject]
            Decoders.addDecoder(clazz: [PushObject].self) { (source: AnyObject) -> [PushObject] in
                return Decoders.decode(clazz: [PushObject].self, source: source)
            }
            // Decoder for PushObject
            Decoders.addDecoder(clazz: PushObject.self) { (source: AnyObject) -> PushObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PushObject()
                instance.data = Decoders.decodeOptional(clazz: PushDataObject.self, source: sourceDictionary["data"])
                instance.channels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["channels"])
                instance._where = Decoders.decodeOptional(clazz: PushWhereObject.self, source: sourceDictionary["where"])
                return instance
            }


            // Decoder for [PushWhereObject]
            Decoders.addDecoder(clazz: [PushWhereObject].self) { (source: AnyObject) -> [PushWhereObject] in
                return Decoders.decode(clazz: [PushWhereObject].self, source: source)
            }
            // Decoder for PushWhereObject
            Decoders.addDecoder(clazz: PushWhereObject.self) { (source: AnyObject) -> PushWhereObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PushWhereObject()
                instance.deviceType = PushWhereObject.DeviceType(rawValue: (sourceDictionary["deviceType"] as? String) ?? "") 
                instance.deviceToken = Decoders.decodeOptional(clazz: PushWhereObjectDeviceToken.self, source: sourceDictionary["deviceToken"])
                return instance
            }


            // Decoder for [PushWhereObjectDeviceToken]
            Decoders.addDecoder(clazz: [PushWhereObjectDeviceToken].self) { (source: AnyObject) -> [PushWhereObjectDeviceToken] in
                return Decoders.decode(clazz: [PushWhereObjectDeviceToken].self, source: source)
            }
            // Decoder for PushWhereObjectDeviceToken
            Decoders.addDecoder(clazz: PushWhereObjectDeviceToken.self) { (source: AnyObject) -> PushWhereObjectDeviceToken in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PushWhereObjectDeviceToken()
                instance._in = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["$in"])
                return instance
            }


            // Decoder for [UpdateGroupObject]
            Decoders.addDecoder(clazz: [UpdateGroupObject].self) { (source: AnyObject) -> [UpdateGroupObject] in
                return Decoders.decode(clazz: [UpdateGroupObject].self, source: source)
            }
            // Decoder for UpdateGroupObject
            Decoders.addDecoder(clazz: UpdateGroupObject.self) { (source: AnyObject) -> UpdateGroupObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UpdateGroupObject()
                instance.fieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldName"])
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                return instance
            }


            // Decoder for [UpdateInstallationObject]
            Decoders.addDecoder(clazz: [UpdateInstallationObject].self) { (source: AnyObject) -> [UpdateInstallationObject] in
                return Decoders.decode(clazz: [UpdateInstallationObject].self, source: source)
            }
            // Decoder for UpdateInstallationObject
            Decoders.addDecoder(clazz: UpdateInstallationObject.self) { (source: AnyObject) -> UpdateInstallationObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UpdateInstallationObject()
                instance.channels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["channels"])
                return instance
            }


            // Decoder for [UpdateObject]
            Decoders.addDecoder(clazz: [UpdateObject].self) { (source: AnyObject) -> [UpdateObject] in
                return Decoders.decode(clazz: [UpdateObject].self, source: source)
            }
            // Decoder for UpdateObject
            Decoders.addDecoder(clazz: UpdateObject.self) { (source: AnyObject) -> UpdateObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UpdateObject()
                instance.fieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldName"])
                return instance
            }


            // Decoder for [UpdatedGroupObject]
            Decoders.addDecoder(clazz: [UpdatedGroupObject].self) { (source: AnyObject) -> [UpdatedGroupObject] in
                return Decoders.decode(clazz: [UpdatedGroupObject].self, source: source)
            }
            // Decoder for UpdatedGroupObject
            Decoders.addDecoder(clazz: UpdatedGroupObject.self) { (source: AnyObject) -> UpdatedGroupObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UpdatedGroupObject()
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [UpdatedInstallationObject]
            Decoders.addDecoder(clazz: [UpdatedInstallationObject].self) { (source: AnyObject) -> [UpdatedInstallationObject] in
                return Decoders.decode(clazz: [UpdatedInstallationObject].self, source: source)
            }
            // Decoder for UpdatedInstallationObject
            Decoders.addDecoder(clazz: UpdatedInstallationObject.self) { (source: AnyObject) -> UpdatedInstallationObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UpdatedInstallationObject()
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [UpdatedObject]
            Decoders.addDecoder(clazz: [UpdatedObject].self) { (source: AnyObject) -> [UpdatedObject] in
                return Decoders.decode(clazz: [UpdatedObject].self, source: source)
            }
            // Decoder for UpdatedObject
            Decoders.addDecoder(clazz: UpdatedObject.self) { (source: AnyObject) -> UpdatedObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UpdatedObject()
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [UserCredentialsObject]
            Decoders.addDecoder(clazz: [UserCredentialsObject].self) { (source: AnyObject) -> [UserCredentialsObject] in
                return Decoders.decode(clazz: [UserCredentialsObject].self, source: source)
            }
            // Decoder for UserCredentialsObject
            Decoders.addDecoder(clazz: UserCredentialsObject.self) { (source: AnyObject) -> UserCredentialsObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserCredentialsObject()
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                return instance
            }


            // Decoder for [UserObject]
            Decoders.addDecoder(clazz: [UserObject].self) { (source: AnyObject) -> [UserObject] in
                return Decoders.decode(clazz: [UserObject].self, source: source)
            }
            // Decoder for UserObject
            Decoders.addDecoder(clazz: UserObject.self) { (source: AnyObject) -> UserObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.meta = Decoders.decodeOptional(clazz: MetaObject.self, source: sourceDictionary["_meta"])
                return instance
            }


            // Decoder for [UserSignUpResponseObject]
            Decoders.addDecoder(clazz: [UserSignUpResponseObject].self) { (source: AnyObject) -> [UserSignUpResponseObject] in
                return Decoders.decode(clazz: [UserSignUpResponseObject].self, source: source)
            }
            // Decoder for UserSignUpResponseObject
            Decoders.addDecoder(clazz: UserSignUpResponseObject.self) { (source: AnyObject) -> UserSignUpResponseObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserSignUpResponseObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.sessionToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sessionToken"])
                return instance
            }


            // Decoder for [UserTokenObject]
            Decoders.addDecoder(clazz: [UserTokenObject].self) { (source: AnyObject) -> [UserTokenObject] in
                return Decoders.decode(clazz: [UserTokenObject].self, source: source)
            }
            // Decoder for UserTokenObject
            Decoders.addDecoder(clazz: UserTokenObject.self) { (source: AnyObject) -> UserTokenObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserTokenObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.meta = Decoders.decodeOptional(clazz: MetaObject.self, source: sourceDictionary["_meta"])
                instance.sessiontoken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sessiontoken"])
                return instance
            }


            // Decoder for [UseridObject]
            Decoders.addDecoder(clazz: [UseridObject].self) { (source: AnyObject) -> [UseridObject] in
                return Decoders.decode(clazz: [UseridObject].self, source: source)
            }
            // Decoder for UseridObject
            Decoders.addDecoder(clazz: UseridObject.self) { (source: AnyObject) -> UseridObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UseridObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                return instance
            }


            // Decoder for [VersionObject]
            Decoders.addDecoder(clazz: [VersionObject].self) { (source: AnyObject) -> [VersionObject] in
                return Decoders.decode(clazz: [VersionObject].self, source: source)
            }
            // Decoder for VersionObject
            Decoders.addDecoder(clazz: VersionObject.self) { (source: AnyObject) -> VersionObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VersionObject()
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                instance.server = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["server"])
                return instance
            }
        }
    }
}
