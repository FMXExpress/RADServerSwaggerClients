/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ChannelName".equalsIgnoreCase(className)) {
      return new TypeToken<List<ChannelName>>(){}.getType();
    }
    
    if ("EdgeModuleAddObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleAddObject>>(){}.getType();
    }
    
    if ("EdgeModuleAddedObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleAddedObject>>(){}.getType();
    }
    
    if ("EdgeModuleObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleObject>>(){}.getType();
    }
    
    if ("EdgeModuleResourceAddObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleResourceAddObject>>(){}.getType();
    }
    
    if ("EdgeModuleResourceAddedObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleResourceAddedObject>>(){}.getType();
    }
    
    if ("EdgeModuleResourceObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleResourceObject>>(){}.getType();
    }
    
    if ("EdgeModuleResourceUpdateObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleResourceUpdateObject>>(){}.getType();
    }
    
    if ("EdgeModuleResourceUpdatedObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleResourceUpdatedObject>>(){}.getType();
    }
    
    if ("EdgeModuleUpdateObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleUpdateObject>>(){}.getType();
    }
    
    if ("EdgeModuleUpdatedObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<EdgeModuleUpdatedObject>>(){}.getType();
    }
    
    if ("FieldGroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<FieldGroupObject>>(){}.getType();
    }
    
    if ("FieldInstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<FieldInstallationObject>>(){}.getType();
    }
    
    if ("FieldObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<FieldObject>>(){}.getType();
    }
    
    if ("FieldObjectFields".equalsIgnoreCase(className)) {
      return new TypeToken<List<FieldObjectFields>>(){}.getType();
    }
    
    if ("FieldsEdgeModuleObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<FieldsEdgeModuleObject>>(){}.getType();
    }
    
    if ("GroupAddObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupAddObject>>(){}.getType();
    }
    
    if ("GroupName".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupName>>(){}.getType();
    }
    
    if ("GroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupObject>>(){}.getType();
    }
    
    if ("InstallationAddObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<InstallationAddObject>>(){}.getType();
    }
    
    if ("InstallationAddedObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<InstallationAddedObject>>(){}.getType();
    }
    
    if ("InstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<InstallationObject>>(){}.getType();
    }
    
    if ("MetaEdgeModuleObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<MetaEdgeModuleObject>>(){}.getType();
    }
    
    if ("MetaGroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<MetaGroupObject>>(){}.getType();
    }
    
    if ("MetaInstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<MetaInstallationObject>>(){}.getType();
    }
    
    if ("MetaObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<MetaObject>>(){}.getType();
    }
    
    if ("PushDataObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<PushDataObject>>(){}.getType();
    }
    
    if ("PushDataObjectAps".equalsIgnoreCase(className)) {
      return new TypeToken<List<PushDataObjectAps>>(){}.getType();
    }
    
    if ("PushDataObjectExtras".equalsIgnoreCase(className)) {
      return new TypeToken<List<PushDataObjectExtras>>(){}.getType();
    }
    
    if ("PushDataObjectGcm".equalsIgnoreCase(className)) {
      return new TypeToken<List<PushDataObjectGcm>>(){}.getType();
    }
    
    if ("PushObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<PushObject>>(){}.getType();
    }
    
    if ("PushWhereObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<PushWhereObject>>(){}.getType();
    }
    
    if ("PushWhereObjectDeviceToken".equalsIgnoreCase(className)) {
      return new TypeToken<List<PushWhereObjectDeviceToken>>(){}.getType();
    }
    
    if ("UpdateGroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateGroupObject>>(){}.getType();
    }
    
    if ("UpdateInstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateInstallationObject>>(){}.getType();
    }
    
    if ("UpdateObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateObject>>(){}.getType();
    }
    
    if ("UpdatedGroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdatedGroupObject>>(){}.getType();
    }
    
    if ("UpdatedInstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdatedInstallationObject>>(){}.getType();
    }
    
    if ("UpdatedObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdatedObject>>(){}.getType();
    }
    
    if ("UserCredentialsObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserCredentialsObject>>(){}.getType();
    }
    
    if ("UserObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserObject>>(){}.getType();
    }
    
    if ("UserSignUpResponseObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserSignUpResponseObject>>(){}.getType();
    }
    
    if ("UserTokenObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserTokenObject>>(){}.getType();
    }
    
    if ("UseridObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<UseridObject>>(){}.getType();
    }
    
    if ("VersionObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<VersionObject>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ChannelName".equalsIgnoreCase(className)) {
      return new TypeToken<ChannelName>(){}.getType();
    }
    
    if ("EdgeModuleAddObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleAddObject>(){}.getType();
    }
    
    if ("EdgeModuleAddedObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleAddedObject>(){}.getType();
    }
    
    if ("EdgeModuleObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleObject>(){}.getType();
    }
    
    if ("EdgeModuleResourceAddObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleResourceAddObject>(){}.getType();
    }
    
    if ("EdgeModuleResourceAddedObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleResourceAddedObject>(){}.getType();
    }
    
    if ("EdgeModuleResourceObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleResourceObject>(){}.getType();
    }
    
    if ("EdgeModuleResourceUpdateObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleResourceUpdateObject>(){}.getType();
    }
    
    if ("EdgeModuleResourceUpdatedObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleResourceUpdatedObject>(){}.getType();
    }
    
    if ("EdgeModuleUpdateObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleUpdateObject>(){}.getType();
    }
    
    if ("EdgeModuleUpdatedObject".equalsIgnoreCase(className)) {
      return new TypeToken<EdgeModuleUpdatedObject>(){}.getType();
    }
    
    if ("FieldGroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<FieldGroupObject>(){}.getType();
    }
    
    if ("FieldInstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<FieldInstallationObject>(){}.getType();
    }
    
    if ("FieldObject".equalsIgnoreCase(className)) {
      return new TypeToken<FieldObject>(){}.getType();
    }
    
    if ("FieldObjectFields".equalsIgnoreCase(className)) {
      return new TypeToken<FieldObjectFields>(){}.getType();
    }
    
    if ("FieldsEdgeModuleObject".equalsIgnoreCase(className)) {
      return new TypeToken<FieldsEdgeModuleObject>(){}.getType();
    }
    
    if ("GroupAddObject".equalsIgnoreCase(className)) {
      return new TypeToken<GroupAddObject>(){}.getType();
    }
    
    if ("GroupName".equalsIgnoreCase(className)) {
      return new TypeToken<GroupName>(){}.getType();
    }
    
    if ("GroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<GroupObject>(){}.getType();
    }
    
    if ("InstallationAddObject".equalsIgnoreCase(className)) {
      return new TypeToken<InstallationAddObject>(){}.getType();
    }
    
    if ("InstallationAddedObject".equalsIgnoreCase(className)) {
      return new TypeToken<InstallationAddedObject>(){}.getType();
    }
    
    if ("InstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<InstallationObject>(){}.getType();
    }
    
    if ("MetaEdgeModuleObject".equalsIgnoreCase(className)) {
      return new TypeToken<MetaEdgeModuleObject>(){}.getType();
    }
    
    if ("MetaGroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<MetaGroupObject>(){}.getType();
    }
    
    if ("MetaInstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<MetaInstallationObject>(){}.getType();
    }
    
    if ("MetaObject".equalsIgnoreCase(className)) {
      return new TypeToken<MetaObject>(){}.getType();
    }
    
    if ("PushDataObject".equalsIgnoreCase(className)) {
      return new TypeToken<PushDataObject>(){}.getType();
    }
    
    if ("PushDataObjectAps".equalsIgnoreCase(className)) {
      return new TypeToken<PushDataObjectAps>(){}.getType();
    }
    
    if ("PushDataObjectExtras".equalsIgnoreCase(className)) {
      return new TypeToken<PushDataObjectExtras>(){}.getType();
    }
    
    if ("PushDataObjectGcm".equalsIgnoreCase(className)) {
      return new TypeToken<PushDataObjectGcm>(){}.getType();
    }
    
    if ("PushObject".equalsIgnoreCase(className)) {
      return new TypeToken<PushObject>(){}.getType();
    }
    
    if ("PushWhereObject".equalsIgnoreCase(className)) {
      return new TypeToken<PushWhereObject>(){}.getType();
    }
    
    if ("PushWhereObjectDeviceToken".equalsIgnoreCase(className)) {
      return new TypeToken<PushWhereObjectDeviceToken>(){}.getType();
    }
    
    if ("UpdateGroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateGroupObject>(){}.getType();
    }
    
    if ("UpdateInstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateInstallationObject>(){}.getType();
    }
    
    if ("UpdateObject".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateObject>(){}.getType();
    }
    
    if ("UpdatedGroupObject".equalsIgnoreCase(className)) {
      return new TypeToken<UpdatedGroupObject>(){}.getType();
    }
    
    if ("UpdatedInstallationObject".equalsIgnoreCase(className)) {
      return new TypeToken<UpdatedInstallationObject>(){}.getType();
    }
    
    if ("UpdatedObject".equalsIgnoreCase(className)) {
      return new TypeToken<UpdatedObject>(){}.getType();
    }
    
    if ("UserCredentialsObject".equalsIgnoreCase(className)) {
      return new TypeToken<UserCredentialsObject>(){}.getType();
    }
    
    if ("UserObject".equalsIgnoreCase(className)) {
      return new TypeToken<UserObject>(){}.getType();
    }
    
    if ("UserSignUpResponseObject".equalsIgnoreCase(className)) {
      return new TypeToken<UserSignUpResponseObject>(){}.getType();
    }
    
    if ("UserTokenObject".equalsIgnoreCase(className)) {
      return new TypeToken<UserTokenObject>(){}.getType();
    }
    
    if ("UseridObject".equalsIgnoreCase(className)) {
      return new TypeToken<UseridObject>(){}.getType();
    }
    
    if ("VersionObject".equalsIgnoreCase(className)) {
      return new TypeToken<VersionObject>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
