/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import io.swagger.client.model.ChannelName;
import io.swagger.client.model.FieldInstallationObject;
import io.swagger.client.model.InstallationAddObject;
import io.swagger.client.model.InstallationAddedObject;
import io.swagger.client.model.InstallationObject;
import io.swagger.client.model.UpdateInstallationObject;
import io.swagger.client.model.UpdatedInstallationObject;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class InstallationsApi {
  String basePath = "http://localhost:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add Installation
  *  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
   * @param body Object to sign up a new EMS User in the EMS Server
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return InstallationAddedObject
  */
  public InstallationAddedObject addInstallation (InstallationAddObject body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling addInstallation",
        new ApiException(400, "Missing the required parameter 'body' when calling addInstallation"));
    }

    // create path and map variables
    String path = "/installations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InstallationAddedObject) ApiInvoker.deserialize(localVarResponse, "", InstallationAddedObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Installation
   *  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
   * @param body Object to sign up a new EMS User in the EMS Server   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void addInstallation (InstallationAddObject body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<InstallationAddedObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling addInstallation",
        new ApiException(400, "Missing the required parameter 'body' when calling addInstallation"));
    }

    // create path and map variables
    String path = "/installations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InstallationAddedObject) ApiInvoker.deserialize(localVarResponse,  "", InstallationAddedObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Installation
  *  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
   * @param id A Installation ID
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void deleteInstallation (String id, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteInstallation",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteInstallation"));
    }

    // create path and map variables
    String path = "/installations/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Installation
   *  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
   * @param id A Installation ID   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void deleteInstallation (String id, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteInstallation",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteInstallation"));
    }

    // create path and map variables
    String path = "/installations/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Installation Channels
  *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return List<ChannelName>
  */
  public List<ChannelName> getChannels (String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/installations/channels";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ChannelName>) ApiInvoker.deserialize(localVarResponse, "array", ChannelName.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Installation Channels
   *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void getChannels (String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<List<ChannelName>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/installations/channels".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ChannelName>) ApiInvoker.deserialize(localVarResponse,  "array", ChannelName.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Installation
  *  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
   * @param id A Installation ID
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return InstallationObject
  */
  public InstallationObject getInstallation (String id, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getInstallation",
        new ApiException(400, "Missing the required parameter 'id' when calling getInstallation"));
    }

    // create path and map variables
    String path = "/installations/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InstallationObject) ApiInvoker.deserialize(localVarResponse, "", InstallationObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Installation
   *  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
   * @param id A Installation ID   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void getInstallation (String id, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<InstallationObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getInstallation",
        new ApiException(400, "Missing the required parameter 'id' when calling getInstallation"));
    }

    // create path and map variables
    String path = "/installations/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InstallationObject) ApiInvoker.deserialize(localVarResponse,  "", InstallationObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Fields
  *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return List<FieldInstallationObject>
  */
  public List<FieldInstallationObject> getInstallationFields (String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/installations/fields";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<FieldInstallationObject>) ApiInvoker.deserialize(localVarResponse, "array", FieldInstallationObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Fields
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void getInstallationFields (String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<List<FieldInstallationObject>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/installations/fields".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<FieldInstallationObject>) ApiInvoker.deserialize(localVarResponse,  "array", FieldInstallationObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Installations
  *  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @param skip users skipped
   * @param limit maximum number of results to return
   * @param order order ascending or descending (asc, desc)
   * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
   * @return List<InstallationObject>
  */
  public List<InstallationObject> getInstallations (String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, BigDecimal skip, BigDecimal limit, BigDecimal order, String where) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/installations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "where", where));
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<InstallationObject>) ApiInvoker.deserialize(localVarResponse, "array", InstallationObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Installations
   *  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret    * @param skip users skipped   * @param limit maximum number of results to return   * @param order order ascending or descending (asc, desc)   * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
  */
  public void getInstallations (String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, BigDecimal skip, BigDecimal limit, BigDecimal order, String where, final Response.Listener<List<InstallationObject>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/installations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "where", where));

    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<InstallationObject>) ApiInvoker.deserialize(localVarResponse,  "array", InstallationObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Installation
  *  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
   * @param id A Installation ID
   * @param body Installation fields to update
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return UpdatedInstallationObject
  */
  public UpdatedInstallationObject updateInstallation (String id, UpdateInstallationObject body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateInstallation",
        new ApiException(400, "Missing the required parameter 'id' when calling updateInstallation"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateInstallation",
        new ApiException(400, "Missing the required parameter 'body' when calling updateInstallation"));
    }

    // create path and map variables
    String path = "/installations/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdatedInstallationObject) ApiInvoker.deserialize(localVarResponse, "", UpdatedInstallationObject.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Installation
   *  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
   * @param id A Installation ID   * @param body Installation fields to update   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void updateInstallation (String id, UpdateInstallationObject body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<UpdatedInstallationObject> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateInstallation",
        new ApiException(400, "Missing the required parameter 'id' when calling updateInstallation"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateInstallation",
        new ApiException(400, "Missing the required parameter 'body' when calling updateInstallation"));
    }

    // create path and map variables
    String path = "/installations/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdatedInstallationObject) ApiInvoker.deserialize(localVarResponse,  "", UpdatedInstallationObject.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
