/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class EdgeModulesInvokersApi {
  String basePath = "http://localhost:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Invoke Resource Delete Method
  * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void deleteResourceEndpoint (String mname, String rname, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling deleteResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling deleteResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling deleteResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling deleteResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource Delete Method
   * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void deleteResourceEndpoint (String mname, String rname, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling deleteResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling deleteResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling deleteResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling deleteResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource/_* Delete Method
  * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param wildcard Is the Wild card part of the URL
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void deleteResourceEndpointItem (String mname, String rname, String wildcard, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling deleteResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling deleteResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling deleteResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling deleteResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling deleteResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling deleteResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource/_* Delete Method
   * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param wildcard Is the Wild card part of the URL   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void deleteResourceEndpointItem (String mname, String rname, String wildcard, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling deleteResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling deleteResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling deleteResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling deleteResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling deleteResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling deleteResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource Get Method
  * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void getResourceEndpoint (String mname, String rname, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling getResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling getResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling getResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling getResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource Get Method
   * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void getResourceEndpoint (String mname, String rname, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling getResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling getResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling getResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling getResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource/_* Get Method
  * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param wildcard Is the Wild card part of the URL
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void getResourceEndpointItem (String mname, String rname, String wildcard, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling getResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling getResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling getResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling getResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling getResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling getResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource/_* Get Method
   * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param wildcard Is the Wild card part of the URL   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void getResourceEndpointItem (String mname, String rname, String wildcard, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling getResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling getResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling getResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling getResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling getResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling getResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource Patch Method
  * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param body Body Object
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void patchResourceEndpoint (String mname, String rname, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling patchResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling patchResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling patchResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling patchResourceEndpoint"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling patchResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'body' when calling patchResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource Patch Method
   * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param body Body Object   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void patchResourceEndpoint (String mname, String rname, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling patchResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling patchResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling patchResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling patchResourceEndpoint"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling patchResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'body' when calling patchResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource/_* Patch Method
  * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param wildcard Is the Wild card part of the URL
   * @param body Body Object
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void patchResourceEndpointItem (String mname, String rname, String wildcard, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling patchResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling patchResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling patchResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling patchResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling patchResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling patchResourceEndpointItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling patchResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'body' when calling patchResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource/_* Patch Method
   * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param wildcard Is the Wild card part of the URL   * @param body Body Object   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void patchResourceEndpointItem (String mname, String rname, String wildcard, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling patchResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling patchResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling patchResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling patchResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling patchResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling patchResourceEndpointItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling patchResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'body' when calling patchResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource Post Method
  * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param body Body Object
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void postResourceEndpoint (String mname, String rname, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling postResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling postResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling postResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling postResourceEndpoint"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling postResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'body' when calling postResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource Post Method
   * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param body Body Object   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void postResourceEndpoint (String mname, String rname, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling postResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling postResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling postResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling postResourceEndpoint"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling postResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'body' when calling postResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource/_* Post Method
  * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param wildcard Is the Wild card part of the URL
   * @param body Body Object
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void postResourceEndpointItem (String mname, String rname, String wildcard, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling postResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling postResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling postResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling postResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling postResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling postResourceEndpointItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling postResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'body' when calling postResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource/_* Post Method
   * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param wildcard Is the Wild card part of the URL   * @param body Body Object   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void postResourceEndpointItem (String mname, String rname, String wildcard, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling postResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling postResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling postResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling postResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling postResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling postResourceEndpointItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling postResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'body' when calling postResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource Put Method
  * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param body Body Object
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void putResourceEndpoint (String mname, String rname, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling putResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling putResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling putResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling putResourceEndpoint"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling putResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'body' when calling putResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource Put Method
   * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param body Body Object   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void putResourceEndpoint (String mname, String rname, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling putResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'mname' when calling putResourceEndpoint"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling putResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'rname' when calling putResourceEndpoint"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling putResourceEndpoint",
        new ApiException(400, "Missing the required parameter 'body' when calling putResourceEndpoint"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invoke Resource/_* Put Method
  * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name
   * @param rname Is the unique EMS EdgeModule Resource name
   * @param wildcard Is the Wild card part of the URL
   * @param body Body Object
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @return void
  */
  public void putResourceEndpointItem (String mname, String rname, String wildcard, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling putResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling putResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling putResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling putResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling putResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling putResourceEndpointItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling putResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'body' when calling putResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invoke Resource/_* Put Method
   * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
   * @param mname Is the EMS EdgeModule name   * @param rname Is the unique EMS EdgeModule Resource name   * @param wildcard Is the Wild card part of the URL   * @param body Body Object   * @param xEmbarcaderoApplicationId    * @param xEmbarcaderoAppSecret    * @param xEmbarcaderoMasterSecret 
  */
  public void putResourceEndpointItem (String mname, String rname, String wildcard, Object body, String xEmbarcaderoApplicationId, String xEmbarcaderoAppSecret, String xEmbarcaderoMasterSecret, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'mname' is set
    if (mname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mname' when calling putResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'mname' when calling putResourceEndpointItem"));
    }
    // verify the required parameter 'rname' is set
    if (rname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rname' when calling putResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'rname' when calling putResourceEndpointItem"));
    }
    // verify the required parameter 'wildcard' is set
    if (wildcard == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'wildcard' when calling putResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'wildcard' when calling putResourceEndpointItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling putResourceEndpointItem",
        new ApiException(400, "Missing the required parameter 'body' when calling putResourceEndpointItem"));
    }

    // create path and map variables
    String path = "/edgemodules/{mname}/{rname}/{wildcard}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mname" + "\\}", apiInvoker.escapeString(mname.toString())).replaceAll("\\{" + "rname" + "\\}", apiInvoker.escapeString(rname.toString())).replaceAll("\\{" + "wildcard" + "\\}", apiInvoker.escapeString(wildcard.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Embarcadero-Application-Id", ApiInvoker.parameterToString(xEmbarcaderoApplicationId));
    headerParams.put("X-Embarcadero-App-Secret", ApiInvoker.parameterToString(xEmbarcaderoAppSecret));
    headerParams.put("X-Embarcadero-Master-Secret", ApiInvoker.parameterToString(xEmbarcaderoMasterSecret));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
