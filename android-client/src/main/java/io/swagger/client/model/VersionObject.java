/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class VersionObject {
  
  @SerializedName("version")
  private String version = null;
  @SerializedName("server")
  private String server = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public String getVersion() {
    return version;
  }
  public void setVersion(String version) {
    this.version = version;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getServer() {
    return server;
  }
  public void setServer(String server) {
    this.server = server;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionObject versionObject = (VersionObject) o;
    return (this.version == null ? versionObject.version == null : this.version.equals(versionObject.version)) &&
        (this.server == null ? versionObject.server == null : this.server.equals(versionObject.server));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.version == null ? 0: this.version.hashCode());
    result = 31 * result + (this.server == null ? 0: this.server.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionObject {\n");
    
    sb.append("  version: ").append(version).append("\n");
    sb.append("  server: ").append(server).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
