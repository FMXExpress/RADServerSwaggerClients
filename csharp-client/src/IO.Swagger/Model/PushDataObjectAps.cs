/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PushDataObjectAps
    /// </summary>
    [DataContract]
    public partial class PushDataObjectAps :  IEquatable<PushDataObjectAps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushDataObjectAps" /> class.
        /// </summary>
        /// <param name="alert">alert.</param>
        /// <param name="badge">badge.</param>
        /// <param name="sound">sound.</param>
        public PushDataObjectAps(string alert = default(string), string badge = default(string), string sound = default(string))
        {
            this.Alert = alert;
            this.Badge = badge;
            this.Sound = sound;
        }
        
        /// <summary>
        /// Gets or Sets Alert
        /// </summary>
        [DataMember(Name="alert", EmitDefaultValue=false)]
        public string Alert { get; set; }

        /// <summary>
        /// Gets or Sets Badge
        /// </summary>
        [DataMember(Name="badge", EmitDefaultValue=false)]
        public string Badge { get; set; }

        /// <summary>
        /// Gets or Sets Sound
        /// </summary>
        [DataMember(Name="sound", EmitDefaultValue=false)]
        public string Sound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushDataObjectAps {\n");
            sb.Append("  Alert: ").Append(Alert).Append("\n");
            sb.Append("  Badge: ").Append(Badge).Append("\n");
            sb.Append("  Sound: ").Append(Sound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PushDataObjectAps);
        }

        /// <summary>
        /// Returns true if PushDataObjectAps instances are equal
        /// </summary>
        /// <param name="input">Instance of PushDataObjectAps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushDataObjectAps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alert == input.Alert ||
                    (this.Alert != null &&
                    this.Alert.Equals(input.Alert))
                ) && 
                (
                    this.Badge == input.Badge ||
                    (this.Badge != null &&
                    this.Badge.Equals(input.Badge))
                ) && 
                (
                    this.Sound == input.Sound ||
                    (this.Sound != null &&
                    this.Sound.Equals(input.Sound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alert != null)
                    hashCode = hashCode * 59 + this.Alert.GetHashCode();
                if (this.Badge != null)
                    hashCode = hashCode * 59 + this.Badge.GetHashCode();
                if (this.Sound != null)
                    hashCode = hashCode * 59 + this.Sound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
