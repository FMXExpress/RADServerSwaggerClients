/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.EdgeModuleAddObject
import io.swagger.client.model.EdgeModuleAddedObject
import io.swagger.client.model.EdgeModuleObject
import io.swagger.client.model.EdgeModuleResourceAddObject
import io.swagger.client.model.EdgeModuleResourceAddedObject
import io.swagger.client.model.EdgeModuleResourceObject
import io.swagger.client.model.EdgeModuleResourceUpdateObject
import io.swagger.client.model.EdgeModuleResourceUpdatedObject
import io.swagger.client.model.EdgeModuleUpdateObject
import io.swagger.client.model.EdgeModuleUpdatedObject
import io.swagger.client.model.FieldsEdgeModuleObject
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class EdgeModulesApi(
  val defBasePath: String = "http://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new EdgeModulesApiAsyncHelper(client, config)

  /**
   * Get Module
   *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return EdgeModuleObject
   */
  def getModule(mname: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[EdgeModuleObject] = {
    val await = Try(Await.result(getModuleAsync(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Module asynchronously
   *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(EdgeModuleObject)
   */
  def getModuleAsync(mname: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[EdgeModuleObject] = {
      helper.getModule(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get EdgeModule Resource
   *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param name Is the unique EMS EdgeModule Resource name 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return EdgeModuleResourceObject
   */
  def getModuleResource(mname: String, name: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[EdgeModuleResourceObject] = {
    val await = Try(Await.result(getModuleResourceAsync(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get EdgeModule Resource asynchronously
   *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param name Is the unique EMS EdgeModule Resource name 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(EdgeModuleResourceObject)
   */
  def getModuleResourceAsync(mname: String, name: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[EdgeModuleResourceObject] = {
      helper.getModuleResource(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get EdgeModule Resources
   *  |      Used to retrieve all data from the resources of an EdgeModule.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return List[EdgeModuleResourceObject]
   */
  def getModuleResources(mname: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[List[EdgeModuleResourceObject]] = {
    val await = Try(Await.result(getModuleResourcesAsync(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get EdgeModule Resources asynchronously
   *  |      Used to retrieve all data from the resources of an EdgeModule.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(List[EdgeModuleResourceObject])
   */
  def getModuleResourcesAsync(mname: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[List[EdgeModuleResourceObject]] = {
      helper.getModuleResources(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get Module
   *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return List[EdgeModuleObject]
   */
  def getModules(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[List[EdgeModuleObject]] = {
    val await = Try(Await.result(getModulesAsync(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Module asynchronously
   *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(List[EdgeModuleObject])
   */
  def getModulesAsync(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[List[EdgeModuleObject]] = {
      helper.getModules(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get Fields
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return FieldsEdgeModuleObject
   */
  def getModulesFields(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[FieldsEdgeModuleObject] = {
    val await = Try(Await.result(getModulesFieldsAsync(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Fields asynchronously
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(FieldsEdgeModuleObject)
   */
  def getModulesFieldsAsync(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[FieldsEdgeModuleObject] = {
      helper.getModulesFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get EdgeModules Resources
   *  |      Used to retrieve all data from the resources of all EdgeModules.
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return List[EdgeModuleResourceObject]
   */
  def getResources(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[List[EdgeModuleResourceObject]] = {
    val await = Try(Await.result(getResourcesAsync(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get EdgeModules Resources asynchronously
   *  |      Used to retrieve all data from the resources of all EdgeModules.
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(List[EdgeModuleResourceObject])
   */
  def getResourcesAsync(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[List[EdgeModuleResourceObject]] = {
      helper.getResources(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get Resource Fields
   *  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return FieldsEdgeModuleObject
   */
  def getResourcesFields(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[FieldsEdgeModuleObject] = {
    val await = Try(Await.result(getResourcesFieldsAsync(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Resource Fields asynchronously
   *  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(FieldsEdgeModuleObject)
   */
  def getResourcesFieldsAsync(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[FieldsEdgeModuleObject] = {
      helper.getResourcesFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Add Module
   *  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
   *
   * @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return EdgeModuleAddedObject
   */
  def registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[EdgeModuleAddedObject] = {
    val await = Try(Await.result(registerModuleAsync(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add Module asynchronously
   *  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
   *
   * @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(EdgeModuleAddedObject)
   */
  def registerModuleAsync(body: EdgeModuleAddObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[EdgeModuleAddedObject] = {
      helper.registerModule(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Add Module Resource
   *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return EdgeModuleResourceAddedObject
   */
  def registerModuleResource(mname: String, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[EdgeModuleResourceAddedObject] = {
    val await = Try(Await.result(registerModuleResourceAsync(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add Module Resource asynchronously
   *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(EdgeModuleResourceAddedObject)
   */
  def registerModuleResourceAsync(mname: String, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[EdgeModuleResourceAddedObject] = {
      helper.registerModuleResource(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Delete Module
   *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return void
   */
  def unregisterModule(mname: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None) = {
    val await = Try(Await.result(unregisterModuleAsync(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Module asynchronously
   *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(void)
   */
  def unregisterModuleAsync(mname: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None) = {
      helper.unregisterModule(mname, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Delete Module Resource
   *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param name Is the unique EMS EdgeModule Resource name 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return void
   */
  def unregisterModuleResource(mname: String, name: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None) = {
    val await = Try(Await.result(unregisterModuleResourceAsync(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Module Resource asynchronously
   *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param name Is the unique EMS EdgeModule Resource name 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(void)
   */
  def unregisterModuleResourceAsync(mname: String, name: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None) = {
      helper.unregisterModuleResource(mname, name, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Update Module
   *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return EdgeModuleUpdatedObject
   */
  def updateModule(mname: String, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[EdgeModuleUpdatedObject] = {
    val await = Try(Await.result(updateModuleAsync(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Module asynchronously
   *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(EdgeModuleUpdatedObject)
   */
  def updateModuleAsync(mname: String, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[EdgeModuleUpdatedObject] = {
      helper.updateModule(mname, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Update Module Resource
   *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param name Is the unique EMS EdgeModule Resource name 
   * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return EdgeModuleResourceUpdatedObject
   */
  def updateModuleResource(mname: String, name: String, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[EdgeModuleResourceUpdatedObject] = {
    val await = Try(Await.result(updateModuleResourceAsync(mname, name, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Module Resource asynchronously
   *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
   *
   * @param mname Is the unique EMS EdgeModule identifier 
   * @param name Is the unique EMS EdgeModule Resource name 
   * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(EdgeModuleResourceUpdatedObject)
   */
  def updateModuleResourceAsync(mname: String, name: String, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[EdgeModuleResourceUpdatedObject] = {
      helper.updateModuleResource(mname, name, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

}

class EdgeModulesApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getModule(mname: String,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[EdgeModuleObject]): Future[EdgeModuleObject] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/{mname}")
      replaceAll("\\{" + "mname" + "\\}", mname.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (mname == null) throw new Exception("Missing required parameter 'mname' when calling EdgeModulesApi->getModule")

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getModuleResource(mname: String,
    name: String,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[EdgeModuleResourceObject]): Future[EdgeModuleResourceObject] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/{mname}/resources/{name}")
      replaceAll("\\{" + "mname" + "\\}", mname.toString)
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (mname == null) throw new Exception("Missing required parameter 'mname' when calling EdgeModulesApi->getModuleResource")

    if (name == null) throw new Exception("Missing required parameter 'name' when calling EdgeModulesApi->getModuleResource")

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getModuleResources(mname: String,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[List[EdgeModuleResourceObject]]): Future[List[EdgeModuleResourceObject]] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/{mname}/resources")
      replaceAll("\\{" + "mname" + "\\}", mname.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (mname == null) throw new Exception("Missing required parameter 'mname' when calling EdgeModulesApi->getModuleResources")

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getModules(xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[List[EdgeModuleObject]]): Future[List[EdgeModuleObject]] = {
    // create path and map variables
    val path = (addFmt("/edgemodules"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getModulesFields(xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[FieldsEdgeModuleObject]): Future[FieldsEdgeModuleObject] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/fields"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResources(xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[List[EdgeModuleResourceObject]]): Future[List[EdgeModuleResourceObject]] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/resources"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResourcesFields(xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[FieldsEdgeModuleObject]): Future[FieldsEdgeModuleObject] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/resources/fields"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def registerModule(body: EdgeModuleAddObject,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[EdgeModuleAddedObject], writer: RequestWriter[EdgeModuleAddObject]): Future[EdgeModuleAddedObject] = {
    // create path and map variables
    val path = (addFmt("/edgemodules"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling EdgeModulesApi->registerModule")
    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def registerModuleResource(mname: String,
    body: EdgeModuleResourceAddObject,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[EdgeModuleResourceAddedObject], writer: RequestWriter[EdgeModuleResourceAddObject]): Future[EdgeModuleResourceAddedObject] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/{mname}/resources")
      replaceAll("\\{" + "mname" + "\\}", mname.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (mname == null) throw new Exception("Missing required parameter 'mname' when calling EdgeModulesApi->registerModuleResource")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling EdgeModulesApi->registerModuleResource")
    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def unregisterModule(mname: String,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/{mname}")
      replaceAll("\\{" + "mname" + "\\}", mname.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (mname == null) throw new Exception("Missing required parameter 'mname' when calling EdgeModulesApi->unregisterModule")

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def unregisterModuleResource(mname: String,
    name: String,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/{mname}/resources/{name}")
      replaceAll("\\{" + "mname" + "\\}", mname.toString)
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (mname == null) throw new Exception("Missing required parameter 'mname' when calling EdgeModulesApi->unregisterModuleResource")

    if (name == null) throw new Exception("Missing required parameter 'name' when calling EdgeModulesApi->unregisterModuleResource")

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateModule(mname: String,
    body: EdgeModuleUpdateObject,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[EdgeModuleUpdatedObject], writer: RequestWriter[EdgeModuleUpdateObject]): Future[EdgeModuleUpdatedObject] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/{mname}")
      replaceAll("\\{" + "mname" + "\\}", mname.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (mname == null) throw new Exception("Missing required parameter 'mname' when calling EdgeModulesApi->updateModule")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling EdgeModulesApi->updateModule")
    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateModuleResource(mname: String,
    name: String,
    body: EdgeModuleResourceUpdateObject,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[EdgeModuleResourceUpdatedObject], writer: RequestWriter[EdgeModuleResourceUpdateObject]): Future[EdgeModuleResourceUpdatedObject] = {
    // create path and map variables
    val path = (addFmt("/edgemodules/{mname}/resources/{name}")
      replaceAll("\\{" + "mname" + "\\}", mname.toString)
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (mname == null) throw new Exception("Missing required parameter 'mname' when calling EdgeModulesApi->updateModuleResource")

    if (name == null) throw new Exception("Missing required parameter 'name' when calling EdgeModulesApi->updateModuleResource")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling EdgeModulesApi->updateModuleResource")
    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
