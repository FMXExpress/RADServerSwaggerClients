/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.ChannelName
import io.swagger.client.model.FieldInstallationObject
import io.swagger.client.model.InstallationAddObject
import io.swagger.client.model.InstallationAddedObject
import io.swagger.client.model.InstallationObject
import io.swagger.client.model.Number
import io.swagger.client.model.UpdateInstallationObject
import io.swagger.client.model.UpdatedInstallationObject
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class InstallationsApi(
  val defBasePath: String = "http://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new InstallationsApiAsyncHelper(client, config)

  /**
   * Add Installation
   *  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
   *
   * @param body Object to sign up a new EMS User in the EMS Server 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return InstallationAddedObject
   */
  def addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[InstallationAddedObject] = {
    val await = Try(Await.result(addInstallationAsync(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add Installation asynchronously
   *  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
   *
   * @param body Object to sign up a new EMS User in the EMS Server 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(InstallationAddedObject)
   */
  def addInstallationAsync(body: InstallationAddObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[InstallationAddedObject] = {
      helper.addInstallation(body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Delete Installation
   *  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
   *
   * @param id A Installation ID 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return void
   */
  def deleteInstallation(id: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None) = {
    val await = Try(Await.result(deleteInstallationAsync(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete Installation asynchronously
   *  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
   *
   * @param id A Installation ID 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(void)
   */
  def deleteInstallationAsync(id: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None) = {
      helper.deleteInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get Installation Channels
   *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return List[ChannelName]
   */
  def getChannels(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[List[ChannelName]] = {
    val await = Try(Await.result(getChannelsAsync(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Installation Channels asynchronously
   *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(List[ChannelName])
   */
  def getChannelsAsync(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[List[ChannelName]] = {
      helper.getChannels(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get Installation
   *  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
   *
   * @param id A Installation ID 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return InstallationObject
   */
  def getInstallation(id: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[InstallationObject] = {
    val await = Try(Await.result(getInstallationAsync(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Installation asynchronously
   *  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
   *
   * @param id A Installation ID 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(InstallationObject)
   */
  def getInstallationAsync(id: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[InstallationObject] = {
      helper.getInstallation(id, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get Fields
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return List[FieldInstallationObject]
   */
  def getInstallationFields(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[List[FieldInstallationObject]] = {
    val await = Try(Await.result(getInstallationFieldsAsync(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Fields asynchronously
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(List[FieldInstallationObject])
   */
  def getInstallationFieldsAsync(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[List[FieldInstallationObject]] = {
      helper.getInstallationFields(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

  /**
   * Get Installations
   *  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @param skip users skipped (optional)
   * @param limit maximum number of results to return (optional)
   * @param order order ascending or descending (asc, desc) (optional)
   * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
   * @return List[InstallationObject]
   */
  def getInstallations(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None, skip: Option[Number] = None, limit: Option[Number] = None, order: Option[Number] = None, where: Option[String] = None): Option[List[InstallationObject]] = {
    val await = Try(Await.result(getInstallationsAsync(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Installations asynchronously
   *  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   *
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @param skip users skipped (optional)
   * @param limit maximum number of results to return (optional)
   * @param order order ascending or descending (asc, desc) (optional)
   * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
   * @return Future(List[InstallationObject])
   */
  def getInstallationsAsync(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None, skip: Option[Number] = None, limit: Option[Number] = None, order: Option[Number] = None, where: Option[String] = None): Future[List[InstallationObject]] = {
      helper.getInstallations(xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret, skip, limit, order, where)
  }

  /**
   * Update Installation
   *  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
   *
   * @param id A Installation ID 
   * @param body Installation fields to update 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return UpdatedInstallationObject
   */
  def updateInstallation(id: String, body: UpdateInstallationObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Option[UpdatedInstallationObject] = {
    val await = Try(Await.result(updateInstallationAsync(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update Installation asynchronously
   *  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
   *
   * @param id A Installation ID 
   * @param body Installation fields to update 
   * @param xEmbarcaderoApplicationId  (optional)
   * @param xEmbarcaderoAppSecret  (optional)
   * @param xEmbarcaderoMasterSecret  (optional)
   * @return Future(UpdatedInstallationObject)
   */
  def updateInstallationAsync(id: String, body: UpdateInstallationObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): Future[UpdatedInstallationObject] = {
      helper.updateInstallation(id, body, xEmbarcaderoApplicationId, xEmbarcaderoAppSecret, xEmbarcaderoMasterSecret)
  }

}

class InstallationsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addInstallation(body: InstallationAddObject,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[InstallationAddedObject], writer: RequestWriter[InstallationAddObject]): Future[InstallationAddedObject] = {
    // create path and map variables
    val path = (addFmt("/installations"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling InstallationsApi->addInstallation")
    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteInstallation(id: String,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/installations/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling InstallationsApi->deleteInstallation")

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getChannels(xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[List[ChannelName]]): Future[List[ChannelName]] = {
    // create path and map variables
    val path = (addFmt("/installations/channels"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getInstallation(id: String,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[InstallationObject]): Future[InstallationObject] = {
    // create path and map variables
    val path = (addFmt("/installations/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling InstallationsApi->getInstallation")

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getInstallationFields(xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[List[FieldInstallationObject]]): Future[List[FieldInstallationObject]] = {
    // create path and map variables
    val path = (addFmt("/installations/fields"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getInstallations(xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None,
    skip: Option[Number] = None,
    limit: Option[Number] = None,
    order: Option[Number] = None,
    where: Option[String] = None
    )(implicit reader: ClientResponseReader[List[InstallationObject]]): Future[List[InstallationObject]] = {
    // create path and map variables
    val path = (addFmt("/installations"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    skip match {
      case Some(param) => queryParams += "skip" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }
    where match {
      case Some(param) => queryParams += "where" -> param.toString
      case _ => queryParams
    }
    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateInstallation(id: String,
    body: UpdateInstallationObject,
    xEmbarcaderoApplicationId: Option[String] = None,
    xEmbarcaderoAppSecret: Option[String] = None,
    xEmbarcaderoMasterSecret: Option[String] = None
    )(implicit reader: ClientResponseReader[UpdatedInstallationObject], writer: RequestWriter[UpdateInstallationObject]): Future[UpdatedInstallationObject] = {
    // create path and map variables
    val path = (addFmt("/installations/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling InstallationsApi->updateInstallation")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling InstallationsApi->updateInstallation")
    xEmbarcaderoApplicationId match {
      case Some(param) => headerParams += "X-Embarcadero-Application-Id" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoAppSecret match {
      case Some(param) => headerParams += "X-Embarcadero-App-Secret" -> param.toString
      case _ => headerParams
    }
    xEmbarcaderoMasterSecret match {
      case Some(param) => headerParams += "X-Embarcadero-Master-Secret" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
