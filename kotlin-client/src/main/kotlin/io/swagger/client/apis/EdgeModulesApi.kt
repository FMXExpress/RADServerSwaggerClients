/**
* EMS API Documentation
* Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
*
* OpenAPI spec version: 0.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.EdgeModuleAddObject
import io.swagger.client.models.EdgeModuleAddedObject
import io.swagger.client.models.EdgeModuleObject
import io.swagger.client.models.EdgeModuleResourceAddObject
import io.swagger.client.models.EdgeModuleResourceAddedObject
import io.swagger.client.models.EdgeModuleResourceObject
import io.swagger.client.models.EdgeModuleResourceUpdateObject
import io.swagger.client.models.EdgeModuleResourceUpdatedObject
import io.swagger.client.models.EdgeModuleUpdateObject
import io.swagger.client.models.EdgeModuleUpdatedObject
import io.swagger.client.models.FieldsEdgeModuleObject

import io.swagger.client.infrastructure.*

class EdgeModulesApi(basePath: kotlin.String = "http://localhost:8080") : ApiClient(basePath) {

    /**
    * Get Module
    *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    * @param mname Is the unique EMS EdgeModule identifier 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return EdgeModuleObject
    */
    @Suppress("UNCHECKED_CAST")
    fun getModule(mname: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : EdgeModuleObject {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules/{mname}".replace("{"+"mname"+"}", "$mname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<EdgeModuleObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EdgeModuleObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get EdgeModule Resource
    *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
    * @param mname Is the unique EMS EdgeModule identifier 
    * @param name Is the unique EMS EdgeModule Resource name 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return EdgeModuleResourceObject
    */
    @Suppress("UNCHECKED_CAST")
    fun getModuleResource(mname: kotlin.String, name: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : EdgeModuleResourceObject {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules/{mname}/resources/{name}".replace("{"+"mname"+"}", "$mname").replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<EdgeModuleResourceObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EdgeModuleResourceObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get EdgeModule Resources
    *  |      Used to retrieve all data from the resources of an EdgeModule.
    * @param mname Is the unique EMS EdgeModule identifier 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return kotlin.Array<EdgeModuleResourceObject>
    */
    @Suppress("UNCHECKED_CAST")
    fun getModuleResources(mname: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : kotlin.Array<EdgeModuleResourceObject> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules/{mname}/resources".replace("{"+"mname"+"}", "$mname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<EdgeModuleResourceObject>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<EdgeModuleResourceObject>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Module
    *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return kotlin.Array<EdgeModuleObject>
    */
    @Suppress("UNCHECKED_CAST")
    fun getModules(xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : kotlin.Array<EdgeModuleObject> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<EdgeModuleObject>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<EdgeModuleObject>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Fields
    *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return FieldsEdgeModuleObject
    */
    @Suppress("UNCHECKED_CAST")
    fun getModulesFields(xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : FieldsEdgeModuleObject {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules/fields",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FieldsEdgeModuleObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FieldsEdgeModuleObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get EdgeModules Resources
    *  |      Used to retrieve all data from the resources of all EdgeModules.
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return kotlin.Array<EdgeModuleResourceObject>
    */
    @Suppress("UNCHECKED_CAST")
    fun getResources(xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : kotlin.Array<EdgeModuleResourceObject> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules/resources",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<EdgeModuleResourceObject>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<EdgeModuleResourceObject>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Resource Fields
    *  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return FieldsEdgeModuleObject
    */
    @Suppress("UNCHECKED_CAST")
    fun getResourcesFields(xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : FieldsEdgeModuleObject {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules/resources/fields",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FieldsEdgeModuleObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FieldsEdgeModuleObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Add Module
    *  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
    * @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return EdgeModuleAddedObject
    */
    @Suppress("UNCHECKED_CAST")
    fun registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : EdgeModuleAddedObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/edgemodules",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<EdgeModuleAddedObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EdgeModuleAddedObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Add Module Resource
    *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
    * @param mname Is the unique EMS EdgeModule identifier 
    * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return EdgeModuleResourceAddedObject
    */
    @Suppress("UNCHECKED_CAST")
    fun registerModuleResource(mname: kotlin.String, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : EdgeModuleResourceAddedObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/edgemodules/{mname}/resources".replace("{"+"mname"+"}", "$mname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<EdgeModuleResourceAddedObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EdgeModuleResourceAddedObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete Module
    *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
    * @param mname Is the unique EMS EdgeModule identifier 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun unregisterModule(mname: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/edgemodules/{mname}".replace("{"+"mname"+"}", "$mname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete Module Resource
    *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
    * @param mname Is the unique EMS EdgeModule identifier 
    * @param name Is the unique EMS EdgeModule Resource name 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun unregisterModuleResource(mname: kotlin.String, name: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/edgemodules/{mname}/resources/{name}".replace("{"+"mname"+"}", "$mname").replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Update Module
    *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
    * @param mname Is the unique EMS EdgeModule identifier 
    * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return EdgeModuleUpdatedObject
    */
    @Suppress("UNCHECKED_CAST")
    fun updateModule(mname: kotlin.String, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : EdgeModuleUpdatedObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/edgemodules/{mname}".replace("{"+"mname"+"}", "$mname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<EdgeModuleUpdatedObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EdgeModuleUpdatedObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Update Module Resource
    *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
    * @param mname Is the unique EMS EdgeModule identifier 
    * @param name Is the unique EMS EdgeModule Resource name 
    * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;} 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return EdgeModuleResourceUpdatedObject
    */
    @Suppress("UNCHECKED_CAST")
    fun updateModuleResource(mname: kotlin.String, name: kotlin.String, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : EdgeModuleResourceUpdatedObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/edgemodules/{mname}/resources/{name}".replace("{"+"mname"+"}", "$mname").replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<EdgeModuleResourceUpdatedObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EdgeModuleResourceUpdatedObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
