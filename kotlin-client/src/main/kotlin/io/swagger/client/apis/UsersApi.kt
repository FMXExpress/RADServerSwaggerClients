/**
* EMS API Documentation
* Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
*
* OpenAPI spec version: 0.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.FieldObject
import io.swagger.client.models.GroupName
import io.swagger.client.models.UpdateObject
import io.swagger.client.models.UpdatedObject
import io.swagger.client.models.UserCredentialsObject
import io.swagger.client.models.UserObject
import io.swagger.client.models.UserSignUpResponseObject
import io.swagger.client.models.UserTokenObject
import io.swagger.client.models.UseridObject

import io.swagger.client.infrastructure.*

class UsersApi(basePath: kotlin.String = "http://localhost:8080") : ApiClient(basePath) {

    /**
    * Add User
    *  |      Used to add a new &#x60;User&#x60; object to the EMS database.
    * @param body Object to add a new EMS User in the EMS Server 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return UseridObject
    */
    @Suppress("UNCHECKED_CAST")
    fun addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : UseridObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/users",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<UseridObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UseridObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete User
    *  |      Used to delete a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
    * @param id A user ID 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun deleteUser(id: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/users/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get User
    *  |      Used to retrieve all data from a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
    * @param id A user ID 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return UserObject
    */
    @Suppress("UNCHECKED_CAST")
    fun getUser(id: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : UserObject {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/users/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<UserObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Fields
    *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Users (including the custom fields).
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return kotlin.Array<FieldObject>
    */
    @Suppress("UNCHECKED_CAST")
    fun getUserFields(xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : kotlin.Array<FieldObject> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/users/fields",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<FieldObject>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FieldObject>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get User Groups
    *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
    * @param id A user ID 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return kotlin.Array<GroupName>
    */
    @Suppress("UNCHECKED_CAST")
    fun getUserGroups(id: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : kotlin.Array<GroupName> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/users/{id}/groups".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<GroupName>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<GroupName>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Users
    *  |      Used to retrieve all data from &#x60;Users&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @param skip users skipped (optional)
    * @param limit maximum number of results to return (optional)
    * @param order order ascending or descending (asc, desc) (optional)
    * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
    * @return kotlin.Array<UserObject>
    */
    @Suppress("UNCHECKED_CAST")
    fun getUsers(xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String, skip: java.math.BigDecimal, limit: java.math.BigDecimal, order: java.math.BigDecimal, where: kotlin.String) : kotlin.Array<UserObject> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("skip" to listOf("$skip"), "limit" to listOf("$limit"), "order" to listOf("$order"), "where" to listOf("$where"))
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/users",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<UserObject>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<UserObject>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Log In
    *  |      Logs in to the EMS Server with a specific EMS User.
    * @param body A user object 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return UserTokenObject
    */
    @Suppress("UNCHECKED_CAST")
    fun loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : UserTokenObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/users/login",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<UserTokenObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserTokenObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * sPostLogoutSummaryTitle
    * sPostLogoutSummaryDesc
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun logoutUser(xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/users/logout",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Sign Up  User
    *  |      Signs up to the EMS Server with an appropriate EMS User.
    * @param body Object to sign up a new EMS User in the EMS Server 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return UserSignUpResponseObject
    */
    @Suppress("UNCHECKED_CAST")
    fun signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : UserSignUpResponseObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/users/signup",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<UserSignUpResponseObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserSignUpResponseObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Update User
    *  |      Used to update a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
    * @param id A user ID 
    * @param body Add any fieldName 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return UpdatedObject
    */
    @Suppress("UNCHECKED_CAST")
    fun updateUser(id: kotlin.String, body: UpdateObject, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : UpdatedObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/users/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<UpdatedObject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UpdatedObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
