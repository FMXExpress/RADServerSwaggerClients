/**
* EMS API Documentation
* Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
*
* OpenAPI spec version: 0.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class EdgeModulesInvokersApi(basePath: kotlin.String = "http://localhost:8080") : ApiClient(basePath) {

    /**
    * Invoke Resource Delete Method
    * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun deleteResourceEndpoint(mname: kotlin.String, rname: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/edgemodules/{mname}/{rname}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource/_* Delete Method
    * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param wildcard Is the Wild card part of the URL 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun deleteResourceEndpointItem(mname: kotlin.String, rname: kotlin.String, wildcard: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/edgemodules/{mname}/{rname}/{wildcard}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname").replace("{"+"wildcard"+"}", "$wildcard"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource Get Method
    * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun getResourceEndpoint(mname: kotlin.String, rname: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules/{mname}/{rname}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource/_* Get Method
    * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param wildcard Is the Wild card part of the URL 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun getResourceEndpointItem(mname: kotlin.String, rname: kotlin.String, wildcard: kotlin.String, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/edgemodules/{mname}/{rname}/{wildcard}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname").replace("{"+"wildcard"+"}", "$wildcard"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource Patch Method
    * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param body Body Object 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun patchResourceEndpoint(mname: kotlin.String, rname: kotlin.String, body: kotlin.Any, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PATCH,
            "/edgemodules/{mname}/{rname}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource/_* Patch Method
    * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param wildcard Is the Wild card part of the URL 
    * @param body Body Object 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun patchResourceEndpointItem(mname: kotlin.String, rname: kotlin.String, wildcard: kotlin.String, body: kotlin.Any, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PATCH,
            "/edgemodules/{mname}/{rname}/{wildcard}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname").replace("{"+"wildcard"+"}", "$wildcard"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource Post Method
    * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param body Body Object 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun postResourceEndpoint(mname: kotlin.String, rname: kotlin.String, body: kotlin.Any, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/edgemodules/{mname}/{rname}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource/_* Post Method
    * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param wildcard Is the Wild card part of the URL 
    * @param body Body Object 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun postResourceEndpointItem(mname: kotlin.String, rname: kotlin.String, wildcard: kotlin.String, body: kotlin.Any, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/edgemodules/{mname}/{rname}/{wildcard}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname").replace("{"+"wildcard"+"}", "$wildcard"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource Put Method
    * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param body Body Object 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun putResourceEndpoint(mname: kotlin.String, rname: kotlin.String, body: kotlin.Any, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/edgemodules/{mname}/{rname}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Invoke Resource/_* Put Method
    * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
    * @param mname Is the EMS EdgeModule name 
    * @param rname Is the unique EMS EdgeModule Resource name 
    * @param wildcard Is the Wild card part of the URL 
    * @param body Body Object 
    * @param xEmbarcaderoApplicationId  (optional)
    * @param xEmbarcaderoAppSecret  (optional)
    * @param xEmbarcaderoMasterSecret  (optional)
    * @return void
    */
    fun putResourceEndpointItem(mname: kotlin.String, rname: kotlin.String, wildcard: kotlin.String, body: kotlin.Any, xEmbarcaderoApplicationId: kotlin.String, xEmbarcaderoAppSecret: kotlin.String, xEmbarcaderoMasterSecret: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Embarcadero-Application-Id" to xEmbarcaderoApplicationId, "X-Embarcadero-App-Secret" to xEmbarcaderoAppSecret, "X-Embarcadero-Master-Secret" to xEmbarcaderoMasterSecret)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/edgemodules/{mname}/{rname}/{wildcard}".replace("{"+"mname"+"}", "$mname").replace("{"+"rname"+"}", "$rname").replace("{"+"wildcard"+"}", "$wildcard"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
