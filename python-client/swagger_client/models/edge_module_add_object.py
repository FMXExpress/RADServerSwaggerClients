# coding: utf-8

"""
    EMS API Documentation

    Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EdgeModuleAddObject(dict):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'modulename': 'str',
        'protocol': 'str',
        'protocolprops': 'str'
    }

    attribute_map = {
        'modulename': 'modulename',
        'protocol': 'protocol',
        'protocolprops': 'protocolprops'
    }

    def __init__(self, modulename=None, protocol=None, protocolprops=None):  # noqa: E501
        """EdgeModuleAddObject - a model defined in Swagger"""  # noqa: E501

        self._modulename = None
        self._protocol = None
        self._protocolprops = None
        self.discriminator = None

        self.modulename = modulename
        self.protocol = protocol
        self.protocolprops = protocolprops

    @property
    def modulename(self):
        """Gets the modulename of this EdgeModuleAddObject.  # noqa: E501


        :return: The modulename of this EdgeModuleAddObject.  # noqa: E501
        :rtype: str
        """
        return self._modulename

    @modulename.setter
    def modulename(self, modulename):
        """Sets the modulename of this EdgeModuleAddObject.


        :param modulename: The modulename of this EdgeModuleAddObject.  # noqa: E501
        :type: str
        """
        if modulename is None:
            raise ValueError("Invalid value for `modulename`, must not be `None`")  # noqa: E501

        self._modulename = modulename

    @property
    def protocol(self):
        """Gets the protocol of this EdgeModuleAddObject.  # noqa: E501


        :return: The protocol of this EdgeModuleAddObject.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this EdgeModuleAddObject.


        :param protocol: The protocol of this EdgeModuleAddObject.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def protocolprops(self):
        """Gets the protocolprops of this EdgeModuleAddObject.  # noqa: E501


        :return: The protocolprops of this EdgeModuleAddObject.  # noqa: E501
        :rtype: str
        """
        return self._protocolprops

    @protocolprops.setter
    def protocolprops(self, protocolprops):
        """Sets the protocolprops of this EdgeModuleAddObject.


        :param protocolprops: The protocolprops of this EdgeModuleAddObject.  # noqa: E501
        :type: str
        """
        if protocolprops is None:
            raise ValueError("Invalid value for `protocolprops`, must not be `None`")  # noqa: E501
        if protocolprops is not None and not re.search(r'\\{\\\\\"port\\\\\":[0-9]{2,5},\\\\\"host\\\\\":\\\\\"([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})\\\\\"\\}', protocolprops):  # noqa: E501
            raise ValueError(r"Invalid value for `protocolprops`, must be a follow pattern or equal to `/\\{\\\\\"port\\\\\":[0-9]{2,5},\\\\\"host\\\\\":\\\\\"([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})\\\\\"\\}/`")  # noqa: E501

        self._protocolprops = protocolprops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeModuleAddObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeModuleAddObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
