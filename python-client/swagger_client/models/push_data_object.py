# coding: utf-8

"""
    EMS API Documentation

    Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.push_data_object_aps import PushDataObjectAps  # noqa: F401,E501
from swagger_client.models.push_data_object_extras import PushDataObjectExtras  # noqa: F401,E501
from swagger_client.models.push_data_object_gcm import PushDataObjectGcm  # noqa: F401,E501


class PushDataObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gcm': 'PushDataObjectGcm',
        'aps': 'PushDataObjectAps',
        'extras': 'PushDataObjectExtras'
    }

    attribute_map = {
        'gcm': 'gcm',
        'aps': 'aps',
        'extras': 'extras'
    }

    def __init__(self, gcm=None, aps=None, extras=None):  # noqa: E501
        """PushDataObject - a model defined in Swagger"""  # noqa: E501

        self._gcm = None
        self._aps = None
        self._extras = None
        self.discriminator = None

        if gcm is not None:
            self.gcm = gcm
        if aps is not None:
            self.aps = aps
        if extras is not None:
            self.extras = extras

    @property
    def gcm(self):
        """Gets the gcm of this PushDataObject.  # noqa: E501


        :return: The gcm of this PushDataObject.  # noqa: E501
        :rtype: PushDataObjectGcm
        """
        return self._gcm

    @gcm.setter
    def gcm(self, gcm):
        """Sets the gcm of this PushDataObject.


        :param gcm: The gcm of this PushDataObject.  # noqa: E501
        :type: PushDataObjectGcm
        """

        self._gcm = gcm

    @property
    def aps(self):
        """Gets the aps of this PushDataObject.  # noqa: E501


        :return: The aps of this PushDataObject.  # noqa: E501
        :rtype: PushDataObjectAps
        """
        return self._aps

    @aps.setter
    def aps(self, aps):
        """Sets the aps of this PushDataObject.


        :param aps: The aps of this PushDataObject.  # noqa: E501
        :type: PushDataObjectAps
        """

        self._aps = aps

    @property
    def extras(self):
        """Gets the extras of this PushDataObject.  # noqa: E501


        :return: The extras of this PushDataObject.  # noqa: E501
        :rtype: PushDataObjectExtras
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this PushDataObject.


        :param extras: The extras of this PushDataObject.  # noqa: E501
        :type: PushDataObjectExtras
        """

        self._extras = extras

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PushDataObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PushDataObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
