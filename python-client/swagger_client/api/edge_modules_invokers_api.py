# coding: utf-8

"""
    EMS API Documentation

    Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EdgeModulesInvokersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_resource_endpoint(self, mname, rname, **kwargs):  # noqa: E501
        """Invoke Resource Delete Method  # noqa: E501

        Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_endpoint(mname, rname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_resource_endpoint_with_http_info(mname, rname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_resource_endpoint_with_http_info(mname, rname, **kwargs)  # noqa: E501
            return data

    def delete_resource_endpoint_with_http_info(self, mname, rname, **kwargs):  # noqa: E501
        """Invoke Resource Delete Method  # noqa: E501

        Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_endpoint_with_http_info(mname, rname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resource_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `delete_resource_endpoint`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `delete_resource_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_resource_endpoint_item(self, mname, rname, wildcard, **kwargs):  # noqa: E501
        """Invoke Resource/* Delete Method  # noqa: E501

        Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_endpoint_item(mname, rname, wildcard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_resource_endpoint_item_with_http_info(mname, rname, wildcard, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_resource_endpoint_item_with_http_info(mname, rname, wildcard, **kwargs)  # noqa: E501
            return data

    def delete_resource_endpoint_item_with_http_info(self, mname, rname, wildcard, **kwargs):  # noqa: E501
        """Invoke Resource/* Delete Method  # noqa: E501

        Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_endpoint_item_with_http_info(mname, rname, wildcard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'wildcard', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resource_endpoint_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `delete_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `delete_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'wildcard' is set
        if ('wildcard' not in params or
                params['wildcard'] is None):
            raise ValueError("Missing the required parameter `wildcard` when calling `delete_resource_endpoint_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501
        if 'wildcard' in params:
            path_params['wildcard'] = params['wildcard']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}/{wildcard}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_endpoint(self, mname, rname, **kwargs):  # noqa: E501
        """Invoke Resource Get Method  # noqa: E501

        Used to invoke the GET method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_endpoint(mname, rname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_endpoint_with_http_info(mname, rname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_endpoint_with_http_info(mname, rname, **kwargs)  # noqa: E501
            return data

    def get_resource_endpoint_with_http_info(self, mname, rname, **kwargs):  # noqa: E501
        """Invoke Resource Get Method  # noqa: E501

        Used to invoke the GET method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_endpoint_with_http_info(mname, rname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `get_resource_endpoint`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `get_resource_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_endpoint_item(self, mname, rname, wildcard, **kwargs):  # noqa: E501
        """Invoke Resource/* Get Method  # noqa: E501

        Used to invoke the GET method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_endpoint_item(mname, rname, wildcard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_endpoint_item_with_http_info(mname, rname, wildcard, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_endpoint_item_with_http_info(mname, rname, wildcard, **kwargs)  # noqa: E501
            return data

    def get_resource_endpoint_item_with_http_info(self, mname, rname, wildcard, **kwargs):  # noqa: E501
        """Invoke Resource/* Get Method  # noqa: E501

        Used to invoke the GET method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_endpoint_item_with_http_info(mname, rname, wildcard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'wildcard', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_endpoint_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `get_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `get_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'wildcard' is set
        if ('wildcard' not in params or
                params['wildcard'] is None):
            raise ValueError("Missing the required parameter `wildcard` when calling `get_resource_endpoint_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501
        if 'wildcard' in params:
            path_params['wildcard'] = params['wildcard']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}/{wildcard}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_resource_endpoint(self, mname, rname, body, **kwargs):  # noqa: E501
        """Invoke Resource Patch Method  # noqa: E501

        Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_resource_endpoint(mname, rname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_resource_endpoint_with_http_info(mname, rname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_resource_endpoint_with_http_info(mname, rname, body, **kwargs)  # noqa: E501
            return data

    def patch_resource_endpoint_with_http_info(self, mname, rname, body, **kwargs):  # noqa: E501
        """Invoke Resource Patch Method  # noqa: E501

        Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_resource_endpoint_with_http_info(mname, rname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_resource_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `patch_resource_endpoint`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `patch_resource_endpoint`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_resource_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_resource_endpoint_item(self, mname, rname, wildcard, body, **kwargs):  # noqa: E501
        """Invoke Resource/* Patch Method  # noqa: E501

        Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_resource_endpoint_item(mname, rname, wildcard, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, **kwargs)  # noqa: E501
            return data

    def patch_resource_endpoint_item_with_http_info(self, mname, rname, wildcard, body, **kwargs):  # noqa: E501
        """Invoke Resource/* Patch Method  # noqa: E501

        Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'wildcard', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_resource_endpoint_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `patch_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `patch_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'wildcard' is set
        if ('wildcard' not in params or
                params['wildcard'] is None):
            raise ValueError("Missing the required parameter `wildcard` when calling `patch_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_resource_endpoint_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501
        if 'wildcard' in params:
            path_params['wildcard'] = params['wildcard']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}/{wildcard}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_resource_endpoint(self, mname, rname, body, **kwargs):  # noqa: E501
        """Invoke Resource Post Method  # noqa: E501

        Used to invoke the POST method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_resource_endpoint(mname, rname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_resource_endpoint_with_http_info(mname, rname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_resource_endpoint_with_http_info(mname, rname, body, **kwargs)  # noqa: E501
            return data

    def post_resource_endpoint_with_http_info(self, mname, rname, body, **kwargs):  # noqa: E501
        """Invoke Resource Post Method  # noqa: E501

        Used to invoke the POST method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_resource_endpoint_with_http_info(mname, rname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_resource_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `post_resource_endpoint`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `post_resource_endpoint`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_resource_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_resource_endpoint_item(self, mname, rname, wildcard, body, **kwargs):  # noqa: E501
        """Invoke Resource/* Post Method  # noqa: E501

        Used to invoke the POST method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_resource_endpoint_item(mname, rname, wildcard, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, **kwargs)  # noqa: E501
            return data

    def post_resource_endpoint_item_with_http_info(self, mname, rname, wildcard, body, **kwargs):  # noqa: E501
        """Invoke Resource/* Post Method  # noqa: E501

        Used to invoke the POST method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'wildcard', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_resource_endpoint_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `post_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `post_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'wildcard' is set
        if ('wildcard' not in params or
                params['wildcard'] is None):
            raise ValueError("Missing the required parameter `wildcard` when calling `post_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_resource_endpoint_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501
        if 'wildcard' in params:
            path_params['wildcard'] = params['wildcard']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}/{wildcard}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_resource_endpoint(self, mname, rname, body, **kwargs):  # noqa: E501
        """Invoke Resource Put Method  # noqa: E501

        Used to invoke the PUT method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_resource_endpoint(mname, rname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_resource_endpoint_with_http_info(mname, rname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_resource_endpoint_with_http_info(mname, rname, body, **kwargs)  # noqa: E501
            return data

    def put_resource_endpoint_with_http_info(self, mname, rname, body, **kwargs):  # noqa: E501
        """Invoke Resource Put Method  # noqa: E501

        Used to invoke the PUT method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_resource_endpoint_with_http_info(mname, rname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_resource_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `put_resource_endpoint`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `put_resource_endpoint`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_resource_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_resource_endpoint_item(self, mname, rname, wildcard, body, **kwargs):  # noqa: E501
        """Invoke Resource/* Put Method  # noqa: E501

        Used to invoke the PUT method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_resource_endpoint_item(mname, rname, wildcard, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, **kwargs)  # noqa: E501
            return data

    def put_resource_endpoint_item_with_http_info(self, mname, rname, wildcard, body, **kwargs):  # noqa: E501
        """Invoke Resource/* Put Method  # noqa: E501

        Used to invoke the PUT method of the resource from an existing EMS EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_resource_endpoint_item_with_http_info(mname, rname, wildcard, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the EMS EdgeModule name (required)
        :param str rname: Is the unique EMS EdgeModule Resource name (required)
        :param str wildcard: Is the Wild card part of the URL (required)
        :param object body: Body Object (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'rname', 'wildcard', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_resource_endpoint_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `put_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'rname' is set
        if ('rname' not in params or
                params['rname'] is None):
            raise ValueError("Missing the required parameter `rname` when calling `put_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'wildcard' is set
        if ('wildcard' not in params or
                params['wildcard'] is None):
            raise ValueError("Missing the required parameter `wildcard` when calling `put_resource_endpoint_item`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_resource_endpoint_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'rname' in params:
            path_params['rname'] = params['rname']  # noqa: E501
        if 'wildcard' in params:
            path_params['wildcard'] = params['wildcard']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/{rname}/{wildcard}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
