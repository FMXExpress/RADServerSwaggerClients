# coding: utf-8

"""
    EMS API Documentation

    Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EdgeModulesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_module(self, mname, **kwargs):  # noqa: E501
        """Get Module  # noqa: E501

         |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module(mname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_module_with_http_info(mname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_module_with_http_info(mname, **kwargs)  # noqa: E501
            return data

    def get_module_with_http_info(self, mname, **kwargs):  # noqa: E501
        """Get Module  # noqa: E501

         |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_with_http_info(mname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `get_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeModuleObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_module_resource(self, mname, name, **kwargs):  # noqa: E501
        """Get EdgeModule Resource  # noqa: E501

         |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_resource(mname, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str name: Is the unique EMS EdgeModule Resource name (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleResourceObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_module_resource_with_http_info(mname, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_module_resource_with_http_info(mname, name, **kwargs)  # noqa: E501
            return data

    def get_module_resource_with_http_info(self, mname, name, **kwargs):  # noqa: E501
        """Get EdgeModule Resource  # noqa: E501

         |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_resource_with_http_info(mname, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str name: Is the unique EMS EdgeModule Resource name (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleResourceObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'name', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_module_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `get_module_resource`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_module_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/resources/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeModuleResourceObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_module_resources(self, mname, **kwargs):  # noqa: E501
        """Get EdgeModule Resources  # noqa: E501

         |      Used to retrieve all data from the resources of an EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_resources(mname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: list[EdgeModuleResourceObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_module_resources_with_http_info(mname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_module_resources_with_http_info(mname, **kwargs)  # noqa: E501
            return data

    def get_module_resources_with_http_info(self, mname, **kwargs):  # noqa: E501
        """Get EdgeModule Resources  # noqa: E501

         |      Used to retrieve all data from the resources of an EdgeModule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_resources_with_http_info(mname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: list[EdgeModuleResourceObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_module_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `get_module_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdgeModuleResourceObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_modules(self, **kwargs):  # noqa: E501
        """Get Module  # noqa: E501

         |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_modules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: list[EdgeModuleObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_modules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_modules_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_modules_with_http_info(self, **kwargs):  # noqa: E501
        """Get Module  # noqa: E501

         |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_modules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: list[EdgeModuleObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_modules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdgeModuleObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_modules_fields(self, **kwargs):  # noqa: E501
        """Get Fields  # noqa: E501

         |      Used to retrieve all the `field names` of the EMS EdgeModule (including the custom fields).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_modules_fields(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: FieldsEdgeModuleObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_modules_fields_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_modules_fields_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_modules_fields_with_http_info(self, **kwargs):  # noqa: E501
        """Get Fields  # noqa: E501

         |      Used to retrieve all the `field names` of the EMS EdgeModule (including the custom fields).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_modules_fields_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: FieldsEdgeModuleObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_modules_fields" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldsEdgeModuleObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resources(self, **kwargs):  # noqa: E501
        """Get EdgeModules Resources  # noqa: E501

         |      Used to retrieve all data from the resources of all EdgeModules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: list[EdgeModuleResourceObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_resources_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_resources_with_http_info(self, **kwargs):  # noqa: E501
        """Get EdgeModules Resources  # noqa: E501

         |      Used to retrieve all data from the resources of all EdgeModules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: list[EdgeModuleResourceObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdgeModuleResourceObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resources_fields(self, **kwargs):  # noqa: E501
        """Get Resource Fields  # noqa: E501

         |      Used to retrieve the `field names` of all the resources of the EMS EdgeModule (including the custom fields).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resources_fields(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: FieldsEdgeModuleObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resources_fields_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_resources_fields_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_resources_fields_with_http_info(self, **kwargs):  # noqa: E501
        """Get Resource Fields  # noqa: E501

         |      Used to retrieve the `field names` of all the resources of the EMS EdgeModule (including the custom fields).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resources_fields_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: FieldsEdgeModuleObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resources_fields" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/resources/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldsEdgeModuleObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_module(self, body, **kwargs):  # noqa: E501
        """Add Module  # noqa: E501

         |      Used to add a new `EdgeModule` object to the EMS database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_module(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgeModuleAddObject body: EdgeModule object to add. protocolprops example string {\\\"port\\\":8082,\\\"host\\\":\\\"10.150.40.52\\\"} (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleAddedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_module_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_module_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_module_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add Module  # noqa: E501

         |      Used to add a new `EdgeModule` object to the EMS database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_module_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgeModuleAddObject body: EdgeModule object to add. protocolprops example string {\\\"port\\\":8082,\\\"host\\\":\\\"10.150.40.52\\\"} (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleAddedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeModuleAddedObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_module_resource(self, mname, body, **kwargs):  # noqa: E501
        """Add Module Resource  # noqa: E501

         |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_module_resource(mname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param EdgeModuleResourceAddObject body: EdgModule Resource add object. protocolprops string example {\\\"port\\\":8082,\\\"host\\\":\\\"10.150.40.52\\\"} (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleResourceAddedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_module_resource_with_http_info(mname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_module_resource_with_http_info(mname, body, **kwargs)  # noqa: E501
            return data

    def register_module_resource_with_http_info(self, mname, body, **kwargs):  # noqa: E501
        """Add Module Resource  # noqa: E501

         |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_module_resource_with_http_info(mname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param EdgeModuleResourceAddObject body: EdgModule Resource add object. protocolprops string example {\\\"port\\\":8082,\\\"host\\\":\\\"10.150.40.52\\\"} (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleResourceAddedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_module_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `register_module_resource`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_module_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/resources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeModuleResourceAddedObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unregister_module(self, mname, **kwargs):  # noqa: E501
        """Delete Module  # noqa: E501

         |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unregister_module(mname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unregister_module_with_http_info(mname, **kwargs)  # noqa: E501
        else:
            (data) = self.unregister_module_with_http_info(mname, **kwargs)  # noqa: E501
            return data

    def unregister_module_with_http_info(self, mname, **kwargs):  # noqa: E501
        """Delete Module  # noqa: E501

         |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unregister_module_with_http_info(mname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unregister_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `unregister_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unregister_module_resource(self, mname, name, **kwargs):  # noqa: E501
        """Delete Module Resource  # noqa: E501

         |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unregister_module_resource(mname, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str name: Is the unique EMS EdgeModule Resource name (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unregister_module_resource_with_http_info(mname, name, **kwargs)  # noqa: E501
        else:
            (data) = self.unregister_module_resource_with_http_info(mname, name, **kwargs)  # noqa: E501
            return data

    def unregister_module_resource_with_http_info(self, mname, name, **kwargs):  # noqa: E501
        """Delete Module Resource  # noqa: E501

         |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unregister_module_resource_with_http_info(mname, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str name: Is the unique EMS EdgeModule Resource name (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'name', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unregister_module_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `unregister_module_resource`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `unregister_module_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/resources/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_module(self, mname, body, **kwargs):  # noqa: E501
        """Update Module  # noqa: E501

         |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_module(mname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param EdgeModuleUpdateObject body: EdgModule Resource add object. protocolprops string example {\\\"port\\\":8082,\\\"host\\\":\\\"10.150.40.52\\\"} (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleUpdatedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_module_with_http_info(mname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_module_with_http_info(mname, body, **kwargs)  # noqa: E501
            return data

    def update_module_with_http_info(self, mname, body, **kwargs):  # noqa: E501
        """Update Module  # noqa: E501

         |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_module_with_http_info(mname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param EdgeModuleUpdateObject body: EdgModule Resource add object. protocolprops string example {\\\"port\\\":8082,\\\"host\\\":\\\"10.150.40.52\\\"} (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleUpdatedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `update_module`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeModuleUpdatedObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_module_resource(self, mname, name, body, **kwargs):  # noqa: E501
        """Update Module Resource  # noqa: E501

         |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_module_resource(mname, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str name: Is the unique EMS EdgeModule Resource name (required)
        :param EdgeModuleResourceUpdateObject body: EdgModule Resource add object. protocolprops string example {\\\"port\\\":8082,\\\"host\\\":\\\"10.150.40.52\\\"} (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleResourceUpdatedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_module_resource_with_http_info(mname, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_module_resource_with_http_info(mname, name, body, **kwargs)  # noqa: E501
            return data

    def update_module_resource_with_http_info(self, mname, name, body, **kwargs):  # noqa: E501
        """Update Module Resource  # noqa: E501

         |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_module_resource_with_http_info(mname, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mname: Is the unique EMS EdgeModule identifier (required)
        :param str name: Is the unique EMS EdgeModule Resource name (required)
        :param EdgeModuleResourceUpdateObject body: EdgModule Resource add object. protocolprops string example {\\\"port\\\":8082,\\\"host\\\":\\\"10.150.40.52\\\"} (required)
        :param str x_embarcadero_application_id:
        :param str x_embarcadero_app_secret:
        :param str x_embarcadero_master_secret:
        :return: EdgeModuleResourceUpdatedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mname', 'name', 'body', 'x_embarcadero_application_id', 'x_embarcadero_app_secret', 'x_embarcadero_master_secret']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_module_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mname' is set
        if ('mname' not in params or
                params['mname'] is None):
            raise ValueError("Missing the required parameter `mname` when calling `update_module_resource`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_module_resource`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_module_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mname' in params:
            path_params['mname'] = params['mname']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_embarcadero_application_id' in params:
            header_params['X-Embarcadero-Application-Id'] = params['x_embarcadero_application_id']  # noqa: E501
        if 'x_embarcadero_app_secret' in params:
            header_params['X-Embarcadero-App-Secret'] = params['x_embarcadero_app_secret']  # noqa: E501
        if 'x_embarcadero_master_secret' in params:
            header_params['X-Embarcadero-Master-Secret'] = params['x_embarcadero_master_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edgemodules/{mname}/resources/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeModuleResourceUpdatedObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
