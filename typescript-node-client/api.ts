/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'http://localhost:8080';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class ChannelName {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return ChannelName.attributeTypeMap;
    }
}

export class EdgeModuleAddObject extends null<String, string> {
    'modulename': string;
    'protocol': string;
    'protocolprops': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "modulename",
            "baseName": "modulename",
            "type": "string"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        },
        {
            "name": "protocolprops",
            "baseName": "protocolprops",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EdgeModuleAddObject.attributeTypeMap);
    }
}

export class EdgeModuleAddedObject {
    'id': string;
    'modulename': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string"
        },
        {
            "name": "modulename",
            "baseName": "modulename",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return EdgeModuleAddedObject.attributeTypeMap;
    }
}

export class EdgeModuleObject extends null<String, string> {
    'modulename': string;
    'id': string;
    'protocol': string;
    'protocolprops': string;
    'meta': MetaEdgeModuleObject;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "modulename",
            "baseName": "modulename",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "_id",
            "type": "string"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        },
        {
            "name": "protocolprops",
            "baseName": "protocolprops",
            "type": "string"
        },
        {
            "name": "meta",
            "baseName": "_meta",
            "type": "MetaEdgeModuleObject"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EdgeModuleObject.attributeTypeMap);
    }
}

export class EdgeModuleResourceAddObject extends null<String, string> {
    'resourcename': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "resourcename",
            "baseName": "resourcename",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EdgeModuleResourceAddObject.attributeTypeMap);
    }
}

export class EdgeModuleResourceAddedObject {
    'resourcename': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "resourcename",
            "baseName": "resourcename",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return EdgeModuleResourceAddedObject.attributeTypeMap;
    }
}

export class EdgeModuleResourceObject extends null<String, string> {
    'resourcename': string;
    'modulename': string;
    'moduleid': string;
    'meta': MetaEdgeModuleObject;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "resourcename",
            "baseName": "resourcename",
            "type": "string"
        },
        {
            "name": "modulename",
            "baseName": "modulename",
            "type": "string"
        },
        {
            "name": "moduleid",
            "baseName": "moduleid",
            "type": "string"
        },
        {
            "name": "meta",
            "baseName": "_meta",
            "type": "MetaEdgeModuleObject"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EdgeModuleResourceObject.attributeTypeMap);
    }
}

export class EdgeModuleResourceUpdateObject extends null<String, string> {
    'resourcename'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "resourcename",
            "baseName": "resourcename",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EdgeModuleResourceUpdateObject.attributeTypeMap);
    }
}

export class EdgeModuleResourceUpdatedObject {
    'updated': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return EdgeModuleResourceUpdatedObject.attributeTypeMap;
    }
}

export class EdgeModuleUpdateObject extends null<String, string> {
    'modulename': string;
    'protocol': string;
    'protocolprops': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "modulename",
            "baseName": "modulename",
            "type": "string"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        },
        {
            "name": "protocolprops",
            "baseName": "protocolprops",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EdgeModuleUpdateObject.attributeTypeMap);
    }
}

export class EdgeModuleUpdatedObject {
    'updated': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return EdgeModuleUpdatedObject.attributeTypeMap;
    }
}

export class FieldGroupObject {
    'name': string;
    'fields'?: Array<FieldObjectFields>;
    'custom'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "Array<FieldObjectFields>"
        },
        {
            "name": "custom",
            "baseName": "custom",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return FieldGroupObject.attributeTypeMap;
    }
}

export class FieldInstallationObject {
    'name': string;
    'fields'?: Array<FieldObjectFields>;
    'custom'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "Array<FieldObjectFields>"
        },
        {
            "name": "custom",
            "baseName": "custom",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return FieldInstallationObject.attributeTypeMap;
    }
}

export class FieldObject {
    'name': string;
    'fields'?: Array<FieldObjectFields>;
    'custom'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "Array<FieldObjectFields>"
        },
        {
            "name": "custom",
            "baseName": "custom",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return FieldObject.attributeTypeMap;
    }
}

export class FieldObjectFields {
    'name'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return FieldObjectFields.attributeTypeMap;
    }
}

export class FieldsEdgeModuleObject {
    'name': string;
    'fields'?: Array<FieldObjectFields>;
    'custom'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "Array<FieldObjectFields>"
        },
        {
            "name": "custom",
            "baseName": "custom",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return FieldsEdgeModuleObject.attributeTypeMap;
    }
}

export class GroupAddObject {
    'groupname': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "groupname",
            "baseName": "groupname",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return GroupAddObject.attributeTypeMap;
    }
}

export class GroupName {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return GroupName.attributeTypeMap;
    }
}

export class GroupObject extends null<String, string> {
    'name': string;
    'meta': MetaGroupObject;
    'users'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "meta",
            "baseName": "_meta",
            "type": "MetaGroupObject"
        },
        {
            "name": "users",
            "baseName": "users",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(GroupObject.attributeTypeMap);
    }
}

export class InstallationAddObject extends null<String, string> {
    'deviceToken': string;
    'deviceType': string;
    'channels'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "deviceToken",
            "baseName": "deviceToken",
            "type": "string"
        },
        {
            "name": "deviceType",
            "baseName": "deviceType",
            "type": "string"
        },
        {
            "name": "channels",
            "baseName": "channels",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(InstallationAddObject.attributeTypeMap);
    }
}

export class InstallationAddedObject {
    'id': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return InstallationAddedObject.attributeTypeMap;
    }
}

export class InstallationObject extends null<String, string> {
    'id': string;
    'deviceToken': string;
    'deviceType': InstallationObject.InstallationObject.DeviceTypeEnum;
    'meta': MetaInstallationObject;
    'channels'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string"
        },
        {
            "name": "deviceToken",
            "baseName": "deviceToken",
            "type": "string"
        },
        {
            "name": "deviceType",
            "baseName": "deviceType",
            "type": "InstallationObject.InstallationObject.DeviceTypeEnum"
        },
        {
            "name": "meta",
            "baseName": "_meta",
            "type": "MetaInstallationObject"
        },
        {
            "name": "channels",
            "baseName": "channels",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(InstallationObject.attributeTypeMap);
    }
}

export namespace InstallationObject {
    export enum DeviceTypeEnum {
        Ios = <any> 'ios',
        Android = <any> 'android'
    }
}
export class MetaEdgeModuleObject {
    'creator': string;
    'created': string;
    'updated'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "creator",
            "baseName": "creator",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "string"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return MetaEdgeModuleObject.attributeTypeMap;
    }
}

export class MetaGroupObject {
    'creator': string;
    'created': string;
    'updated'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "creator",
            "baseName": "creator",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "string"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return MetaGroupObject.attributeTypeMap;
    }
}

export class MetaInstallationObject {
    'creator': string;
    'created': string;
    'updated'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "creator",
            "baseName": "creator",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "string"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return MetaInstallationObject.attributeTypeMap;
    }
}

export class MetaObject {
    'creator': string;
    'created': string;
    'updated'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "creator",
            "baseName": "creator",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "string"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return MetaObject.attributeTypeMap;
    }
}

export class PushDataObject {
    'gcm'?: PushDataObjectGcm;
    'aps'?: PushDataObjectAps;
    'extras'?: PushDataObjectExtras;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "gcm",
            "baseName": "gcm",
            "type": "PushDataObjectGcm"
        },
        {
            "name": "aps",
            "baseName": "aps",
            "type": "PushDataObjectAps"
        },
        {
            "name": "extras",
            "baseName": "extras",
            "type": "PushDataObjectExtras"
        }    ];

    static getAttributeTypeMap() {
        return PushDataObject.attributeTypeMap;
    }
}

export class PushDataObjectAps {
    'alert'?: string;
    'badge'?: string;
    'sound'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "alert",
            "baseName": "alert",
            "type": "string"
        },
        {
            "name": "badge",
            "baseName": "badge",
            "type": "string"
        },
        {
            "name": "sound",
            "baseName": "sound",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PushDataObjectAps.attributeTypeMap;
    }
}

export class PushDataObjectExtras {
    'message'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PushDataObjectExtras.attributeTypeMap;
    }
}

export class PushDataObjectGcm {
    'message'?: string;
    'title'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PushDataObjectGcm.attributeTypeMap;
    }
}

export class PushObject {
    'data': PushDataObject;
    'channels'?: Array<string>;
    'where': PushWhereObject;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "data",
            "baseName": "data",
            "type": "PushDataObject"
        },
        {
            "name": "channels",
            "baseName": "channels",
            "type": "Array<string>"
        },
        {
            "name": "where",
            "baseName": "where",
            "type": "PushWhereObject"
        }    ];

    static getAttributeTypeMap() {
        return PushObject.attributeTypeMap;
    }
}

export class PushWhereObject {
    'deviceType'?: PushWhereObject.DeviceTypeEnum;
    'deviceToken'?: PushWhereObjectDeviceToken;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "deviceType",
            "baseName": "deviceType",
            "type": "PushWhereObject.DeviceTypeEnum"
        },
        {
            "name": "deviceToken",
            "baseName": "deviceToken",
            "type": "PushWhereObjectDeviceToken"
        }    ];

    static getAttributeTypeMap() {
        return PushWhereObject.attributeTypeMap;
    }
}

export namespace PushWhereObject {
    export enum DeviceTypeEnum {
        Ios = <any> 'ios',
        Android = <any> 'android'
    }
}
/**
* $in
*/
export class PushWhereObjectDeviceToken {
    '_in': Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "_in",
            "baseName": "$in",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return PushWhereObjectDeviceToken.attributeTypeMap;
    }
}

export class UpdateGroupObject {
    'fieldName'?: string;
    'users'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "string"
        },
        {
            "name": "users",
            "baseName": "users",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return UpdateGroupObject.attributeTypeMap;
    }
}

export class UpdateInstallationObject extends null<String, string> {
    'channels'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "channels",
            "baseName": "channels",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(UpdateInstallationObject.attributeTypeMap);
    }
}

export class UpdateObject {
    'fieldName'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UpdateObject.attributeTypeMap;
    }
}

export class UpdatedGroupObject {
    'updated': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UpdatedGroupObject.attributeTypeMap;
    }
}

export class UpdatedInstallationObject {
    'updated': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UpdatedInstallationObject.attributeTypeMap;
    }
}

export class UpdatedObject {
    'updated': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UpdatedObject.attributeTypeMap;
    }
}

export class UserCredentialsObject {
    'username': string;
    'password': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UserCredentialsObject.attributeTypeMap;
    }
}

export class UserObject extends null<String, string> {
    'id': string;
    'username': string;
    'meta': MetaObject;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        },
        {
            "name": "meta",
            "baseName": "_meta",
            "type": "MetaObject"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(UserObject.attributeTypeMap);
    }
}

export class UserSignUpResponseObject {
    'id': string;
    'sessionToken': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string"
        },
        {
            "name": "sessionToken",
            "baseName": "sessionToken",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UserSignUpResponseObject.attributeTypeMap;
    }
}

export class UserTokenObject {
    'id': string;
    'username': string;
    'meta': MetaObject;
    'sessiontoken': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        },
        {
            "name": "meta",
            "baseName": "_meta",
            "type": "MetaObject"
        },
        {
            "name": "sessiontoken",
            "baseName": "sessiontoken",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UserTokenObject.attributeTypeMap;
    }
}

export class UseridObject {
    'id': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UseridObject.attributeTypeMap;
    }
}

export class VersionObject {
    'version'?: string;
    'server'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        },
        {
            "name": "server",
            "baseName": "server",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VersionObject.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
        "InstallationObject.InstallationObject.DeviceTypeEnum": InstallationObject.InstallationObject.DeviceTypeEnum,
        "PushWhereObject.DeviceTypeEnum": PushWhereObject.DeviceTypeEnum,
}

let typeMap: {[index: string]: any} = {
    "ChannelName": ChannelName,
    "EdgeModuleAddObject": EdgeModuleAddObject,
    "EdgeModuleAddedObject": EdgeModuleAddedObject,
    "EdgeModuleObject": EdgeModuleObject,
    "EdgeModuleResourceAddObject": EdgeModuleResourceAddObject,
    "EdgeModuleResourceAddedObject": EdgeModuleResourceAddedObject,
    "EdgeModuleResourceObject": EdgeModuleResourceObject,
    "EdgeModuleResourceUpdateObject": EdgeModuleResourceUpdateObject,
    "EdgeModuleResourceUpdatedObject": EdgeModuleResourceUpdatedObject,
    "EdgeModuleUpdateObject": EdgeModuleUpdateObject,
    "EdgeModuleUpdatedObject": EdgeModuleUpdatedObject,
    "FieldGroupObject": FieldGroupObject,
    "FieldInstallationObject": FieldInstallationObject,
    "FieldObject": FieldObject,
    "FieldObjectFields": FieldObjectFields,
    "FieldsEdgeModuleObject": FieldsEdgeModuleObject,
    "GroupAddObject": GroupAddObject,
    "GroupName": GroupName,
    "GroupObject": GroupObject,
    "InstallationAddObject": InstallationAddObject,
    "InstallationAddedObject": InstallationAddedObject,
    "InstallationObject": InstallationObject,
    "MetaEdgeModuleObject": MetaEdgeModuleObject,
    "MetaGroupObject": MetaGroupObject,
    "MetaInstallationObject": MetaInstallationObject,
    "MetaObject": MetaObject,
    "PushDataObject": PushDataObject,
    "PushDataObjectAps": PushDataObjectAps,
    "PushDataObjectExtras": PushDataObjectExtras,
    "PushDataObjectGcm": PushDataObjectGcm,
    "PushObject": PushObject,
    "PushWhereObject": PushWhereObject,
    "PushWhereObjectDeviceToken": PushWhereObjectDeviceToken,
    "UpdateGroupObject": UpdateGroupObject,
    "UpdateInstallationObject": UpdateInstallationObject,
    "UpdateObject": UpdateObject,
    "UpdatedGroupObject": UpdatedGroupObject,
    "UpdatedInstallationObject": UpdatedInstallationObject,
    "UpdatedObject": UpdatedObject,
    "UserCredentialsObject": UserCredentialsObject,
    "UserObject": UserObject,
    "UserSignUpResponseObject": UserSignUpResponseObject,
    "UserTokenObject": UserTokenObject,
    "UseridObject": UseridObject,
    "VersionObject": VersionObject,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum ApiDocApiApiKeys {
}

export class ApiDocApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ApiDocApiApiKeys, value: string) {
        (this.authentications as any)[ApiDocApiApiKeys[key]].apiKey = value;
    }
    /**
     *  |      Used to retrieve all the API EndPoints.
     * @summary Get API EndPoints
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public aPI (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get API in JSON format
     * @summary Get JSON
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getAPIJSONFormat (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/apidoc.json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get API in YAML format
     * @summary Get YAML
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getAPIYAMLFormat (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/apidoc.yaml';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve an EndPoint for the API EndPoints.
     * @summary Get API EndPoint
     * @param item Path Segment to an EndPoint
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getAPIYAMLFormatEndPoint (item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/{item}/apidoc.yaml'
            .replace('{' + 'item' + '}', encodeURIComponent(String(item)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'item' is not null or undefined
        if (item === null || item === undefined) {
            throw new Error('Required parameter item was null or undefined when calling getAPIYAMLFormatEndPoint.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum EdgeModulesApiApiKeys {
}

export class EdgeModulesApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: EdgeModulesApiApiKeys, value: string) {
        (this.authentications as any)[EdgeModulesApiApiKeys[key]].apiKey = value;
    }
    /**
     *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Module
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getModule (mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: EdgeModuleObject;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getModule.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EdgeModuleObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EdgeModuleObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
     * @summary Get EdgeModule Resource
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getModuleResource (mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: EdgeModuleResourceObject;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/resources/{name}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getModuleResource.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getModuleResource.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EdgeModuleResourceObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EdgeModuleResourceObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from the resources of an EdgeModule.
     * @summary Get EdgeModule Resources
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getModuleResources (mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<EdgeModuleResourceObject>;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/resources'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getModuleResources.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<EdgeModuleResourceObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<EdgeModuleResourceObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Module
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getModules (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<EdgeModuleObject>;  }> {
        const localVarPath = this.basePath + '/edgemodules';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<EdgeModuleObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<EdgeModuleObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all the `field names` of the EMS EdgeModule (including the custom fields).
     * @summary Get Fields
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getModulesFields (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: FieldsEdgeModuleObject;  }> {
        const localVarPath = this.basePath + '/edgemodules/fields';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: FieldsEdgeModuleObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "FieldsEdgeModuleObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from the resources of all EdgeModules.
     * @summary Get EdgeModules Resources
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getResources (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<EdgeModuleResourceObject>;  }> {
        const localVarPath = this.basePath + '/edgemodules/resources';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<EdgeModuleResourceObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<EdgeModuleResourceObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve the `field names` of all the resources of the EMS EdgeModule (including the custom fields).
     * @summary Get Resource Fields
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getResourcesFields (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: FieldsEdgeModuleObject;  }> {
        const localVarPath = this.basePath + '/edgemodules/resources/fields';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: FieldsEdgeModuleObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "FieldsEdgeModuleObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to add a new `EdgeModule` object to the EMS database.
     * @summary Add Module
     * @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public registerModule (body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: EdgeModuleAddedObject;  }> {
        const localVarPath = this.basePath + '/edgemodules';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerModule.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "EdgeModuleAddObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EdgeModuleAddedObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EdgeModuleAddedObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
     * @summary Add Module Resource
     * @param mname Is the unique EMS EdgeModule identifier
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public registerModuleResource (mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: EdgeModuleResourceAddedObject;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/resources'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling registerModuleResource.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerModuleResource.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "EdgeModuleResourceAddObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EdgeModuleResourceAddedObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EdgeModuleResourceAddedObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
     * @summary Delete Module
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public unregisterModule (mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling unregisterModule.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
     * @summary Delete Module Resource
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public unregisterModuleResource (mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/resources/{name}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling unregisterModuleResource.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling unregisterModuleResource.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
     * @summary Update Module
     * @param mname Is the unique EMS EdgeModule identifier
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public updateModule (mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: EdgeModuleUpdatedObject;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling updateModule.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateModule.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "EdgeModuleUpdateObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EdgeModuleUpdatedObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EdgeModuleUpdatedObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
     * @summary Update Module Resource
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public updateModuleResource (mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: EdgeModuleResourceUpdatedObject;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/resources/{name}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling updateModuleResource.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling updateModuleResource.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateModuleResource.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "EdgeModuleResourceUpdateObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EdgeModuleResourceUpdatedObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EdgeModuleResourceUpdatedObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum EdgeModulesInvokersApiApiKeys {
}

export class EdgeModulesInvokersApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: EdgeModulesInvokersApiApiKeys, value: string) {
        (this.authentications as any)[EdgeModulesInvokersApiApiKeys[key]].apiKey = value;
    }
    /**
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Delete Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public deleteResourceEndpoint (mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling deleteResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling deleteResourceEndpoint.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Delete Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public deleteResourceEndpointItem (mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling deleteResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling deleteResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling deleteResourceEndpointItem.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Get Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getResourceEndpoint (mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling getResourceEndpoint.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Get Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getResourceEndpointItem (mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling getResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling getResourceEndpointItem.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Patch Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public patchResourceEndpoint (mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling patchResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling patchResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchResourceEndpoint.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Patch Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public patchResourceEndpointItem (mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchResourceEndpointItem.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Post Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public postResourceEndpoint (mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling postResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling postResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postResourceEndpoint.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Post Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public postResourceEndpointItem (mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postResourceEndpointItem.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Put Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public putResourceEndpoint (mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling putResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling putResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putResourceEndpoint.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Put Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public putResourceEndpointItem (mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putResourceEndpointItem.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum GroupsApiApiKeys {
}

export class GroupsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: GroupsApiApiKeys, value: string) {
        (this.authentications as any)[GroupsApiApiKeys[key]].apiKey = value;
    }
    /**
     *  |      Used to add a new `Group` object to the EMS database.
     * @summary Add Group
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public addGroup (body: GroupAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/groups';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addGroup.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "GroupAddObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to delete a `Group`. **item** is the unique EMS Group name in the EMS database.
     * @summary Delete Group
     * @param item A group name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public deleteGroup (item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/groups/{item}'
            .replace('{' + 'item' + '}', encodeURIComponent(String(item)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'item' is not null or undefined
        if (item === null || item === undefined) {
            throw new Error('Required parameter item was null or undefined when calling deleteGroup.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from a `Group`. **item** is the unique EMS Group name in the EMS database.
     * @summary Get Group
     * @param item A group name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getGroup (item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: GroupObject;  }> {
        const localVarPath = this.basePath + '/groups/{item}'
            .replace('{' + 'item' + '}', encodeURIComponent(String(item)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'item' is not null or undefined
        if (item === null || item === undefined) {
            throw new Error('Required parameter item was null or undefined when calling getGroup.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GroupObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "GroupObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all the `field names` of the EMS Group (including the custom fields).
     * @summary Get Fields
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getGroupFields (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<FieldGroupObject>;  }> {
        const localVarPath = this.basePath + '/groups/fields';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<FieldGroupObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<FieldGroupObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from `Groups`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Groups
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param skip users skipped
     * @param limit maximum number of results to return
     * @param order order ascending or descending (asc, desc)
     * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     * @param {*} [options] Override http request options.
     */
    public getGroups (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<GroupObject>;  }> {
        const localVarPath = this.basePath + '/groups';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (skip !== undefined) {
            localVarQueryParameters['skip'] = ObjectSerializer.serialize(skip, "number");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (order !== undefined) {
            localVarQueryParameters['order'] = ObjectSerializer.serialize(order, "number");
        }

        if (where !== undefined) {
            localVarQueryParameters['where'] = ObjectSerializer.serialize(where, "string");
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<GroupObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<GroupObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to update a `Group`. **item** is the unique EMS Group name in the EMS database.
     * @summary Update Group
     * @param item A group name
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public updateGroup (item: string, body: UpdateGroupObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: UpdatedGroupObject;  }> {
        const localVarPath = this.basePath + '/groups/{item}'
            .replace('{' + 'item' + '}', encodeURIComponent(String(item)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'item' is not null or undefined
        if (item === null || item === undefined) {
            throw new Error('Required parameter item was null or undefined when calling updateGroup.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateGroup.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UpdateGroupObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UpdatedGroupObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UpdatedGroupObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum InstallationsApiApiKeys {
}

export class InstallationsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: InstallationsApiApiKeys, value: string) {
        (this.authentications as any)[InstallationsApiApiKeys[key]].apiKey = value;
    }
    /**
     *  |      Used to add a new `Installation` object to the EMS database.
     * @summary Add Installation
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public addInstallation (body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: InstallationAddedObject;  }> {
        const localVarPath = this.basePath + '/installations';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addInstallation.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "InstallationAddObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: InstallationAddedObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "InstallationAddedObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to delete an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @summary Delete Installation
     * @param id A Installation ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public deleteInstallation (id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/installations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteInstallation.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @summary Get Installation Channels
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getChannels (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<ChannelName>;  }> {
        const localVarPath = this.basePath + '/installations/channels';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ChannelName>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ChannelName>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from a specific `Installation` (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @summary Get Installation
     * @param id A Installation ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getInstallation (id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: InstallationObject;  }> {
        const localVarPath = this.basePath + '/installations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstallation.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: InstallationObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "InstallationObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all the `field names` of the EMS Installation (including the custom fields).
     * @summary Get Fields
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getInstallationFields (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<FieldInstallationObject>;  }> {
        const localVarPath = this.basePath + '/installations/fields';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<FieldInstallationObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<FieldInstallationObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from `Installation`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Installations
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param skip users skipped
     * @param limit maximum number of results to return
     * @param order order ascending or descending (asc, desc)
     * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     * @param {*} [options] Override http request options.
     */
    public getInstallations (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<InstallationObject>;  }> {
        const localVarPath = this.basePath + '/installations';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (skip !== undefined) {
            localVarQueryParameters['skip'] = ObjectSerializer.serialize(skip, "number");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (order !== undefined) {
            localVarQueryParameters['order'] = ObjectSerializer.serialize(order, "number");
        }

        if (where !== undefined) {
            localVarQueryParameters['where'] = ObjectSerializer.serialize(where, "string");
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<InstallationObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<InstallationObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to update an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @summary Update Installation
     * @param id A Installation ID
     * @param body Installation fields to update
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public updateInstallation (id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: UpdatedInstallationObject;  }> {
        const localVarPath = this.basePath + '/installations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateInstallation.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateInstallation.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UpdateInstallationObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UpdatedInstallationObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UpdatedInstallationObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum PushApiApiKeys {
}

export class PushApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: PushApiApiKeys, value: string) {
        (this.authentications as any)[PushApiApiKeys[key]].apiKey = value;
    }
    /**
     * Used to send a push notification message to a registered device
     * @summary Send Push
     * @param body Object containing the Push Message data structure
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public send (body: PushObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/push';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling send.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PushObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum UsersApiApiKeys {
}

export class UsersApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: UsersApiApiKeys, value: string) {
        (this.authentications as any)[UsersApiApiKeys[key]].apiKey = value;
    }
    /**
     *  |      Used to add a new `User` object to the EMS database.
     * @summary Add User
     * @param body Object to add a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public addUser (body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: UseridObject;  }> {
        const localVarPath = this.basePath + '/users';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addUser.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UserCredentialsObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UseridObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UseridObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to delete a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @summary Delete User
     * @param id A user ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public deleteUser (id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/users/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUser.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @summary Get User
     * @param id A user ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getUser (id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: UserObject;  }> {
        const localVarPath = this.basePath + '/users/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUser.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UserObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UserObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all the `field names` of the EMS Users (including the custom fields).
     * @summary Get Fields
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getUserFields (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<FieldObject>;  }> {
        const localVarPath = this.basePath + '/users/fields';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<FieldObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<FieldObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @summary Get User Groups
     * @param id A user ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getUserGroups (id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<GroupName>;  }> {
        const localVarPath = this.basePath + '/users/{id}/groups'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUserGroups.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<GroupName>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<GroupName>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to retrieve all data from `Users`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Users
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param skip users skipped
     * @param limit maximum number of results to return
     * @param order order ascending or descending (asc, desc)
     * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     * @param {*} [options] Override http request options.
     */
    public getUsers (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<UserObject>;  }> {
        const localVarPath = this.basePath + '/users';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (skip !== undefined) {
            localVarQueryParameters['skip'] = ObjectSerializer.serialize(skip, "number");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (order !== undefined) {
            localVarQueryParameters['order'] = ObjectSerializer.serialize(order, "number");
        }

        if (where !== undefined) {
            localVarQueryParameters['where'] = ObjectSerializer.serialize(where, "string");
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<UserObject>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<UserObject>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Logs in to the EMS Server with a specific EMS User.
     * @summary Log In
     * @param body A user object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public loginUser (body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: UserTokenObject;  }> {
        const localVarPath = this.basePath + '/users/login';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling loginUser.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UserCredentialsObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UserTokenObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UserTokenObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * sPostLogoutSummaryDesc
     * @summary sPostLogoutSummaryTitle
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public logoutUser (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/users/logout';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Signs up to the EMS Server with an appropriate EMS User.
     * @summary Sign Up  User
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public signupUser (body: UserCredentialsObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: UserSignUpResponseObject;  }> {
        const localVarPath = this.basePath + '/users/signup';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling signupUser.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UserCredentialsObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UserSignUpResponseObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UserSignUpResponseObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     *  |      Used to update a `User`. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @summary Update User
     * @param id A user ID
     * @param body Add any fieldName
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public updateUser (id: string, body: UpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: UpdatedObject;  }> {
        const localVarPath = this.basePath + '/users/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateUser.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "UpdateObject")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UpdatedObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UpdatedObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum VersionApiApiKeys {
}

export class VersionApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: VersionApiApiKeys, value: string) {
        (this.authentications as any)[VersionApiApiKeys[key]].apiKey = value;
    }
    /**
     *  |      Used to retrieve the `Version` of the EMS Server.
     * @summary Get version
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param {*} [options] Override http request options.
     */
    public getVersion (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: VersionObject;  }> {
        const localVarPath = this.basePath + '/version';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        localVarHeaderParams['X-Embarcadero-Application-Id'] = ObjectSerializer.serialize(xEmbarcaderoApplicationId, "string");
        localVarHeaderParams['X-Embarcadero-App-Secret'] = ObjectSerializer.serialize(xEmbarcaderoAppSecret, "string");
        localVarHeaderParams['X-Embarcadero-Master-Secret'] = ObjectSerializer.serialize(xEmbarcaderoMasterSecret, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: VersionObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "VersionObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
