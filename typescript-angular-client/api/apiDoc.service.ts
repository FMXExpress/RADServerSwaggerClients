/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiDocService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get API EndPoints
     *  |      Used to retrieve all the API EndPoints.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public aPI(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public aPI(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public aPI(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public aPI(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get JSON
     * Get API in JSON format
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAPIJSONFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAPIJSONFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAPIJSONFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAPIJSONFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/apidoc.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get YAML
     * Get API in YAML format
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAPIYAMLFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAPIYAMLFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAPIYAMLFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAPIYAMLFormat(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/apidoc.yaml`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get API EndPoint
     *  |      Used to retrieve an EndPoint for the API EndPoints.
     * @param item Path Segment to an EndPoint
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAPIYAMLFormatEndPoint(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAPIYAMLFormatEndPoint(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAPIYAMLFormatEndPoint(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAPIYAMLFormatEndPoint(item: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (item === null || item === undefined) {
            throw new Error('Required parameter item was null or undefined when calling getAPIYAMLFormatEndPoint.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/${encodeURIComponent(String(item))}/apidoc.yaml`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
