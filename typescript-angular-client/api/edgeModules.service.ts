/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { EdgeModuleAddObject } from '../model/edgeModuleAddObject';
import { EdgeModuleAddedObject } from '../model/edgeModuleAddedObject';
import { EdgeModuleObject } from '../model/edgeModuleObject';
import { EdgeModuleResourceAddObject } from '../model/edgeModuleResourceAddObject';
import { EdgeModuleResourceAddedObject } from '../model/edgeModuleResourceAddedObject';
import { EdgeModuleResourceObject } from '../model/edgeModuleResourceObject';
import { EdgeModuleResourceUpdateObject } from '../model/edgeModuleResourceUpdateObject';
import { EdgeModuleResourceUpdatedObject } from '../model/edgeModuleResourceUpdatedObject';
import { EdgeModuleUpdateObject } from '../model/edgeModuleUpdateObject';
import { EdgeModuleUpdatedObject } from '../model/edgeModuleUpdatedObject';
import { FieldsEdgeModuleObject } from '../model/fieldsEdgeModuleObject';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EdgeModulesService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Module
     *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<EdgeModuleObject>;
    public getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EdgeModuleObject>>;
    public getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EdgeModuleObject>>;
    public getModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getModule.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EdgeModuleObject>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get EdgeModule Resource
     *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<EdgeModuleResourceObject>;
    public getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EdgeModuleResourceObject>>;
    public getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EdgeModuleResourceObject>>;
    public getModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getModuleResource.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getModuleResource.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EdgeModuleResourceObject>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get EdgeModule Resources
     *  |      Used to retrieve all data from the resources of an EdgeModule.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EdgeModuleResourceObject>>;
    public getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EdgeModuleResourceObject>>>;
    public getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EdgeModuleResourceObject>>>;
    public getModuleResources(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getModuleResources.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<EdgeModuleResourceObject>>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Module
     *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EdgeModuleObject>>;
    public getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EdgeModuleObject>>>;
    public getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EdgeModuleObject>>>;
    public getModules(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<EdgeModuleObject>>(`${this.basePath}/edgemodules`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Fields
     *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<FieldsEdgeModuleObject>;
    public getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FieldsEdgeModuleObject>>;
    public getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FieldsEdgeModuleObject>>;
    public getModulesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<FieldsEdgeModuleObject>(`${this.basePath}/edgemodules/fields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get EdgeModules Resources
     *  |      Used to retrieve all data from the resources of all EdgeModules.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EdgeModuleResourceObject>>;
    public getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EdgeModuleResourceObject>>>;
    public getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EdgeModuleResourceObject>>>;
    public getResources(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<EdgeModuleResourceObject>>(`${this.basePath}/edgemodules/resources`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Resource Fields
     *  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<FieldsEdgeModuleObject>;
    public getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FieldsEdgeModuleObject>>;
    public getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FieldsEdgeModuleObject>>;
    public getResourcesFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<FieldsEdgeModuleObject>(`${this.basePath}/edgemodules/resources/fields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Module
     *  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
     * @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<EdgeModuleAddedObject>;
    public registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EdgeModuleAddedObject>>;
    public registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EdgeModuleAddedObject>>;
    public registerModule(body: EdgeModuleAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerModule.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EdgeModuleAddedObject>(`${this.basePath}/edgemodules`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Module Resource
     *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<EdgeModuleResourceAddedObject>;
    public registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EdgeModuleResourceAddedObject>>;
    public registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EdgeModuleResourceAddedObject>>;
    public registerModuleResource(mname: string, body: EdgeModuleResourceAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling registerModuleResource.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerModuleResource.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EdgeModuleResourceAddedObject>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Module
     *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unregisterModule(mname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling unregisterModule.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Module Resource
     *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unregisterModuleResource(mname: string, name: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling unregisterModuleResource.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling unregisterModuleResource.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Module
     *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<EdgeModuleUpdatedObject>;
    public updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EdgeModuleUpdatedObject>>;
    public updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EdgeModuleUpdatedObject>>;
    public updateModule(mname: string, body: EdgeModuleUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling updateModule.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateModule.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<EdgeModuleUpdatedObject>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Module Resource
     *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
     * @param mname Is the unique EMS EdgeModule identifier
     * @param name Is the unique EMS EdgeModule Resource name
     * @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<EdgeModuleResourceUpdatedObject>;
    public updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EdgeModuleResourceUpdatedObject>>;
    public updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EdgeModuleResourceUpdatedObject>>;
    public updateModuleResource(mname: string, name: string, body: EdgeModuleResourceUpdateObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling updateModuleResource.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling updateModuleResource.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateModuleResource.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<EdgeModuleResourceUpdatedObject>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/resources/${encodeURIComponent(String(name))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
