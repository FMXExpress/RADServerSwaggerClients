/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EdgeModulesInvokersService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Invoke Resource Delete Method
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling deleteResourceEndpoint.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling deleteResourceEndpoint.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource/_* Delete Method
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling deleteResourceEndpointItem.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling deleteResourceEndpointItem.');
        }

        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling deleteResourceEndpointItem.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}/${encodeURIComponent(String(wildcard))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource Get Method
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getResourceEndpoint(mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getResourceEndpoint.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling getResourceEndpoint.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource/_* Get Method
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getResourceEndpointItem(mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getResourceEndpointItem.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling getResourceEndpointItem.');
        }

        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling getResourceEndpointItem.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}/${encodeURIComponent(String(wildcard))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource Patch Method
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public patchResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling patchResourceEndpoint.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling patchResourceEndpoint.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchResourceEndpoint.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource/_* Patch Method
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public patchResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling patchResourceEndpointItem.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling patchResourceEndpointItem.');
        }

        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling patchResourceEndpointItem.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchResourceEndpointItem.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}/${encodeURIComponent(String(wildcard))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource Post Method
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling postResourceEndpoint.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling postResourceEndpoint.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postResourceEndpoint.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource/_* Post Method
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling postResourceEndpointItem.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling postResourceEndpointItem.');
        }

        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling postResourceEndpointItem.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postResourceEndpointItem.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}/${encodeURIComponent(String(wildcard))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource Put Method
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putResourceEndpoint(mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling putResourceEndpoint.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling putResourceEndpoint.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putResourceEndpoint.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invoke Resource/_* Put Method
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putResourceEndpointItem(mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling putResourceEndpointItem.');
        }

        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling putResourceEndpointItem.');
        }

        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling putResourceEndpointItem.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putResourceEndpointItem.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/edgemodules/${encodeURIComponent(String(mname))}/${encodeURIComponent(String(rname))}/${encodeURIComponent(String(wildcard))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
