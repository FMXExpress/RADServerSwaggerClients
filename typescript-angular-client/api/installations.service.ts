/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ChannelName } from '../model/channelName';
import { FieldInstallationObject } from '../model/fieldInstallationObject';
import { InstallationAddObject } from '../model/installationAddObject';
import { InstallationAddedObject } from '../model/installationAddedObject';
import { InstallationObject } from '../model/installationObject';
import { UpdateInstallationObject } from '../model/updateInstallationObject';
import { UpdatedInstallationObject } from '../model/updatedInstallationObject';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class InstallationsService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add Installation
     *  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<InstallationAddedObject>;
    public addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstallationAddedObject>>;
    public addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstallationAddedObject>>;
    public addInstallation(body: InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addInstallation.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<InstallationAddedObject>(`${this.basePath}/installations`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Installation
     *  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @param id A Installation ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteInstallation.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/installations/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Installation Channels
     *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ChannelName>>;
    public getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChannelName>>>;
    public getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChannelName>>>;
    public getChannels(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ChannelName>>(`${this.basePath}/installations/channels`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Installation
     *  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @param id A Installation ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<InstallationObject>;
    public getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstallationObject>>;
    public getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstallationObject>>;
    public getInstallation(id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstallation.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstallationObject>(`${this.basePath}/installations/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Fields
     *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<FieldInstallationObject>>;
    public getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FieldInstallationObject>>>;
    public getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FieldInstallationObject>>>;
    public getInstallationFields(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<FieldInstallationObject>>(`${this.basePath}/installations/fields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Installations
     *  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param skip users skipped
     * @param limit maximum number of results to return
     * @param order order ascending or descending (asc, desc)
     * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<InstallationObject>>;
    public getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InstallationObject>>>;
    public getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InstallationObject>>>;
    public getInstallations(xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (where !== undefined && where !== null) {
            queryParameters = queryParameters.set('where', <any>where);
        }

        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<InstallationObject>>(`${this.basePath}/installations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Installation
     *  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @param id A Installation ID
     * @param body Installation fields to update
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'body', reportProgress?: boolean): Observable<UpdatedInstallationObject>;
    public updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdatedInstallationObject>>;
    public updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdatedInstallationObject>>;
    public updateInstallation(id: string, body: UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateInstallation.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateInstallation.');
        }




        let headers = this.defaultHeaders;
        if (xEmbarcaderoApplicationId !== undefined && xEmbarcaderoApplicationId !== null) {
            headers = headers.set('X-Embarcadero-Application-Id', String(xEmbarcaderoApplicationId));
        }
        if (xEmbarcaderoAppSecret !== undefined && xEmbarcaderoAppSecret !== null) {
            headers = headers.set('X-Embarcadero-App-Secret', String(xEmbarcaderoAppSecret));
        }
        if (xEmbarcaderoMasterSecret !== undefined && xEmbarcaderoMasterSecret !== null) {
            headers = headers.set('X-Embarcadero-Master-Secret', String(xEmbarcaderoMasterSecret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<UpdatedInstallationObject>(`${this.basePath}/installations/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
