--[[
  EMS API Documentation
 
  Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 
  OpenAPI spec version: 0.0.0
  
  Generated by: https://github.com/swagger-api/swagger-codegen.git
]]

--package swagger-client

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local swagger-client_field_group_object = require "swagger-client.model.field_group_object"
local swagger-client_group_object = require "swagger-client.model.group_object"
local swagger-client_group_add_object = require "swagger-client.model.group_add_object"
local swagger-client_update_group_object = require "swagger-client.model.update_group_object"
local swagger-client_updated_group_object = require "swagger-client.model.updated_group_object"

local groups_api = {}
local groups_api_mt = {
	__name = "groups_api";
	__index = groups_api;
}

local function new_groups_api(host, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	return setmetatable({
		host = host;
		basePath = basePath or "http://localhost:8080";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, groups_api_mt)
end

function groups_api:add_group(body, x_embarcadero_application_id, x_embarcadero_app_secret, x_embarcadero_master_secret)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		path = string.format("%s/groups",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	-- ref: https://github.com/swagger-api/swagger-codegen/pull/6252#issuecomment-321199879
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	-- ref: https://github.com/swagger-api/swagger-codegen/pull/6252#issuecomment-321199879
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	if x_embarcadero_application_id then
		req.headers:upsert("X-Embarcadero-Application-Id", x_embarcadero_application_id)
	end
	if x_embarcadero_app_secret then
		req.headers:upsert("X-Embarcadero-App-Secret", x_embarcadero_app_secret)
	end
	if x_embarcadero_master_secret then
		req.headers:upsert("X-Embarcadero-Master-Secret", x_embarcadero_master_secret)
	end
	req:set_body(dkjson.encode(body))


	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function groups_api:delete_group(item, x_embarcadero_application_id, x_embarcadero_app_secret, x_embarcadero_master_secret)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		path = string.format("%s/groups/%s",
			self.basePath, item);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	if x_embarcadero_application_id then
		req.headers:upsert("X-Embarcadero-Application-Id", x_embarcadero_application_id)
	end
	if x_embarcadero_app_secret then
		req.headers:upsert("X-Embarcadero-App-Secret", x_embarcadero_app_secret)
	end
	if x_embarcadero_master_secret then
		req.headers:upsert("X-Embarcadero-Master-Secret", x_embarcadero_master_secret)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function groups_api:get_group(item, x_embarcadero_application_id, x_embarcadero_app_secret, x_embarcadero_master_secret)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		path = string.format("%s/groups/%s",
			self.basePath, item);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	-- ref: https://github.com/swagger-api/swagger-codegen/pull/6252#issuecomment-321199879
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	if x_embarcadero_application_id then
		req.headers:upsert("X-Embarcadero-Application-Id", x_embarcadero_application_id)
	end
	if x_embarcadero_app_secret then
		req.headers:upsert("X-Embarcadero-App-Secret", x_embarcadero_app_secret)
	end
	if x_embarcadero_master_secret then
		req.headers:upsert("X-Embarcadero-Master-Secret", x_embarcadero_master_secret)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return swagger-client_group_object.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function groups_api:get_group_fields(x_embarcadero_application_id, x_embarcadero_app_secret, x_embarcadero_master_secret)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		path = string.format("%s/groups/fields",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	-- ref: https://github.com/swagger-api/swagger-codegen/pull/6252#issuecomment-321199879
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	if x_embarcadero_application_id then
		req.headers:upsert("X-Embarcadero-Application-Id", x_embarcadero_application_id)
	end
	if x_embarcadero_app_secret then
		req.headers:upsert("X-Embarcadero-App-Secret", x_embarcadero_app_secret)
	end
	if x_embarcadero_master_secret then
		req.headers:upsert("X-Embarcadero-Master-Secret", x_embarcadero_master_secret)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			swagger-client_field_group_object.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function groups_api:get_groups(x_embarcadero_application_id, x_embarcadero_app_secret, x_embarcadero_master_secret, skip, limit, order, where)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		path = string.format("%s/groups?skip=%s&limit=%s&order=%s&where=%s",
			self.basePath, http_util.encodeURIComponent(skip), http_util.encodeURIComponent(limit), http_util.encodeURIComponent(order), http_util.encodeURIComponent(where));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	-- ref: https://github.com/swagger-api/swagger-codegen/pull/6252#issuecomment-321199879
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	if x_embarcadero_application_id then
		req.headers:upsert("X-Embarcadero-Application-Id", x_embarcadero_application_id)
	end
	if x_embarcadero_app_secret then
		req.headers:upsert("X-Embarcadero-App-Secret", x_embarcadero_app_secret)
	end
	if x_embarcadero_master_secret then
		req.headers:upsert("X-Embarcadero-Master-Secret", x_embarcadero_master_secret)
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			swagger-client_group_object.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function groups_api:update_group(item, body, x_embarcadero_application_id, x_embarcadero_app_secret, x_embarcadero_master_secret)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		path = string.format("%s/groups/%s",
			self.basePath, item);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper accept
	-- ref: https://github.com/swagger-api/swagger-codegen/pull/6252#issuecomment-321199879
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	-- ref: https://github.com/swagger-api/swagger-codegen/pull/6252#issuecomment-321199879
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	if x_embarcadero_application_id then
		req.headers:upsert("X-Embarcadero-Application-Id", x_embarcadero_application_id)
	end
	if x_embarcadero_app_secret then
		req.headers:upsert("X-Embarcadero-App-Secret", x_embarcadero_app_secret)
	end
	if x_embarcadero_master_secret then
		req.headers:upsert("X-Embarcadero-Master-Secret", x_embarcadero_master_secret)
	end
	req:set_body(dkjson.encode(body))


	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return swagger-client_updated_group_object.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_groups_api;
}

