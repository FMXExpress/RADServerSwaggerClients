/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGEdgeModulesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGEdgeModulesApi::SWGEdgeModulesApi() {}

SWGEdgeModulesApi::~SWGEdgeModulesApi() {}

SWGEdgeModulesApi::SWGEdgeModulesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGEdgeModulesApi::getModule(QString* mname, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/{mname}");

    QString mnamePathParam("{"); mnamePathParam.append("mname").append("}");
    fullPath.replace(mnamePathParam, stringValue(mname));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::getModuleCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::getModuleCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGEdgeModuleObject* output = static_cast<SWGEdgeModuleObject*>(create(json, QString("SWGEdgeModuleObject")));
    auto wrapper = new SWGQObjectWrapper<SWGEdgeModuleObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getModuleSignal(output);
    } else {
        emit getModuleSignalE(output, error_type, error_str);
        emit getModuleSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::getModuleResource(QString* mname, QString* name, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/{mname}/resources/{name}");

    QString mnamePathParam("{"); mnamePathParam.append("mname").append("}");
    fullPath.replace(mnamePathParam, stringValue(mname));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::getModuleResourceCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::getModuleResourceCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGEdgeModuleResourceObject* output = static_cast<SWGEdgeModuleResourceObject*>(create(json, QString("SWGEdgeModuleResourceObject")));
    auto wrapper = new SWGQObjectWrapper<SWGEdgeModuleResourceObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getModuleResourceSignal(output);
    } else {
        emit getModuleResourceSignalE(output, error_type, error_str);
        emit getModuleResourceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::getModuleResources(QString* mname, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/{mname}/resources");

    QString mnamePathParam("{"); mnamePathParam.append("mname").append("}");
    fullPath.replace(mnamePathParam, stringValue(mname));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::getModuleResourcesCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::getModuleResourcesCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGEdgeModuleResourceObject*>* output = new QList<SWGEdgeModuleResourceObject*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGEdgeModuleResourceObject*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGEdgeModuleResourceObject* o = new SWGEdgeModuleResourceObject();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGEdgeModuleResourceObject*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getModuleResourcesSignal(output);
    } else {
        emit getModuleResourcesSignalE(output, error_type, error_str);
        emit getModuleResourcesSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::getModules(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::getModulesCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::getModulesCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGEdgeModuleObject*>* output = new QList<SWGEdgeModuleObject*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGEdgeModuleObject*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGEdgeModuleObject* o = new SWGEdgeModuleObject();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGEdgeModuleObject*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getModulesSignal(output);
    } else {
        emit getModulesSignalE(output, error_type, error_str);
        emit getModulesSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::getModulesFields(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/fields");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::getModulesFieldsCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::getModulesFieldsCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGFieldsEdgeModuleObject* output = static_cast<SWGFieldsEdgeModuleObject*>(create(json, QString("SWGFieldsEdgeModuleObject")));
    auto wrapper = new SWGQObjectWrapper<SWGFieldsEdgeModuleObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getModulesFieldsSignal(output);
    } else {
        emit getModulesFieldsSignalE(output, error_type, error_str);
        emit getModulesFieldsSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::getResources(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/resources");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::getResourcesCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::getResourcesCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGEdgeModuleResourceObject*>* output = new QList<SWGEdgeModuleResourceObject*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGEdgeModuleResourceObject*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGEdgeModuleResourceObject* o = new SWGEdgeModuleResourceObject();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGEdgeModuleResourceObject*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getResourcesSignal(output);
    } else {
        emit getResourcesSignalE(output, error_type, error_str);
        emit getResourcesSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::getResourcesFields(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/resources/fields");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::getResourcesFieldsCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::getResourcesFieldsCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGFieldsEdgeModuleObject* output = static_cast<SWGFieldsEdgeModuleObject*>(create(json, QString("SWGFieldsEdgeModuleObject")));
    auto wrapper = new SWGQObjectWrapper<SWGFieldsEdgeModuleObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getResourcesFieldsSignal(output);
    } else {
        emit getResourcesFieldsSignalE(output, error_type, error_str);
        emit getResourcesFieldsSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::registerModule(SWGEdgeModuleAddObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");


    
    QString output = body.asJson();
    input.request_body.append(output);
    

    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::registerModuleCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::registerModuleCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGEdgeModuleAddedObject* output = static_cast<SWGEdgeModuleAddedObject*>(create(json, QString("SWGEdgeModuleAddedObject")));
    auto wrapper = new SWGQObjectWrapper<SWGEdgeModuleAddedObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit registerModuleSignal(output);
    } else {
        emit registerModuleSignalE(output, error_type, error_str);
        emit registerModuleSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::registerModuleResource(QString* mname, SWGEdgeModuleResourceAddObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/{mname}/resources");

    QString mnamePathParam("{"); mnamePathParam.append("mname").append("}");
    fullPath.replace(mnamePathParam, stringValue(mname));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");


    
    QString output = body.asJson();
    input.request_body.append(output);
    

    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::registerModuleResourceCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::registerModuleResourceCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGEdgeModuleResourceAddedObject* output = static_cast<SWGEdgeModuleResourceAddedObject*>(create(json, QString("SWGEdgeModuleResourceAddedObject")));
    auto wrapper = new SWGQObjectWrapper<SWGEdgeModuleResourceAddedObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit registerModuleResourceSignal(output);
    } else {
        emit registerModuleResourceSignalE(output, error_type, error_str);
        emit registerModuleResourceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::unregisterModule(QString* mname, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/{mname}");

    QString mnamePathParam("{"); mnamePathParam.append("mname").append("}");
    fullPath.replace(mnamePathParam, stringValue(mname));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::unregisterModuleCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::unregisterModuleCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit unregisterModuleSignal();
    } else {
        emit unregisterModuleSignalE(error_type, error_str);
        emit unregisterModuleSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::unregisterModuleResource(QString* mname, QString* name, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/{mname}/resources/{name}");

    QString mnamePathParam("{"); mnamePathParam.append("mname").append("}");
    fullPath.replace(mnamePathParam, stringValue(mname));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");




    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::unregisterModuleResourceCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::unregisterModuleResourceCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit unregisterModuleResourceSignal();
    } else {
        emit unregisterModuleResourceSignalE(error_type, error_str);
        emit unregisterModuleResourceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::updateModule(QString* mname, SWGEdgeModuleUpdateObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/{mname}");

    QString mnamePathParam("{"); mnamePathParam.append("mname").append("}");
    fullPath.replace(mnamePathParam, stringValue(mname));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "PUT");


    
    QString output = body.asJson();
    input.request_body.append(output);
    

    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::updateModuleCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::updateModuleCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGEdgeModuleUpdatedObject* output = static_cast<SWGEdgeModuleUpdatedObject*>(create(json, QString("SWGEdgeModuleUpdatedObject")));
    auto wrapper = new SWGQObjectWrapper<SWGEdgeModuleUpdatedObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateModuleSignal(output);
    } else {
        emit updateModuleSignalE(output, error_type, error_str);
        emit updateModuleSignalEFull(worker, error_type, error_str);
    }
}

void
SWGEdgeModulesApi::updateModuleResource(QString* mname, QString* name, SWGEdgeModuleResourceUpdateObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edgemodules/{mname}/resources/{name}");

    QString mnamePathParam("{"); mnamePathParam.append("mname").append("}");
    fullPath.replace(mnamePathParam, stringValue(mname));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "PUT");


    
    QString output = body.asJson();
    input.request_body.append(output);
    

    if (x_embarcadero_application_id != nullptr) {
        input.headers.insert("X-Embarcadero-Application-Id", "x_embarcadero_application_id");
    }
    if (x_embarcadero_app_secret != nullptr) {
        input.headers.insert("X-Embarcadero-App-Secret", "x_embarcadero_app_secret");
    }
    if (x_embarcadero_master_secret != nullptr) {
        input.headers.insert("X-Embarcadero-Master-Secret", "x_embarcadero_master_secret");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGEdgeModulesApi::updateModuleResourceCallback);

    worker->execute(&input);
}

void
SWGEdgeModulesApi::updateModuleResourceCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGEdgeModuleResourceUpdatedObject* output = static_cast<SWGEdgeModuleResourceUpdatedObject*>(create(json, QString("SWGEdgeModuleResourceUpdatedObject")));
    auto wrapper = new SWGQObjectWrapper<SWGEdgeModuleResourceUpdatedObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateModuleResourceSignal(output);
    } else {
        emit updateModuleResourceSignalE(output, error_type, error_str);
        emit updateModuleResourceSignalEFull(worker, error_type, error_str);
    }
}


}
