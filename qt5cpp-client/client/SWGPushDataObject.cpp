/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPushDataObject.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGPushDataObject::SWGPushDataObject(QString json) {
    init();
    this->fromJson(json);
}

SWGPushDataObject::SWGPushDataObject() {
    init();
}

SWGPushDataObject::~SWGPushDataObject() {
    this->cleanup();
}

void
SWGPushDataObject::init() {
    gcm = new SWGPushDataObject_gcm();
    m_gcm_isSet = false;
    aps = new SWGPushDataObject_aps();
    m_aps_isSet = false;
    extras = new SWGPushDataObject_extras();
    m_extras_isSet = false;
}

void
SWGPushDataObject::cleanup() {
    if(gcm != nullptr) { 
        delete gcm;
    }
    if(aps != nullptr) { 
        delete aps;
    }
    if(extras != nullptr) { 
        delete extras;
    }
}

SWGPushDataObject*
SWGPushDataObject::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPushDataObject::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&gcm, pJson["gcm"], "SWGPushDataObject_gcm", "SWGPushDataObject_gcm");
    
    ::Swagger::setValue(&aps, pJson["aps"], "SWGPushDataObject_aps", "SWGPushDataObject_aps");
    
    ::Swagger::setValue(&extras, pJson["extras"], "SWGPushDataObject_extras", "SWGPushDataObject_extras");
    
}

QString
SWGPushDataObject::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGPushDataObject::asJsonObject() {
    QJsonObject obj;
    if((gcm != nullptr) && (gcm->isSet())){
        toJsonValue(QString("gcm"), gcm, obj, QString("SWGPushDataObject_gcm"));
    }
    if((aps != nullptr) && (aps->isSet())){
        toJsonValue(QString("aps"), aps, obj, QString("SWGPushDataObject_aps"));
    }
    if((extras != nullptr) && (extras->isSet())){
        toJsonValue(QString("extras"), extras, obj, QString("SWGPushDataObject_extras"));
    }

    return obj;
}

SWGPushDataObject_gcm*
SWGPushDataObject::getGcm() {
    return gcm;
}
void
SWGPushDataObject::setGcm(SWGPushDataObject_gcm* gcm) {
    this->gcm = gcm;
    this->m_gcm_isSet = true;
}

SWGPushDataObject_aps*
SWGPushDataObject::getAps() {
    return aps;
}
void
SWGPushDataObject::setAps(SWGPushDataObject_aps* aps) {
    this->aps = aps;
    this->m_aps_isSet = true;
}

SWGPushDataObject_extras*
SWGPushDataObject::getExtras() {
    return extras;
}
void
SWGPushDataObject::setExtras(SWGPushDataObject_extras* extras) {
    this->extras = extras;
    this->m_extras_isSet = true;
}


bool
SWGPushDataObject::isSet(){
    bool isObjectUpdated = false;
    do{
        if(gcm != nullptr && gcm->isSet()){ isObjectUpdated = true; break;}
        if(aps != nullptr && aps->isSet()){ isObjectUpdated = true; break;}
        if(extras != nullptr && extras->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

