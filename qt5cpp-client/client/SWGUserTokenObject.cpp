/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUserTokenObject.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGUserTokenObject::SWGUserTokenObject(QString json) {
    init();
    this->fromJson(json);
}

SWGUserTokenObject::SWGUserTokenObject() {
    init();
}

SWGUserTokenObject::~SWGUserTokenObject() {
    this->cleanup();
}

void
SWGUserTokenObject::init() {
    id = new QString("");
    m_id_isSet = false;
    username = new QString("");
    m_username_isSet = false;
    _meta = new SWG_metaObject();
    m__meta_isSet = false;
    sessiontoken = new QString("");
    m_sessiontoken_isSet = false;
}

void
SWGUserTokenObject::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(username != nullptr) { 
        delete username;
    }
    if(_meta != nullptr) { 
        delete _meta;
    }
    if(sessiontoken != nullptr) { 
        delete sessiontoken;
    }
}

SWGUserTokenObject*
SWGUserTokenObject::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUserTokenObject::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    
    ::Swagger::setValue(&username, pJson["username"], "QString", "QString");
    
    ::Swagger::setValue(&_meta, pJson["_meta"], "SWG_metaObject", "SWG_metaObject");
    
    ::Swagger::setValue(&sessiontoken, pJson["sessiontoken"], "QString", "QString");
    
}

QString
SWGUserTokenObject::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGUserTokenObject::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(username != nullptr && *username != QString("")){
        toJsonValue(QString("username"), username, obj, QString("QString"));
    }
    if((_meta != nullptr) && (_meta->isSet())){
        toJsonValue(QString("_meta"), _meta, obj, QString("SWG_metaObject"));
    }
    if(sessiontoken != nullptr && *sessiontoken != QString("")){
        toJsonValue(QString("sessiontoken"), sessiontoken, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGUserTokenObject::getId() {
    return id;
}
void
SWGUserTokenObject::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
SWGUserTokenObject::getUsername() {
    return username;
}
void
SWGUserTokenObject::setUsername(QString* username) {
    this->username = username;
    this->m_username_isSet = true;
}

SWG_metaObject*
SWGUserTokenObject::getMeta() {
    return _meta;
}
void
SWGUserTokenObject::setMeta(SWG_metaObject* _meta) {
    this->_meta = _meta;
    this->m__meta_isSet = true;
}

QString*
SWGUserTokenObject::getSessiontoken() {
    return sessiontoken;
}
void
SWGUserTokenObject::setSessiontoken(QString* sessiontoken) {
    this->sessiontoken = sessiontoken;
    this->m_sessiontoken_isSet = true;
}


bool
SWGUserTokenObject::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(username != nullptr && *username != QString("")){ isObjectUpdated = true; break;}
        if(_meta != nullptr && _meta->isSet()){ isObjectUpdated = true; break;}
        if(sessiontoken != nullptr && *sessiontoken != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

