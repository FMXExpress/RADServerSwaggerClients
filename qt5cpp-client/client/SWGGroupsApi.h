/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGGroupsApi_H_
#define _SWG_SWGGroupsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGFieldGroupObject.h"
#include "SWGGroupAddObject.h"
#include "SWGGroupObject.h"
#include "SWGNumber.h"
#include "SWGUpdateGroupObject.h"
#include "SWGUpdatedGroupObject.h"

#include <QObject>

namespace Swagger {

class SWGGroupsApi: public QObject {
    Q_OBJECT

public:
    SWGGroupsApi();
    SWGGroupsApi(QString host, QString basePath);
    ~SWGGroupsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void addGroup(SWGGroupAddObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void deleteGroup(QString* item, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getGroup(QString* item, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getGroupFields(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getGroups(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret, SWGNumber* skip, SWGNumber* limit, SWGNumber* order, QString* where);
    void updateGroup(QString* item, SWGUpdateGroupObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    
private:
    void addGroupCallback (SWGHttpRequestWorker * worker);
    void deleteGroupCallback (SWGHttpRequestWorker * worker);
    void getGroupCallback (SWGHttpRequestWorker * worker);
    void getGroupFieldsCallback (SWGHttpRequestWorker * worker);
    void getGroupsCallback (SWGHttpRequestWorker * worker);
    void updateGroupCallback (SWGHttpRequestWorker * worker);
    
signals:
    void addGroupSignal();
    void deleteGroupSignal();
    void getGroupSignal(SWGGroupObject* summary);
    void getGroupFieldsSignal(QList<SWGFieldGroupObject*>* summary);
    void getGroupsSignal(QList<SWGGroupObject*>* summary);
    void updateGroupSignal(SWGUpdatedGroupObject* summary);
    
    void addGroupSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteGroupSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getGroupSignalE(SWGGroupObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getGroupFieldsSignalE(QList<SWGFieldGroupObject*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getGroupsSignalE(QList<SWGGroupObject*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateGroupSignalE(SWGUpdatedGroupObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void addGroupSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteGroupSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getGroupSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getGroupFieldsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getGroupsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateGroupSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
