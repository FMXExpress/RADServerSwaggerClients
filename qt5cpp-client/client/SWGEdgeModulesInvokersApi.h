/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGEdgeModulesInvokersApi_H_
#define _SWG_SWGEdgeModulesInvokersApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGObject.h"

#include <QObject>

namespace Swagger {

class SWGEdgeModulesInvokersApi: public QObject {
    Q_OBJECT

public:
    SWGEdgeModulesInvokersApi();
    SWGEdgeModulesInvokersApi(QString host, QString basePath);
    ~SWGEdgeModulesInvokersApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void deleteResourceEndpoint(QString* mname, QString* rname, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void deleteResourceEndpointItem(QString* mname, QString* rname, QString* wildcard, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getResourceEndpoint(QString* mname, QString* rname, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getResourceEndpointItem(QString* mname, QString* rname, QString* wildcard, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void patchResourceEndpoint(QString* mname, QString* rname, SWGObject*& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void patchResourceEndpointItem(QString* mname, QString* rname, QString* wildcard, SWGObject*& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void postResourceEndpoint(QString* mname, QString* rname, SWGObject*& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void postResourceEndpointItem(QString* mname, QString* rname, QString* wildcard, SWGObject*& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void putResourceEndpoint(QString* mname, QString* rname, SWGObject*& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void putResourceEndpointItem(QString* mname, QString* rname, QString* wildcard, SWGObject*& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    
private:
    void deleteResourceEndpointCallback (SWGHttpRequestWorker * worker);
    void deleteResourceEndpointItemCallback (SWGHttpRequestWorker * worker);
    void getResourceEndpointCallback (SWGHttpRequestWorker * worker);
    void getResourceEndpointItemCallback (SWGHttpRequestWorker * worker);
    void patchResourceEndpointCallback (SWGHttpRequestWorker * worker);
    void patchResourceEndpointItemCallback (SWGHttpRequestWorker * worker);
    void postResourceEndpointCallback (SWGHttpRequestWorker * worker);
    void postResourceEndpointItemCallback (SWGHttpRequestWorker * worker);
    void putResourceEndpointCallback (SWGHttpRequestWorker * worker);
    void putResourceEndpointItemCallback (SWGHttpRequestWorker * worker);
    
signals:
    void deleteResourceEndpointSignal();
    void deleteResourceEndpointItemSignal();
    void getResourceEndpointSignal();
    void getResourceEndpointItemSignal();
    void patchResourceEndpointSignal();
    void patchResourceEndpointItemSignal();
    void postResourceEndpointSignal();
    void postResourceEndpointItemSignal();
    void putResourceEndpointSignal();
    void putResourceEndpointItemSignal();
    
    void deleteResourceEndpointSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteResourceEndpointItemSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getResourceEndpointSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getResourceEndpointItemSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void patchResourceEndpointSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void patchResourceEndpointItemSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postResourceEndpointSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postResourceEndpointItemSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void putResourceEndpointSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void putResourceEndpointItemSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    
    void deleteResourceEndpointSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteResourceEndpointItemSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getResourceEndpointSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getResourceEndpointItemSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void patchResourceEndpointSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void patchResourceEndpointItemSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postResourceEndpointSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postResourceEndpointItemSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putResourceEndpointSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putResourceEndpointItemSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
