/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGUsersApi_H_
#define _SWG_SWGUsersApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGFieldObject.h"
#include "SWGGroupName.h"
#include "SWGNumber.h"
#include "SWGUpdateObject.h"
#include "SWGUpdatedObject.h"
#include "SWGUserCredentialsObject.h"
#include "SWGUserObject.h"
#include "SWGUserSignUpResponseObject.h"
#include "SWGUserTokenObject.h"
#include "SWGUseridObject.h"

#include <QObject>

namespace Swagger {

class SWGUsersApi: public QObject {
    Q_OBJECT

public:
    SWGUsersApi();
    SWGUsersApi(QString host, QString basePath);
    ~SWGUsersApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void addUser(SWGUserCredentialsObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void deleteUser(QString* id, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getUser(QString* id, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getUserFields(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getUserGroups(QString* id, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getUsers(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret, SWGNumber* skip, SWGNumber* limit, SWGNumber* order, QString* where);
    void loginUser(SWGUserCredentialsObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void logoutUser(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void signupUser(SWGUserCredentialsObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void updateUser(QString* id, SWGUpdateObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    
private:
    void addUserCallback (SWGHttpRequestWorker * worker);
    void deleteUserCallback (SWGHttpRequestWorker * worker);
    void getUserCallback (SWGHttpRequestWorker * worker);
    void getUserFieldsCallback (SWGHttpRequestWorker * worker);
    void getUserGroupsCallback (SWGHttpRequestWorker * worker);
    void getUsersCallback (SWGHttpRequestWorker * worker);
    void loginUserCallback (SWGHttpRequestWorker * worker);
    void logoutUserCallback (SWGHttpRequestWorker * worker);
    void signupUserCallback (SWGHttpRequestWorker * worker);
    void updateUserCallback (SWGHttpRequestWorker * worker);
    
signals:
    void addUserSignal(SWGUseridObject* summary);
    void deleteUserSignal();
    void getUserSignal(SWGUserObject* summary);
    void getUserFieldsSignal(QList<SWGFieldObject*>* summary);
    void getUserGroupsSignal(QList<SWGGroupName*>* summary);
    void getUsersSignal(QList<SWGUserObject*>* summary);
    void loginUserSignal(SWGUserTokenObject* summary);
    void logoutUserSignal();
    void signupUserSignal(SWGUserSignUpResponseObject* summary);
    void updateUserSignal(SWGUpdatedObject* summary);
    
    void addUserSignalE(SWGUseridObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserSignalE(SWGUserObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserFieldsSignalE(QList<SWGFieldObject*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserGroupsSignalE(QList<SWGGroupName*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUsersSignalE(QList<SWGUserObject*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void loginUserSignalE(SWGUserTokenObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void logoutUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void signupUserSignalE(SWGUserSignUpResponseObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserSignalE(SWGUpdatedObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void addUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserFieldsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserGroupsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUsersSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void loginUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void logoutUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void signupUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
