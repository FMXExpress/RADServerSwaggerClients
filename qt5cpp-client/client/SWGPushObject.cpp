/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPushObject.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGPushObject::SWGPushObject(QString json) {
    init();
    this->fromJson(json);
}

SWGPushObject::SWGPushObject() {
    init();
}

SWGPushObject::~SWGPushObject() {
    this->cleanup();
}

void
SWGPushObject::init() {
    data = new SWGPushDataObject();
    m_data_isSet = false;
    channels = new QList<QString*>();
    m_channels_isSet = false;
    where = new SWGPushWhereObject();
    m_where_isSet = false;
}

void
SWGPushObject::cleanup() {
    if(data != nullptr) { 
        delete data;
    }
    if(channels != nullptr) { 
        auto arr = channels;
        for(auto o: *arr) { 
            delete o;
        }
        delete channels;
    }
    if(where != nullptr) { 
        delete where;
    }
}

SWGPushObject*
SWGPushObject::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPushObject::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&data, pJson["data"], "SWGPushDataObject", "SWGPushDataObject");
    
    
    ::Swagger::setValue(&channels, pJson["channels"], "QList", "QString");
    ::Swagger::setValue(&where, pJson["where"], "SWGPushWhereObject", "SWGPushWhereObject");
    
}

QString
SWGPushObject::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGPushObject::asJsonObject() {
    QJsonObject obj;
    if((data != nullptr) && (data->isSet())){
        toJsonValue(QString("data"), data, obj, QString("SWGPushDataObject"));
    }
    if(channels->size() > 0){
        toJsonArray((QList<void*>*)channels, obj, "channels", "QString");
    }
    if((where != nullptr) && (where->isSet())){
        toJsonValue(QString("where"), where, obj, QString("SWGPushWhereObject"));
    }

    return obj;
}

SWGPushDataObject*
SWGPushObject::getData() {
    return data;
}
void
SWGPushObject::setData(SWGPushDataObject* data) {
    this->data = data;
    this->m_data_isSet = true;
}

QList<QString*>*
SWGPushObject::getChannels() {
    return channels;
}
void
SWGPushObject::setChannels(QList<QString*>* channels) {
    this->channels = channels;
    this->m_channels_isSet = true;
}

SWGPushWhereObject*
SWGPushObject::getWhere() {
    return where;
}
void
SWGPushObject::setWhere(SWGPushWhereObject* where) {
    this->where = where;
    this->m_where_isSet = true;
}


bool
SWGPushObject::isSet(){
    bool isObjectUpdated = false;
    do{
        if(data != nullptr && data->isSet()){ isObjectUpdated = true; break;}
        if(channels->size() > 0){ isObjectUpdated = true; break;}
        if(where != nullptr && where->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

