/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWG_metaObject.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWG_metaObject::SWG_metaObject(QString json) {
    init();
    this->fromJson(json);
}

SWG_metaObject::SWG_metaObject() {
    init();
}

SWG_metaObject::~SWG_metaObject() {
    this->cleanup();
}

void
SWG_metaObject::init() {
    creator = new QString("");
    m_creator_isSet = false;
    created = new QString("");
    m_created_isSet = false;
    updated = new QString("");
    m_updated_isSet = false;
}

void
SWG_metaObject::cleanup() {
    if(creator != nullptr) { 
        delete creator;
    }
    if(created != nullptr) { 
        delete created;
    }
    if(updated != nullptr) { 
        delete updated;
    }
}

SWG_metaObject*
SWG_metaObject::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWG_metaObject::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&creator, pJson["creator"], "QString", "QString");
    
    ::Swagger::setValue(&created, pJson["created"], "QString", "QString");
    
    ::Swagger::setValue(&updated, pJson["updated"], "QString", "QString");
    
}

QString
SWG_metaObject::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWG_metaObject::asJsonObject() {
    QJsonObject obj;
    if(creator != nullptr && *creator != QString("")){
        toJsonValue(QString("creator"), creator, obj, QString("QString"));
    }
    if(created != nullptr && *created != QString("")){
        toJsonValue(QString("created"), created, obj, QString("QString"));
    }
    if(updated != nullptr && *updated != QString("")){
        toJsonValue(QString("updated"), updated, obj, QString("QString"));
    }

    return obj;
}

QString*
SWG_metaObject::getCreator() {
    return creator;
}
void
SWG_metaObject::setCreator(QString* creator) {
    this->creator = creator;
    this->m_creator_isSet = true;
}

QString*
SWG_metaObject::getCreated() {
    return created;
}
void
SWG_metaObject::setCreated(QString* created) {
    this->created = created;
    this->m_created_isSet = true;
}

QString*
SWG_metaObject::getUpdated() {
    return updated;
}
void
SWG_metaObject::setUpdated(QString* updated) {
    this->updated = updated;
    this->m_updated_isSet = true;
}


bool
SWG_metaObject::isSet(){
    bool isObjectUpdated = false;
    do{
        if(creator != nullptr && *creator != QString("")){ isObjectUpdated = true; break;}
        if(created != nullptr && *created != QString("")){ isObjectUpdated = true; break;}
        if(updated != nullptr && *updated != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

