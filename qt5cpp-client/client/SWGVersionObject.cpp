/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGVersionObject.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGVersionObject::SWGVersionObject(QString json) {
    init();
    this->fromJson(json);
}

SWGVersionObject::SWGVersionObject() {
    init();
}

SWGVersionObject::~SWGVersionObject() {
    this->cleanup();
}

void
SWGVersionObject::init() {
    version = new QString("");
    m_version_isSet = false;
    server = new QString("");
    m_server_isSet = false;
}

void
SWGVersionObject::cleanup() {
    if(version != nullptr) { 
        delete version;
    }
    if(server != nullptr) { 
        delete server;
    }
}

SWGVersionObject*
SWGVersionObject::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVersionObject::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&version, pJson["version"], "QString", "QString");
    
    ::Swagger::setValue(&server, pJson["server"], "QString", "QString");
    
}

QString
SWGVersionObject::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGVersionObject::asJsonObject() {
    QJsonObject obj;
    if(version != nullptr && *version != QString("")){
        toJsonValue(QString("version"), version, obj, QString("QString"));
    }
    if(server != nullptr && *server != QString("")){
        toJsonValue(QString("server"), server, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGVersionObject::getVersion() {
    return version;
}
void
SWGVersionObject::setVersion(QString* version) {
    this->version = version;
    this->m_version_isSet = true;
}

QString*
SWGVersionObject::getServer() {
    return server;
}
void
SWGVersionObject::setServer(QString* server) {
    this->server = server;
    this->m_server_isSet = true;
}


bool
SWGVersionObject::isSet(){
    bool isObjectUpdated = false;
    do{
        if(version != nullptr && *version != QString("")){ isObjectUpdated = true; break;}
        if(server != nullptr && *server != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

