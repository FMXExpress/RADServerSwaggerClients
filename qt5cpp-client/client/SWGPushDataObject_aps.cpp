/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPushDataObject_aps.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGPushDataObject_aps::SWGPushDataObject_aps(QString json) {
    init();
    this->fromJson(json);
}

SWGPushDataObject_aps::SWGPushDataObject_aps() {
    init();
}

SWGPushDataObject_aps::~SWGPushDataObject_aps() {
    this->cleanup();
}

void
SWGPushDataObject_aps::init() {
    alert = new QString("");
    m_alert_isSet = false;
    badge = new QString("");
    m_badge_isSet = false;
    sound = new QString("");
    m_sound_isSet = false;
}

void
SWGPushDataObject_aps::cleanup() {
    if(alert != nullptr) { 
        delete alert;
    }
    if(badge != nullptr) { 
        delete badge;
    }
    if(sound != nullptr) { 
        delete sound;
    }
}

SWGPushDataObject_aps*
SWGPushDataObject_aps::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPushDataObject_aps::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&alert, pJson["alert"], "QString", "QString");
    
    ::Swagger::setValue(&badge, pJson["badge"], "QString", "QString");
    
    ::Swagger::setValue(&sound, pJson["sound"], "QString", "QString");
    
}

QString
SWGPushDataObject_aps::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGPushDataObject_aps::asJsonObject() {
    QJsonObject obj;
    if(alert != nullptr && *alert != QString("")){
        toJsonValue(QString("alert"), alert, obj, QString("QString"));
    }
    if(badge != nullptr && *badge != QString("")){
        toJsonValue(QString("badge"), badge, obj, QString("QString"));
    }
    if(sound != nullptr && *sound != QString("")){
        toJsonValue(QString("sound"), sound, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGPushDataObject_aps::getAlert() {
    return alert;
}
void
SWGPushDataObject_aps::setAlert(QString* alert) {
    this->alert = alert;
    this->m_alert_isSet = true;
}

QString*
SWGPushDataObject_aps::getBadge() {
    return badge;
}
void
SWGPushDataObject_aps::setBadge(QString* badge) {
    this->badge = badge;
    this->m_badge_isSet = true;
}

QString*
SWGPushDataObject_aps::getSound() {
    return sound;
}
void
SWGPushDataObject_aps::setSound(QString* sound) {
    this->sound = sound;
    this->m_sound_isSet = true;
}


bool
SWGPushDataObject_aps::isSet(){
    bool isObjectUpdated = false;
    do{
        if(alert != nullptr && *alert != QString("")){ isObjectUpdated = true; break;}
        if(badge != nullptr && *badge != QString("")){ isObjectUpdated = true; break;}
        if(sound != nullptr && *sound != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

