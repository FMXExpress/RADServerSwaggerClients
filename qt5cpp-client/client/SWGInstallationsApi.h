/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGInstallationsApi_H_
#define _SWG_SWGInstallationsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGChannelName.h"
#include "SWGFieldInstallationObject.h"
#include "SWGInstallationAddObject.h"
#include "SWGInstallationAddedObject.h"
#include "SWGInstallationObject.h"
#include "SWGNumber.h"
#include "SWGUpdateInstallationObject.h"
#include "SWGUpdatedInstallationObject.h"

#include <QObject>

namespace Swagger {

class SWGInstallationsApi: public QObject {
    Q_OBJECT

public:
    SWGInstallationsApi();
    SWGInstallationsApi(QString host, QString basePath);
    ~SWGInstallationsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void addInstallation(SWGInstallationAddObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void deleteInstallation(QString* id, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getChannels(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getInstallation(QString* id, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getInstallationFields(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    void getInstallations(QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret, SWGNumber* skip, SWGNumber* limit, SWGNumber* order, QString* where);
    void updateInstallation(QString* id, SWGUpdateInstallationObject& body, QString* x_embarcadero_application_id, QString* x_embarcadero_app_secret, QString* x_embarcadero_master_secret);
    
private:
    void addInstallationCallback (SWGHttpRequestWorker * worker);
    void deleteInstallationCallback (SWGHttpRequestWorker * worker);
    void getChannelsCallback (SWGHttpRequestWorker * worker);
    void getInstallationCallback (SWGHttpRequestWorker * worker);
    void getInstallationFieldsCallback (SWGHttpRequestWorker * worker);
    void getInstallationsCallback (SWGHttpRequestWorker * worker);
    void updateInstallationCallback (SWGHttpRequestWorker * worker);
    
signals:
    void addInstallationSignal(SWGInstallationAddedObject* summary);
    void deleteInstallationSignal();
    void getChannelsSignal(QList<SWGChannelName*>* summary);
    void getInstallationSignal(SWGInstallationObject* summary);
    void getInstallationFieldsSignal(QList<SWGFieldInstallationObject*>* summary);
    void getInstallationsSignal(QList<SWGInstallationObject*>* summary);
    void updateInstallationSignal(SWGUpdatedInstallationObject* summary);
    
    void addInstallationSignalE(SWGInstallationAddedObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteInstallationSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getChannelsSignalE(QList<SWGChannelName*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallationSignalE(SWGInstallationObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallationFieldsSignalE(QList<SWGFieldInstallationObject*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallationsSignalE(QList<SWGInstallationObject*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateInstallationSignalE(SWGUpdatedInstallationObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void addInstallationSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteInstallationSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getChannelsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallationSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallationFieldsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallationsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateInstallationSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
