/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPushWhereObject.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGPushWhereObject::SWGPushWhereObject(QString json) {
    init();
    this->fromJson(json);
}

SWGPushWhereObject::SWGPushWhereObject() {
    init();
}

SWGPushWhereObject::~SWGPushWhereObject() {
    this->cleanup();
}

void
SWGPushWhereObject::init() {
    device_type = new QString("");
    m_device_type_isSet = false;
    device_token = new SWGPushWhereObject_deviceToken();
    m_device_token_isSet = false;
}

void
SWGPushWhereObject::cleanup() {
    if(device_type != nullptr) { 
        delete device_type;
    }
    if(device_token != nullptr) { 
        delete device_token;
    }
}

SWGPushWhereObject*
SWGPushWhereObject::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPushWhereObject::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&device_type, pJson["deviceType"], "QString", "QString");
    
    ::Swagger::setValue(&device_token, pJson["deviceToken"], "SWGPushWhereObject_deviceToken", "SWGPushWhereObject_deviceToken");
    
}

QString
SWGPushWhereObject::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGPushWhereObject::asJsonObject() {
    QJsonObject obj;
    if(device_type != nullptr && *device_type != QString("")){
        toJsonValue(QString("deviceType"), device_type, obj, QString("QString"));
    }
    if((device_token != nullptr) && (device_token->isSet())){
        toJsonValue(QString("deviceToken"), device_token, obj, QString("SWGPushWhereObject_deviceToken"));
    }

    return obj;
}

QString*
SWGPushWhereObject::getDeviceType() {
    return device_type;
}
void
SWGPushWhereObject::setDeviceType(QString* device_type) {
    this->device_type = device_type;
    this->m_device_type_isSet = true;
}

SWGPushWhereObject_deviceToken*
SWGPushWhereObject::getDeviceToken() {
    return device_token;
}
void
SWGPushWhereObject::setDeviceToken(SWGPushWhereObject_deviceToken* device_token) {
    this->device_token = device_token;
    this->m_device_token_isSet = true;
}


bool
SWGPushWhereObject::isSet(){
    bool isObjectUpdated = false;
    do{
        if(device_type != nullptr && *device_type != QString("")){ isObjectUpdated = true; break;}
        if(device_token != nullptr && device_token->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

