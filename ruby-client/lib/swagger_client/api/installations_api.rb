=begin
#EMS API Documentation

#Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'uri'

module SwaggerClient
  class InstallationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Installation
    #  |      Used to add a new `Installation` object to the EMS database.
    # @param body Object to sign up a new EMS User in the EMS Server
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [InstallationAddedObject]
    def add_installation(body, opts = {})
      data, _status_code, _headers = add_installation_with_http_info(body, opts)
      data
    end

    # Add Installation
    #  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
    # @param body Object to sign up a new EMS User in the EMS Server
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(InstallationAddedObject, Fixnum, Hash)>] InstallationAddedObject data, response status code and response headers
    def add_installation_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstallationsApi.add_installation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstallationsApi.add_installation"
      end
      # resource path
      local_var_path = '/installations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InstallationAddedObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstallationsApi#add_installation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Installation
    #  |      Used to delete an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
    # @param id A Installation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def delete_installation(id, opts = {})
      delete_installation_with_http_info(id, opts)
      nil
    end

    # Delete Installation
    #  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
    # @param id A Installation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_installation_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstallationsApi.delete_installation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstallationsApi.delete_installation"
      end
      # resource path
      local_var_path = '/installations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstallationsApi#delete_installation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Installation Channels
    #  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<ChannelName>]
    def get_channels(opts = {})
      data, _status_code, _headers = get_channels_with_http_info(opts)
      data
    end

    # Get Installation Channels
    #  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(Array<ChannelName>, Fixnum, Hash)>] Array<ChannelName> data, response status code and response headers
    def get_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstallationsApi.get_channels ...'
      end
      # resource path
      local_var_path = '/installations/channels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ChannelName>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstallationsApi#get_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Installation
    #  |      Used to retrieve all data from a specific `Installation` (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
    # @param id A Installation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [InstallationObject]
    def get_installation(id, opts = {})
      data, _status_code, _headers = get_installation_with_http_info(id, opts)
      data
    end

    # Get Installation
    #  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
    # @param id A Installation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(InstallationObject, Fixnum, Hash)>] InstallationObject data, response status code and response headers
    def get_installation_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstallationsApi.get_installation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstallationsApi.get_installation"
      end
      # resource path
      local_var_path = '/installations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InstallationObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstallationsApi#get_installation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Fields
    #  |      Used to retrieve all the `field names` of the EMS Installation (including the custom fields).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<FieldInstallationObject>]
    def get_installation_fields(opts = {})
      data, _status_code, _headers = get_installation_fields_with_http_info(opts)
      data
    end

    # Get Fields
    #  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(Array<FieldInstallationObject>, Fixnum, Hash)>] Array<FieldInstallationObject> data, response status code and response headers
    def get_installation_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstallationsApi.get_installation_fields ...'
      end
      # resource path
      local_var_path = '/installations/fields'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FieldInstallationObject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstallationsApi#get_installation_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Installations
    #  |      Used to retrieve all data from `Installation`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @option opts [Float] :skip users skipped
    # @option opts [Float] :limit maximum number of results to return
    # @option opts [Float] :order order ascending or descending (asc, desc)
    # @option opts [String] :where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
    # @return [Array<InstallationObject>]
    def get_installations(opts = {})
      data, _status_code, _headers = get_installations_with_http_info(opts)
      data
    end

    # Get Installations
    #  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @option opts [Float] :skip users skipped
    # @option opts [Float] :limit maximum number of results to return
    # @option opts [Float] :order order ascending or descending (asc, desc)
    # @option opts [String] :where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
    # @return [Array<(Array<InstallationObject>, Fixnum, Hash)>] Array<InstallationObject> data, response status code and response headers
    def get_installations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstallationsApi.get_installations ...'
      end
      # resource path
      local_var_path = '/installations'

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InstallationObject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstallationsApi#get_installations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Installation
    #  |      Used to update an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
    # @param id A Installation ID
    # @param body Installation fields to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [UpdatedInstallationObject]
    def update_installation(id, body, opts = {})
      data, _status_code, _headers = update_installation_with_http_info(id, body, opts)
      data
    end

    # Update Installation
    #  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
    # @param id A Installation ID
    # @param body Installation fields to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(UpdatedInstallationObject, Fixnum, Hash)>] UpdatedInstallationObject data, response status code and response headers
    def update_installation_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstallationsApi.update_installation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstallationsApi.update_installation"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstallationsApi.update_installation"
      end
      # resource path
      local_var_path = '/installations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdatedInstallationObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstallationsApi#update_installation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
