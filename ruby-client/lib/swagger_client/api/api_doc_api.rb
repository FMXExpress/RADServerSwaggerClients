=begin
#EMS API Documentation

#Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'uri'

module SwaggerClient
  class ApiDocApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get API EndPoints
    #  |      Used to retrieve all the API EndPoints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def a_pi(opts = {})
      a_pi_with_http_info(opts)
      nil
    end

    # Get API EndPoints
    #  |      Used to retrieve all the API EndPoints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def a_pi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiDocApi.a_pi ...'
      end
      # resource path
      local_var_path = '/api'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiDocApi#a_pi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get JSON
    # Get API in JSON format
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def get_apijson_format(opts = {})
      get_apijson_format_with_http_info(opts)
      nil
    end

    # Get JSON
    # Get API in JSON format
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_apijson_format_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiDocApi.get_apijson_format ...'
      end
      # resource path
      local_var_path = '/api/apidoc.json'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiDocApi#get_apijson_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get YAML
    # Get API in YAML format
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def get_apiyaml_format(opts = {})
      get_apiyaml_format_with_http_info(opts)
      nil
    end

    # Get YAML
    # Get API in YAML format
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_apiyaml_format_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiDocApi.get_apiyaml_format ...'
      end
      # resource path
      local_var_path = '/api/apidoc.yaml'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiDocApi#get_apiyaml_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get API EndPoint
    #  |      Used to retrieve an EndPoint for the API EndPoints.
    # @param item Path Segment to an EndPoint
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def get_apiyaml_format_end_point(item, opts = {})
      get_apiyaml_format_end_point_with_http_info(item, opts)
      nil
    end

    # Get API EndPoint
    #  |      Used to retrieve an EndPoint for the API EndPoints.
    # @param item Path Segment to an EndPoint
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_apiyaml_format_end_point_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiDocApi.get_apiyaml_format_end_point ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling ApiDocApi.get_apiyaml_format_end_point"
      end
      # resource path
      local_var_path = '/api/{item}/apidoc.yaml'.sub('{' + 'item' + '}', item.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiDocApi#get_apiyaml_format_end_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
