=begin
#EMS API Documentation

#Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'uri'

module SwaggerClient
  class GroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Group
    #  |      Used to add a new `Group` object to the EMS database.
    # @param body Object to sign up a new EMS User in the EMS Server
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def add_group(body, opts = {})
      add_group_with_http_info(body, opts)
      nil
    end

    # Add Group
    #  |      Used to add a new &#x60;Group&#x60; object to the EMS database.
    # @param body Object to sign up a new EMS User in the EMS Server
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_group_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.add_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GroupsApi.add_group"
      end
      # resource path
      local_var_path = '/groups'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#add_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group
    #  |      Used to delete a `Group`. **item** is the unique EMS Group name in the EMS database.
    # @param item A group name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def delete_group(item, opts = {})
      delete_group_with_http_info(item, opts)
      nil
    end

    # Delete Group
    #  |      Used to delete a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
    # @param item A group name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.delete_group ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling GroupsApi.delete_group"
      end
      # resource path
      local_var_path = '/groups/{item}'.sub('{' + 'item' + '}', item.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#delete_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Group
    #  |      Used to retrieve all data from a `Group`. **item** is the unique EMS Group name in the EMS database.
    # @param item A group name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [GroupObject]
    def get_group(item, opts = {})
      data, _status_code, _headers = get_group_with_http_info(item, opts)
      data
    end

    # Get Group
    #  |      Used to retrieve all data from a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
    # @param item A group name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(GroupObject, Fixnum, Hash)>] GroupObject data, response status code and response headers
    def get_group_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_group ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling GroupsApi.get_group"
      end
      # resource path
      local_var_path = '/groups/{item}'.sub('{' + 'item' + '}', item.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Fields
    #  |      Used to retrieve all the `field names` of the EMS Group (including the custom fields).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<FieldGroupObject>]
    def get_group_fields(opts = {})
      data, _status_code, _headers = get_group_fields_with_http_info(opts)
      data
    end

    # Get Fields
    #  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Group (including the custom fields).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(Array<FieldGroupObject>, Fixnum, Hash)>] Array<FieldGroupObject> data, response status code and response headers
    def get_group_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_group_fields ...'
      end
      # resource path
      local_var_path = '/groups/fields'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FieldGroupObject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Groups
    #  |      Used to retrieve all data from `Groups`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @option opts [Float] :skip users skipped
    # @option opts [Float] :limit maximum number of results to return
    # @option opts [Float] :order order ascending or descending (asc, desc)
    # @option opts [String] :where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
    # @return [Array<GroupObject>]
    def get_groups(opts = {})
      data, _status_code, _headers = get_groups_with_http_info(opts)
      data
    end

    # Get Groups
    #  |      Used to retrieve all data from &#x60;Groups&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @option opts [Float] :skip users skipped
    # @option opts [Float] :limit maximum number of results to return
    # @option opts [Float] :order order ascending or descending (asc, desc)
    # @option opts [String] :where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
    # @return [Array<(Array<GroupObject>, Fixnum, Hash)>] Array<GroupObject> data, response status code and response headers
    def get_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_groups ...'
      end
      # resource path
      local_var_path = '/groups'

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GroupObject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Group
    #  |      Used to update a `Group`. **item** is the unique EMS Group name in the EMS database.
    # @param item A group name
    # @param body Object to sign up a new EMS User in the EMS Server
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [UpdatedGroupObject]
    def update_group(item, body, opts = {})
      data, _status_code, _headers = update_group_with_http_info(item, body, opts)
      data
    end

    # Update Group
    #  |      Used to update a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
    # @param item A group name
    # @param body Object to sign up a new EMS User in the EMS Server
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(UpdatedGroupObject, Fixnum, Hash)>] UpdatedGroupObject data, response status code and response headers
    def update_group_with_http_info(item, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.update_group ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling GroupsApi.update_group"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GroupsApi.update_group"
      end
      # resource path
      local_var_path = '/groups/{item}'.sub('{' + 'item' + '}', item.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdatedGroupObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#update_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
