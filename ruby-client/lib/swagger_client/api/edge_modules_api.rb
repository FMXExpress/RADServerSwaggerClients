=begin
#EMS API Documentation

#Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'uri'

module SwaggerClient
  class EdgeModulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Module
    #  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [EdgeModuleObject]
    def get_module(mname, opts = {})
      data, _status_code, _headers = get_module_with_http_info(mname, opts)
      data
    end

    # Get Module
    #  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(EdgeModuleObject, Fixnum, Hash)>] EdgeModuleObject data, response status code and response headers
    def get_module_with_http_info(mname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.get_module ...'
      end
      # verify the required parameter 'mname' is set
      if @api_client.config.client_side_validation && mname.nil?
        fail ArgumentError, "Missing the required parameter 'mname' when calling EdgeModulesApi.get_module"
      end
      # resource path
      local_var_path = '/edgemodules/{mname}'.sub('{' + 'mname' + '}', mname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeModuleObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#get_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get EdgeModule Resource
    #  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param name Is the unique EMS EdgeModule Resource name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [EdgeModuleResourceObject]
    def get_module_resource(mname, name, opts = {})
      data, _status_code, _headers = get_module_resource_with_http_info(mname, name, opts)
      data
    end

    # Get EdgeModule Resource
    #  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param name Is the unique EMS EdgeModule Resource name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(EdgeModuleResourceObject, Fixnum, Hash)>] EdgeModuleResourceObject data, response status code and response headers
    def get_module_resource_with_http_info(mname, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.get_module_resource ...'
      end
      # verify the required parameter 'mname' is set
      if @api_client.config.client_side_validation && mname.nil?
        fail ArgumentError, "Missing the required parameter 'mname' when calling EdgeModulesApi.get_module_resource"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EdgeModulesApi.get_module_resource"
      end
      # resource path
      local_var_path = '/edgemodules/{mname}/resources/{name}'.sub('{' + 'mname' + '}', mname.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeModuleResourceObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#get_module_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get EdgeModule Resources
    #  |      Used to retrieve all data from the resources of an EdgeModule.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<EdgeModuleResourceObject>]
    def get_module_resources(mname, opts = {})
      data, _status_code, _headers = get_module_resources_with_http_info(mname, opts)
      data
    end

    # Get EdgeModule Resources
    #  |      Used to retrieve all data from the resources of an EdgeModule.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(Array<EdgeModuleResourceObject>, Fixnum, Hash)>] Array<EdgeModuleResourceObject> data, response status code and response headers
    def get_module_resources_with_http_info(mname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.get_module_resources ...'
      end
      # verify the required parameter 'mname' is set
      if @api_client.config.client_side_validation && mname.nil?
        fail ArgumentError, "Missing the required parameter 'mname' when calling EdgeModulesApi.get_module_resources"
      end
      # resource path
      local_var_path = '/edgemodules/{mname}/resources'.sub('{' + 'mname' + '}', mname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EdgeModuleResourceObject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#get_module_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Module
    #  |      Used to retrieve all data from `EdgeModule`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<EdgeModuleObject>]
    def get_modules(opts = {})
      data, _status_code, _headers = get_modules_with_http_info(opts)
      data
    end

    # Get Module
    #  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(Array<EdgeModuleObject>, Fixnum, Hash)>] Array<EdgeModuleObject> data, response status code and response headers
    def get_modules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.get_modules ...'
      end
      # resource path
      local_var_path = '/edgemodules'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EdgeModuleObject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#get_modules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Fields
    #  |      Used to retrieve all the `field names` of the EMS EdgeModule (including the custom fields).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [FieldsEdgeModuleObject]
    def get_modules_fields(opts = {})
      data, _status_code, _headers = get_modules_fields_with_http_info(opts)
      data
    end

    # Get Fields
    #  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(FieldsEdgeModuleObject, Fixnum, Hash)>] FieldsEdgeModuleObject data, response status code and response headers
    def get_modules_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.get_modules_fields ...'
      end
      # resource path
      local_var_path = '/edgemodules/fields'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FieldsEdgeModuleObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#get_modules_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get EdgeModules Resources
    #  |      Used to retrieve all data from the resources of all EdgeModules.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<EdgeModuleResourceObject>]
    def get_resources(opts = {})
      data, _status_code, _headers = get_resources_with_http_info(opts)
      data
    end

    # Get EdgeModules Resources
    #  |      Used to retrieve all data from the resources of all EdgeModules.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(Array<EdgeModuleResourceObject>, Fixnum, Hash)>] Array<EdgeModuleResourceObject> data, response status code and response headers
    def get_resources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.get_resources ...'
      end
      # resource path
      local_var_path = '/edgemodules/resources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EdgeModuleResourceObject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#get_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Resource Fields
    #  |      Used to retrieve the `field names` of all the resources of the EMS EdgeModule (including the custom fields).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [FieldsEdgeModuleObject]
    def get_resources_fields(opts = {})
      data, _status_code, _headers = get_resources_fields_with_http_info(opts)
      data
    end

    # Get Resource Fields
    #  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(FieldsEdgeModuleObject, Fixnum, Hash)>] FieldsEdgeModuleObject data, response status code and response headers
    def get_resources_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.get_resources_fields ...'
      end
      # resource path
      local_var_path = '/edgemodules/resources/fields'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FieldsEdgeModuleObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#get_resources_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Module
    #  |      Used to add a new `EdgeModule` object to the EMS database.
    # @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [EdgeModuleAddedObject]
    def register_module(body, opts = {})
      data, _status_code, _headers = register_module_with_http_info(body, opts)
      data
    end

    # Add Module
    #  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
    # @param body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(EdgeModuleAddedObject, Fixnum, Hash)>] EdgeModuleAddedObject data, response status code and response headers
    def register_module_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.register_module ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EdgeModulesApi.register_module"
      end
      # resource path
      local_var_path = '/edgemodules'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeModuleAddedObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#register_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Module Resource
    #  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [EdgeModuleResourceAddedObject]
    def register_module_resource(mname, body, opts = {})
      data, _status_code, _headers = register_module_resource_with_http_info(mname, body, opts)
      data
    end

    # Add Module Resource
    #  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(EdgeModuleResourceAddedObject, Fixnum, Hash)>] EdgeModuleResourceAddedObject data, response status code and response headers
    def register_module_resource_with_http_info(mname, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.register_module_resource ...'
      end
      # verify the required parameter 'mname' is set
      if @api_client.config.client_side_validation && mname.nil?
        fail ArgumentError, "Missing the required parameter 'mname' when calling EdgeModulesApi.register_module_resource"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EdgeModulesApi.register_module_resource"
      end
      # resource path
      local_var_path = '/edgemodules/{mname}/resources'.sub('{' + 'mname' + '}', mname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeModuleResourceAddedObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#register_module_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Module
    #  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def unregister_module(mname, opts = {})
      unregister_module_with_http_info(mname, opts)
      nil
    end

    # Delete Module
    #  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unregister_module_with_http_info(mname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.unregister_module ...'
      end
      # verify the required parameter 'mname' is set
      if @api_client.config.client_side_validation && mname.nil?
        fail ArgumentError, "Missing the required parameter 'mname' when calling EdgeModulesApi.unregister_module"
      end
      # resource path
      local_var_path = '/edgemodules/{mname}'.sub('{' + 'mname' + '}', mname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#unregister_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Module Resource
    #  |      Used to delete an `EdgeModule Resource`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param name Is the unique EMS EdgeModule Resource name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [nil]
    def unregister_module_resource(mname, name, opts = {})
      unregister_module_resource_with_http_info(mname, name, opts)
      nil
    end

    # Delete Module Resource
    #  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param name Is the unique EMS EdgeModule Resource name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unregister_module_resource_with_http_info(mname, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.unregister_module_resource ...'
      end
      # verify the required parameter 'mname' is set
      if @api_client.config.client_side_validation && mname.nil?
        fail ArgumentError, "Missing the required parameter 'mname' when calling EdgeModulesApi.unregister_module_resource"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EdgeModulesApi.unregister_module_resource"
      end
      # resource path
      local_var_path = '/edgemodules/{mname}/resources/{name}'.sub('{' + 'mname' + '}', mname.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#unregister_module_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Module
    #  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [EdgeModuleUpdatedObject]
    def update_module(mname, body, opts = {})
      data, _status_code, _headers = update_module_with_http_info(mname, body, opts)
      data
    end

    # Update Module
    #  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(EdgeModuleUpdatedObject, Fixnum, Hash)>] EdgeModuleUpdatedObject data, response status code and response headers
    def update_module_with_http_info(mname, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.update_module ...'
      end
      # verify the required parameter 'mname' is set
      if @api_client.config.client_side_validation && mname.nil?
        fail ArgumentError, "Missing the required parameter 'mname' when calling EdgeModulesApi.update_module"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EdgeModulesApi.update_module"
      end
      # resource path
      local_var_path = '/edgemodules/{mname}'.sub('{' + 'mname' + '}', mname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeModuleUpdatedObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#update_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Module Resource
    #  |      Used to update an `EdgeModule`. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param name Is the unique EMS EdgeModule Resource name
    # @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [EdgeModuleResourceUpdatedObject]
    def update_module_resource(mname, name, body, opts = {})
      data, _status_code, _headers = update_module_resource_with_http_info(mname, name, body, opts)
      data
    end

    # Update Module Resource
    #  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
    # @param mname Is the unique EMS EdgeModule identifier
    # @param name Is the unique EMS EdgeModule Resource name
    # @param body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_embarcadero_application_id 
    # @option opts [String] :x_embarcadero_app_secret 
    # @option opts [String] :x_embarcadero_master_secret 
    # @return [Array<(EdgeModuleResourceUpdatedObject, Fixnum, Hash)>] EdgeModuleResourceUpdatedObject data, response status code and response headers
    def update_module_resource_with_http_info(mname, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeModulesApi.update_module_resource ...'
      end
      # verify the required parameter 'mname' is set
      if @api_client.config.client_side_validation && mname.nil?
        fail ArgumentError, "Missing the required parameter 'mname' when calling EdgeModulesApi.update_module_resource"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EdgeModulesApi.update_module_resource"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EdgeModulesApi.update_module_resource"
      end
      # resource path
      local_var_path = '/edgemodules/{mname}/resources/{name}'.sub('{' + 'mname' + '}', mname.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Embarcadero-Application-Id'] = opts[:'x_embarcadero_application_id'] if !opts[:'x_embarcadero_application_id'].nil?
      header_params[:'X-Embarcadero-App-Secret'] = opts[:'x_embarcadero_app_secret'] if !opts[:'x_embarcadero_app_secret'].nil?
      header_params[:'X-Embarcadero-Master-Secret'] = opts[:'x_embarcadero_master_secret'] if !opts[:'x_embarcadero_master_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeModuleResourceUpdatedObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeModulesApi#update_module_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
