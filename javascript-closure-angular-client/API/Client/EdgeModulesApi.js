/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.EdgeModulesApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 * Version: 0.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.EdgeModulesApi');

goog.require('API.Client.EdgeModuleAddObject');
goog.require('API.Client.EdgeModuleResourceAddObject');
goog.require('API.Client.EdgeModuleResourceUpdateObject');
goog.require('API.Client.EdgeModuleUpdateObject');
goog.require('API.Client.edgeModuleAddedObject');
goog.require('API.Client.edgeModuleObject');
goog.require('API.Client.edgeModuleResourceAddedObject');
goog.require('API.Client.edgeModuleResourceObject');
goog.require('API.Client.edgeModuleResourceUpdatedObject');
goog.require('API.Client.edgeModuleUpdatedObject');
goog.require('API.Client.fieldsEdgeModuleObject');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.EdgeModulesApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('EdgeModulesApiBasePath') ?
                   /** @type {!string} */ ($injector.get('EdgeModulesApiBasePath')) :
                   'http://localhost:8080';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('EdgeModulesApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('EdgeModulesApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.EdgeModulesApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Get Module
 *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
 * @param {!string} mname Is the unique EMS EdgeModule identifier
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.edgeModuleObject>}
 */
API.Client.EdgeModulesApi.prototype.getModule = function(mname, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}'
      .replace('{' + 'mname' + '}', String(mname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling getModule');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get EdgeModule Resource
 *  |      Used to retrieve all data from a resource of an EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database. **resourcename** is the name of the resource.
 * @param {!string} mname Is the unique EMS EdgeModule identifier
 * @param {!string} name Is the unique EMS EdgeModule Resource name
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.edgeModuleResourceObject>}
 */
API.Client.EdgeModulesApi.prototype.getModuleResource = function(mname, name, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/resources/{name}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling getModuleResource');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling getModuleResource');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get EdgeModule Resources
 *  |      Used to retrieve all data from the resources of an EdgeModule.
 * @param {!string} mname Is the unique EMS EdgeModule identifier
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.edgeModuleResourceObject>>}
 */
API.Client.EdgeModulesApi.prototype.getModuleResources = function(mname, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/resources'
      .replace('{' + 'mname' + '}', String(mname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling getModuleResources');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Module
 *  |      Used to retrieve all data from &#x60;EdgeModule&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.edgeModuleObject>>}
 */
API.Client.EdgeModulesApi.prototype.getModules = function(opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Fields
 *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS EdgeModule (including the custom fields).
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.fieldsEdgeModuleObject>}
 */
API.Client.EdgeModulesApi.prototype.getModulesFields = function(opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/fields';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get EdgeModules Resources
 *  |      Used to retrieve all data from the resources of all EdgeModules.
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.edgeModuleResourceObject>>}
 */
API.Client.EdgeModulesApi.prototype.getResources = function(opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/resources';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Resource Fields
 *  |      Used to retrieve the &#x60;field names&#x60; of all the resources of the EMS EdgeModule (including the custom fields).
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.fieldsEdgeModuleObject>}
 */
API.Client.EdgeModulesApi.prototype.getResourcesFields = function(opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/resources/fields';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add Module
 *  |      Used to add a new &#x60;EdgeModule&#x60; object to the EMS database.
 * @param {!EdgeModuleAddObject} body EdgeModule object to add. protocolprops example string {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.edgeModuleAddedObject>}
 */
API.Client.EdgeModulesApi.prototype.registerModule = function(body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling registerModule');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add Module Resource
 *  |      Used to register a new resource from an EMS EdgeModule. **mname** is the unique EMS EdgeModule identifier in the EMS database.
 * @param {!string} mname Is the unique EMS EdgeModule identifier
 * @param {!EdgeModuleResourceAddObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.edgeModuleResourceAddedObject>}
 */
API.Client.EdgeModulesApi.prototype.registerModuleResource = function(mname, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/resources'
      .replace('{' + 'mname' + '}', String(mname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling registerModuleResource');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling registerModuleResource');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Module
 *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
 * @param {!string} mname Is the unique EMS EdgeModule identifier
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesApi.prototype.unregisterModule = function(mname, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}'
      .replace('{' + 'mname' + '}', String(mname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling unregisterModule');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Module Resource
 *  |      Used to delete an &#x60;EdgeModule Resource&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database. **resourcename** is the name of the resource.
 * @param {!string} mname Is the unique EMS EdgeModule identifier
 * @param {!string} name Is the unique EMS EdgeModule Resource name
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesApi.prototype.unregisterModuleResource = function(mname, name, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/resources/{name}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling unregisterModuleResource');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling unregisterModuleResource');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Module
 *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
 * @param {!string} mname Is the unique EMS EdgeModule identifier
 * @param {!EdgeModuleUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.edgeModuleUpdatedObject>}
 */
API.Client.EdgeModulesApi.prototype.updateModule = function(mname, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}'
      .replace('{' + 'mname' + '}', String(mname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling updateModule');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling updateModule');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Module Resource
 *  |      Used to update an &#x60;EdgeModule&#x60;. **mname** is the unique EMS EdgeModule identifier (MID) in the EMS database.
 * @param {!string} mname Is the unique EMS EdgeModule identifier
 * @param {!string} name Is the unique EMS EdgeModule Resource name
 * @param {!EdgeModuleResourceUpdateObject} body EdgModule Resource add object. protocolprops string example {\\\&quot;port\\\&quot;:8082,\\\&quot;host\\\&quot;:\\\&quot;10.150.40.52\\\&quot;}
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.edgeModuleResourceUpdatedObject>}
 */
API.Client.EdgeModulesApi.prototype.updateModuleResource = function(mname, name, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/resources/{name}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling updateModuleResource');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling updateModuleResource');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling updateModuleResource');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
