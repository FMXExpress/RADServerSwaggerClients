/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.InstallationsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 * Version: 0.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.InstallationsApi');

goog.require('API.Client.InstallationAddObject');
goog.require('API.Client.UpdateInstallationObject');
goog.require('API.Client.channelName');
goog.require('API.Client.fieldInstallationObject');
goog.require('API.Client.installationAddedObject');
goog.require('API.Client.installationObject');
goog.require('API.Client.updatedInstallationObject');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.InstallationsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('InstallationsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('InstallationsApiBasePath')) :
                   'http://localhost:8080';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('InstallationsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('InstallationsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.InstallationsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Add Installation
 *  |      Used to add a new &#x60;Installation&#x60; object to the EMS database.
 * @param {!InstallationAddObject} body Object to sign up a new EMS User in the EMS Server
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.installationAddedObject>}
 */
API.Client.InstallationsApi.prototype.addInstallation = function(body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/installations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling addInstallation');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Installation
 *  |      Used to delete an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
 * @param {!string} id A Installation ID
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.InstallationsApi.prototype.deleteInstallation = function(id, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/installations/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling deleteInstallation');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Installation Channels
 *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.channelName>>}
 */
API.Client.InstallationsApi.prototype.getChannels = function(opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/installations/channels';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Installation
 *  |      Used to retrieve all data from a specific &#x60;Installation&#x60; (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
 * @param {!string} id A Installation ID
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.installationObject>}
 */
API.Client.InstallationsApi.prototype.getInstallation = function(id, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/installations/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling getInstallation');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Fields
 *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Installation (including the custom fields).
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.fieldInstallationObject>>}
 */
API.Client.InstallationsApi.prototype.getInstallationFields = function(opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/installations/fields';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Installations
 *  |      Used to retrieve all data from &#x60;Installation&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!number=} opt_skip users skipped
 * @param {!number=} opt_limit maximum number of results to return
 * @param {!number=} opt_order order ascending or descending (asc, desc)
 * @param {!string=} opt_where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.installationObject>>}
 */
API.Client.InstallationsApi.prototype.getInstallations = function(opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_skip, opt_limit, opt_order, opt_where, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/installations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_where !== undefined) {
    queryParameters['where'] = opt_where;
  }

  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Installation
 *  |      Used to update an &#x60;Installation&#x60;. **id** is the unique EMS Installation identifier (IID) in the EMS database.
 * @param {!string} id A Installation ID
 * @param {!UpdateInstallationObject} body Installation fields to update
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.updatedInstallationObject>}
 */
API.Client.InstallationsApi.prototype.updateInstallation = function(id, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/installations/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling updateInstallation');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling updateInstallation');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
