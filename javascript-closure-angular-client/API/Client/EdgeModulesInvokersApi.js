/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.EdgeModulesInvokersApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 * Version: 0.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.EdgeModulesInvokersApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.EdgeModulesInvokersApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('EdgeModulesInvokersApiBasePath') ?
                   /** @type {!string} */ ($injector.get('EdgeModulesInvokersApiBasePath')) :
                   'http://localhost:8080';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('EdgeModulesInvokersApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('EdgeModulesInvokersApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.EdgeModulesInvokersApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Invoke Resource Delete Method
 * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.deleteResourceEndpoint = function(mname, rname, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling deleteResourceEndpoint');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling deleteResourceEndpoint');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource/_* Delete Method
 * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!string} wildcard Is the Wild card part of the URL
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.deleteResourceEndpointItem = function(mname, rname, wildcard, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}/{wildcard}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname))
      .replace('{' + 'wildcard' + '}', String(wildcard));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling deleteResourceEndpointItem');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling deleteResourceEndpointItem');
  }
  // verify required parameter 'wildcard' is set
  if (!wildcard) {
    throw new Error('Missing required parameter wildcard when calling deleteResourceEndpointItem');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource Get Method
 * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.getResourceEndpoint = function(mname, rname, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling getResourceEndpoint');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling getResourceEndpoint');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource/_* Get Method
 * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!string} wildcard Is the Wild card part of the URL
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.getResourceEndpointItem = function(mname, rname, wildcard, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}/{wildcard}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname))
      .replace('{' + 'wildcard' + '}', String(wildcard));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling getResourceEndpointItem');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling getResourceEndpointItem');
  }
  // verify required parameter 'wildcard' is set
  if (!wildcard) {
    throw new Error('Missing required parameter wildcard when calling getResourceEndpointItem');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource Patch Method
 * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!API.Client.Object} body Body Object
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.patchResourceEndpoint = function(mname, rname, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling patchResourceEndpoint');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling patchResourceEndpoint');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling patchResourceEndpoint');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource/_* Patch Method
 * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!string} wildcard Is the Wild card part of the URL
 * @param {!API.Client.Object} body Body Object
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.patchResourceEndpointItem = function(mname, rname, wildcard, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}/{wildcard}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname))
      .replace('{' + 'wildcard' + '}', String(wildcard));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling patchResourceEndpointItem');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling patchResourceEndpointItem');
  }
  // verify required parameter 'wildcard' is set
  if (!wildcard) {
    throw new Error('Missing required parameter wildcard when calling patchResourceEndpointItem');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling patchResourceEndpointItem');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource Post Method
 * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!API.Client.Object} body Body Object
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.postResourceEndpoint = function(mname, rname, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling postResourceEndpoint');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling postResourceEndpoint');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling postResourceEndpoint');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource/_* Post Method
 * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!string} wildcard Is the Wild card part of the URL
 * @param {!API.Client.Object} body Body Object
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.postResourceEndpointItem = function(mname, rname, wildcard, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}/{wildcard}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname))
      .replace('{' + 'wildcard' + '}', String(wildcard));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling postResourceEndpointItem');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling postResourceEndpointItem');
  }
  // verify required parameter 'wildcard' is set
  if (!wildcard) {
    throw new Error('Missing required parameter wildcard when calling postResourceEndpointItem');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling postResourceEndpointItem');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource Put Method
 * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!API.Client.Object} body Body Object
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.putResourceEndpoint = function(mname, rname, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling putResourceEndpoint');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling putResourceEndpoint');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling putResourceEndpoint');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoke Resource/_* Put Method
 * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
 * @param {!string} mname Is the EMS EdgeModule name
 * @param {!string} rname Is the unique EMS EdgeModule Resource name
 * @param {!string} wildcard Is the Wild card part of the URL
 * @param {!API.Client.Object} body Body Object
 * @param {!string=} opt_xEmbarcaderoApplicationId 
 * @param {!string=} opt_xEmbarcaderoAppSecret 
 * @param {!string=} opt_xEmbarcaderoMasterSecret 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EdgeModulesInvokersApi.prototype.putResourceEndpointItem = function(mname, rname, wildcard, body, opt_xEmbarcaderoApplicationId, opt_xEmbarcaderoAppSecret, opt_xEmbarcaderoMasterSecret, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/edgemodules/{mname}/{rname}/{wildcard}'
      .replace('{' + 'mname' + '}', String(mname))
      .replace('{' + 'rname' + '}', String(rname))
      .replace('{' + 'wildcard' + '}', String(wildcard));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'mname' is set
  if (!mname) {
    throw new Error('Missing required parameter mname when calling putResourceEndpointItem');
  }
  // verify required parameter 'rname' is set
  if (!rname) {
    throw new Error('Missing required parameter rname when calling putResourceEndpointItem');
  }
  // verify required parameter 'wildcard' is set
  if (!wildcard) {
    throw new Error('Missing required parameter wildcard when calling putResourceEndpointItem');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling putResourceEndpointItem');
  }
  headerParams['X-Embarcadero-Application-Id'] = opt_xEmbarcaderoApplicationId;

  headerParams['X-Embarcadero-App-Secret'] = opt_xEmbarcaderoAppSecret;

  headerParams['X-Embarcadero-Master-Secret'] = opt_xEmbarcaderoMasterSecret;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
