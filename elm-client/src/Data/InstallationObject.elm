{-
   EMS API Documentation
   Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps

   OpenAPI spec version: 0.0.0
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Data.InstallationObject exposing (InstallationObject, DeviceType(..), installationObjectDecoder, installationObjectEncoder)

import Data.MetaInstallationObject exposing (MetaInstallationObject, metaInstallationObjectDecoder, metaInstallationObjectEncoder)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (decode, optional, required)
import Json.Encode as Encode
import Maybe exposing (map, withDefault)




type alias InstallationObject =
    { id : String
    , deviceToken : String
    , deviceType : DeviceType
    , meta : MetaInstallationObject
    , channels : Maybe (List String)
    }


type DeviceType
    = Ios
    | Android



installationObjectDecoder : Decoder InstallationObject
installationObjectDecoder =
    decode InstallationObject
        |> required "_id" Decode.string
        |> required "deviceToken" Decode.string
        |> required "deviceType" deviceTypeDecoder
        |> required "_meta" metaInstallationObjectDecoder
        |> optional "channels" (Decode.nullable (Decode.list Decode.string)) Nothing



installationObjectEncoder : InstallationObject -> Encode.Value
installationObjectEncoder model =
    Encode.object
        [ ( "_id", Encode.string model.id )
        , ( "deviceToken", Encode.string model.deviceToken )
        , ( "deviceType", deviceTypeEncoder model.deviceType )
        , ( "_meta", metaInstallationObjectEncoder model.meta )
        , ( "channels", withDefault Encode.null (map (Encode.list << List.map Encode.string) model.channels) )
        ]



deviceTypeDecoder : Decoder DeviceType
deviceTypeDecoder =
    Decode.string
        |> Decode.andThen (\str ->
            case str of
                "ios" ->
                    Decode.succeed Ios

                "android" ->
                    Decode.succeed Android

                other ->
                    Decode.fail <| "Unknown type: " ++ other
        )


deviceTypeEncoder : DeviceType -> Encode.Value
deviceTypeEncoder model =
    case model of
        Ios ->
            Encode.string "ios"

        Android ->
            Encode.string "android"



