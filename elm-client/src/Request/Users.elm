{-
   EMS API Documentation
   Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps

   OpenAPI spec version: 0.0.0
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Users exposing (addUser, deleteUser, getUser, getUserFields, getUserGroups, getUsers, loginUser, logoutUser, signupUser, updateUser)

import Data.GroupName exposing (GroupName, groupNameDecoder)
import Data.FieldObject exposing (FieldObject, fieldObjectDecoder)
import Data.UserTokenObject exposing (UserTokenObject, userTokenObjectDecoder)
import Data.UpdateObject exposing (UpdateObject, updateObjectEncoder)
import Data.UserObject exposing (UserObject, userObjectDecoder)
import Data.UpdatedObject exposing (UpdatedObject, updatedObjectDecoder)
import Data.UseridObject exposing (UseridObject, useridObjectDecoder)
import Data.UserCredentialsObject exposing (UserCredentialsObject, userCredentialsObjectEncoder)
import Data.UserSignUpResponseObject exposing (UserSignUpResponseObject, userSignUpResponseObjectDecoder)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost:8080"


{-
    |      Used to add a new &#x60;User&#x60; object to the EMS database.
-}
addUser : UserCredentialsObject -> Http.Request UseridObject
addUser model =
    { method = "POST"
    , url = basePath ++ "/users"
    , headers = []
    , body = Http.jsonBody <| userCredentialsObjectEncoder model
    , expect = Http.expectJson useridObjectDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to delete a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
-}
deleteUser : String -> Http.Request ()
deleteUser id =
    { method = "DELETE"
    , url = basePath ++ "/users/" ++ id
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to retrieve all data from a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
-}
getUser : String -> Http.Request UserObject
getUser id =
    { method = "GET"
    , url = basePath ++ "/users/" ++ id
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson userObjectDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to retrieve all the &#x60;field names&#x60; of the EMS Users (including the custom fields).
-}
getUserFields : Http.Request (List FieldObject)
getUserFields =
    { method = "GET"
    , url = basePath ++ "/users/fields"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list fieldObjectDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
-}
getUserGroups : String -> Http.Request (List GroupName)
getUserGroups id =
    { method = "GET"
    , url = basePath ++ "/users/" ++ id ++ "/groups"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list groupNameDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to retrieve all data from &#x60;Users&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
-}
getUsers : Http.Request (List UserObject)
getUsers =
    { method = "GET"
    , url = basePath ++ "/users"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list userObjectDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Logs in to the EMS Server with a specific EMS User.
-}
loginUser : UserCredentialsObject -> Http.Request UserTokenObject
loginUser model =
    { method = "POST"
    , url = basePath ++ "/users/login"
    , headers = []
    , body = Http.jsonBody <| userCredentialsObjectEncoder model
    , expect = Http.expectJson userTokenObjectDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   sPostLogoutSummaryDesc
-}
logoutUser : Http.Request ()
logoutUser =
    { method = "POST"
    , url = basePath ++ "/users/logout"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Signs up to the EMS Server with an appropriate EMS User.
-}
signupUser : UserCredentialsObject -> Http.Request UserSignUpResponseObject
signupUser model =
    { method = "POST"
    , url = basePath ++ "/users/signup"
    , headers = []
    , body = Http.jsonBody <| userCredentialsObjectEncoder model
    , expect = Http.expectJson userSignUpResponseObjectDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to update a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
-}
updateUser : String -> UpdateObject -> Http.Request UpdatedObject
updateUser id model =
    { method = "PUT"
    , url = basePath ++ "/users/" ++ id
    , headers = []
    , body = Http.jsonBody <| updateObjectEncoder model
    , expect = Http.expectJson updatedObjectDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


