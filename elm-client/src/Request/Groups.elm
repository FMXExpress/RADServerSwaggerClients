{-
   EMS API Documentation
   Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps

   OpenAPI spec version: 0.0.0
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Groups exposing (addGroup, deleteGroup, getGroup, getGroupFields, getGroups, updateGroup)

import Data.FieldGroupObject exposing (FieldGroupObject, fieldGroupObjectDecoder)
import Data.GroupAddObject exposing (GroupAddObject, groupAddObjectEncoder)
import Data.UpdateGroupObject exposing (UpdateGroupObject, updateGroupObjectEncoder)
import Data.UpdatedGroupObject exposing (UpdatedGroupObject, updatedGroupObjectDecoder)
import Data.GroupObject exposing (GroupObject, groupObjectDecoder)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost:8080"


{-
    |      Used to add a new &#x60;Group&#x60; object to the EMS database.
-}
addGroup : GroupAddObject -> Http.Request ()
addGroup model =
    { method = "POST"
    , url = basePath ++ "/groups"
    , headers = []
    , body = Http.jsonBody <| groupAddObjectEncoder model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to delete a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
-}
deleteGroup : String -> Http.Request ()
deleteGroup item =
    { method = "DELETE"
    , url = basePath ++ "/groups/" ++ item
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to retrieve all data from a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
-}
getGroup : String -> Http.Request GroupObject
getGroup item =
    { method = "GET"
    , url = basePath ++ "/groups/" ++ item
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson groupObjectDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to retrieve all the &#x60;field names&#x60; of the EMS Group (including the custom fields).
-}
getGroupFields : Http.Request (List FieldGroupObject)
getGroupFields =
    { method = "GET"
    , url = basePath ++ "/groups/fields"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list fieldGroupObjectDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to retrieve all data from &#x60;Groups&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
-}
getGroups : Http.Request (List GroupObject)
getGroups =
    { method = "GET"
    , url = basePath ++ "/groups"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list groupObjectDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
    |      Used to update a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
-}
updateGroup : String -> UpdateGroupObject -> Http.Request UpdatedGroupObject
updateGroup item model =
    { method = "PUT"
    , url = basePath ++ "/groups/" ++ item
    , headers = []
    , body = Http.jsonBody <| updateGroupObjectEncoder model
    , expect = Http.expectJson updatedGroupObjectDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


