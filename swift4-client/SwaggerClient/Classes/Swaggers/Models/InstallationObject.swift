//
// InstallationObject.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct InstallationObject: Codable {

    public enum DeviceType: String, Codable { 
        case ios = "ios"
        case android = "android"
    }
    public var _id: String
    public var deviceToken: String
    public var deviceType: DeviceType
    public var meta: MetaInstallationObject
    public var channels: [String]?

    public init(_id: String, deviceToken: String, deviceType: DeviceType, meta: MetaInstallationObject, channels: [String]?) {
        self._id = _id
        self.deviceToken = deviceToken
        self.deviceType = deviceType
        self.meta = meta
        self.channels = channels
    }
    public var additionalProperties: [String:String] = [:]

    public subscript(key: String) -> String? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(_id, forKey: "_id")
        try container.encode(deviceToken, forKey: "deviceToken")
        try container.encode(deviceType, forKey: "deviceType")
        try container.encode(meta, forKey: "_meta")
        try container.encodeIfPresent(channels, forKey: "channels")
        try container.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        _id = try container.decode(String.self, forKey: "_id")
        deviceToken = try container.decode(String.self, forKey: "deviceToken")
        deviceType = try container.decode(DeviceType.self, forKey: "deviceType")
        meta = try container.decode(MetaInstallationObject.self, forKey: "_meta")
        channels = try container.decodeIfPresent([String].self, forKey: "channels")
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("_id")
        nonAdditionalPropertyKeys.insert("deviceToken")
        nonAdditionalPropertyKeys.insert("deviceType")
        nonAdditionalPropertyKeys.insert("_meta")
        nonAdditionalPropertyKeys.insert("channels")
        additionalProperties = try container.decodeMap(String.self, excludedKeys: nonAdditionalPropertyKeys)
    }



}

