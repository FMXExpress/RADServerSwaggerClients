/*
 * EMS API Documentation
 * Enterprise Mobility Services API\r\n\r\n  [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)\r\n\r\n  EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)\r\n\r\n  TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagUsersApi {
    SwagClient client;

    public SwagUsersApi(SwagClient client) {
        this.client = client;
    }

    public SwagUsersApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Add User
     *  |\r\n    Used to add a new &#x60;User&#x60; object to the EMS database.
     * @param body Object to add a new EMS User in the EMS Server (required)
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @return SwagUseridObject
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagUseridObject addUser(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagUseridObject) client.invoke(
            'POST', '/users',
            (SwagUserCredentialsObject) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagUseridObject.class
        );
    }
    /**
     * Delete User
     *  |\r\n    Used to delete a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @param id A user ID (required)
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void deleteUser(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'DELETE', '/users/{id}', '',
            query, form,
            new Map<String, Object>{
                'id' => (String) params.get('id')
            },
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            null
        );
    }
    /**
     * Get User
     *  |\r\n    Used to retrieve all data from a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @param id A user ID (required)
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @return SwagUserObject
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagUserObject getUser(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagUserObject) client.invoke(
            'GET', '/users/{id}', '',
            query, form,
            new Map<String, Object>{
                'id' => (String) params.get('id')
            },
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagUserObject.class
        );
    }
    /**
     * Get Fields
     *  |\r\n    Used to retrieve all the &#x60;field names&#x60; of the EMS Users (including the custom fields).
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @return List<SwagFieldObject>
     * @throws Swagger.ApiException if fails to make API call
     */
    public List<SwagFieldObject> getUserFields(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (List<SwagFieldObject>) client.invoke(
            'GET', '/users/fields', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            List<SwagFieldObject>.class
        );
    }
    /**
     * Get User Groups
     *  |\r\n    Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @param id A user ID (required)
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @return List<String>
     * @throws Swagger.ApiException if fails to make API call
     */
    public List<String> getUserGroups(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (List<String>) client.invoke(
            'GET', '/users/{id}/groups', '',
            query, form,
            new Map<String, Object>{
                'id' => (String) params.get('id')
            },
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            List<String>.class
        );
    }
    /**
     * Get Users
     *  |\r\n    Used to retrieve all data from &#x60;Users&#x60;.\r\n    Optional query param of **skip, limit, order, where** determines \r\n    size of returned array, filtered and order by.
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @param skip users skipped (optional)
     * @param r_limit maximum number of results to return (optional)
     * @param order order ascending or descending (asc, desc) (optional)
     * @param r_where filter operators (lt, lte, gt, gte, eq, neq, like, nlike) (optional)
     * @return List<SwagUserObject>
     * @throws Swagger.ApiException if fails to make API call
     */
    public List<SwagUserObject> getUsers(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('skip', (Double) params.get('skip')));
        query.addAll(client.makeParam('limit', (Double) params.get('r_limit')));
        query.addAll(client.makeParam('order', (Double) params.get('order')));
        query.addAll(client.makeParam('where', (String) params.get('r_where')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (List<SwagUserObject>) client.invoke(
            'GET', '/users', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            List<SwagUserObject>.class
        );
    }
    /**
     * Log In
     *  |\r\n    Logs in to the EMS Server with a specific EMS User.
     * @param body A user object (required)
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @return SwagUserTokenObject
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagUserTokenObject loginUser(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagUserTokenObject) client.invoke(
            'POST', '/users/login',
            (SwagUserCredentialsObject) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagUserTokenObject.class
        );
    }
    /**
     * sPostLogoutSummaryTitle
     * sPostLogoutSummaryDesc
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void logoutUser(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'POST', '/users/logout', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            null
        );
    }
    /**
     * Sign Up  User
     *  |\r\n    Signs up to the EMS Server with an appropriate EMS User.
     * @param body Object to sign up a new EMS User in the EMS Server (required)
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @return SwagUserSignUpResponseObject
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagUserSignUpResponseObject signupUser(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagUserSignUpResponseObject) client.invoke(
            'POST', '/users/signup',
            (SwagUserCredentialsObject) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagUserSignUpResponseObject.class
        );
    }
    /**
     * Update User
     *  |\r\n    Used to update a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
     * @param id A user ID (required)
     * @param body Add any fieldName (required)
     * @param xEmbarcaderoApplicationId  (optional)
     * @param xEmbarcaderoAppSecret  (optional)
     * @param xEmbarcaderoMasterSecret  (optional)
     * @return SwagUpdatedObject
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagUpdatedObject updateUser(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagUpdatedObject) client.invoke(
            'PUT', '/users/{id}',
            (SwagUpdateObject) params.get('body'),
            query, form,
            new Map<String, Object>{
                'id' => (String) params.get('id')
            },
            new Map<String, Object>{
                'X-Embarcadero-Application-Id' => (String) params.get('xEmbarcaderoApplicationId'),
                'X-Embarcadero-App-Secret' => (String) params.get('xEmbarcaderoAppSecret'),
                'X-Embarcadero-Master-Secret' => (String) params.get('xEmbarcaderoMasterSecret')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagUpdatedObject.class
        );
    }
}
