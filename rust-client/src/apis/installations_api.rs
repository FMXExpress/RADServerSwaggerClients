/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct InstallationsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> InstallationsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> InstallationsApiClient<C> {
        InstallationsApiClient {
            configuration: configuration,
        }
    }
}

pub trait InstallationsApi {
    fn add_installation(&self, body: ::models::InstallationAddObject, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = ::models::InstallationAddedObject, Error = Error<serde_json::Value>>>;
    fn delete_installation(&self, id: &str, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_channels(&self, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = Vec<::models::ChannelName>, Error = Error<serde_json::Value>>>;
    fn get_installation(&self, id: &str, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = ::models::InstallationObject, Error = Error<serde_json::Value>>>;
    fn get_installation_fields(&self, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = Vec<::models::FieldInstallationObject>, Error = Error<serde_json::Value>>>;
    fn get_installations(&self, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str, skip: f32, limit: f32, order: f32, _where: &str) -> Box<Future<Item = Vec<::models::InstallationObject>, Error = Error<serde_json::Value>>>;
    fn update_installation(&self, id: &str, body: ::models::UpdateInstallationObject, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = ::models::UpdatedInstallationObject, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>InstallationsApi for InstallationsApiClient<C> {
    fn add_installation(&self, body: ::models::InstallationAddObject, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = ::models::InstallationAddedObject, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/installations?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Embarcadero-Application-Id", x_embarcadero_application_id);
            headers.set_raw("X-Embarcadero-App-Secret", x_embarcadero_app_secret);
            headers.set_raw("X-Embarcadero-Master-Secret", x_embarcadero_master_secret);
        }


        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InstallationAddedObject, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn delete_installation(&self, id: &str, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/installations/{id}?{}", configuration.base_path, query_string, id=id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Embarcadero-Application-Id", x_embarcadero_application_id);
            headers.set_raw("X-Embarcadero-App-Secret", x_embarcadero_app_secret);
            headers.set_raw("X-Embarcadero-Master-Secret", x_embarcadero_master_secret);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn get_channels(&self, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = Vec<::models::ChannelName>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/installations/channels?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Embarcadero-Application-Id", x_embarcadero_application_id);
            headers.set_raw("X-Embarcadero-App-Secret", x_embarcadero_app_secret);
            headers.set_raw("X-Embarcadero-Master-Secret", x_embarcadero_master_secret);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::ChannelName>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_installation(&self, id: &str, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = ::models::InstallationObject, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/installations/{id}?{}", configuration.base_path, query_string, id=id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Embarcadero-Application-Id", x_embarcadero_application_id);
            headers.set_raw("X-Embarcadero-App-Secret", x_embarcadero_app_secret);
            headers.set_raw("X-Embarcadero-Master-Secret", x_embarcadero_master_secret);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InstallationObject, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_installation_fields(&self, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = Vec<::models::FieldInstallationObject>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/installations/fields?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Embarcadero-Application-Id", x_embarcadero_application_id);
            headers.set_raw("X-Embarcadero-App-Secret", x_embarcadero_app_secret);
            headers.set_raw("X-Embarcadero-Master-Secret", x_embarcadero_master_secret);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::FieldInstallationObject>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_installations(&self, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str, skip: f32, limit: f32, order: f32, _where: &str) -> Box<Future<Item = Vec<::models::InstallationObject>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("skip", &skip.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("order", &order.to_string());
            query.append_pair("where", &_where.to_string());
            query.finish()
        };
        let uri_str = format!("{}/installations?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Embarcadero-Application-Id", x_embarcadero_application_id);
            headers.set_raw("X-Embarcadero-App-Secret", x_embarcadero_app_secret);
            headers.set_raw("X-Embarcadero-Master-Secret", x_embarcadero_master_secret);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::InstallationObject>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn update_installation(&self, id: &str, body: ::models::UpdateInstallationObject, x_embarcadero_application_id: &str, x_embarcadero_app_secret: &str, x_embarcadero_master_secret: &str) -> Box<Future<Item = ::models::UpdatedInstallationObject, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/installations/{id}?{}", configuration.base_path, query_string, id=id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Embarcadero-Application-Id", x_embarcadero_application_id);
            headers.set_raw("X-Embarcadero-App-Secret", x_embarcadero_app_secret);
            headers.set_raw("X-Embarcadero-Master-Secret", x_embarcadero_master_secret);
        }


        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::UpdatedInstallationObject, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
