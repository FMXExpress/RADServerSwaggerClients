/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PushDataObject {
  #[serde(rename = "gcm")]
  gcm: Option<::models::PushDataObjectGcm>,
  #[serde(rename = "aps")]
  aps: Option<::models::PushDataObjectAps>,
  #[serde(rename = "extras")]
  extras: Option<::models::PushDataObjectExtras>
}

impl PushDataObject {
  pub fn new() -> PushDataObject {
    PushDataObject {
      gcm: None,
      aps: None,
      extras: None
    }
  }

  pub fn set_gcm(&mut self, gcm: ::models::PushDataObjectGcm) {
    self.gcm = Some(gcm);
  }

  pub fn with_gcm(mut self, gcm: ::models::PushDataObjectGcm) -> PushDataObject {
    self.gcm = Some(gcm);
    self
  }

  pub fn gcm(&self) -> Option<&::models::PushDataObjectGcm> {
    self.gcm.as_ref()
  }

  pub fn reset_gcm(&mut self) {
    self.gcm = None;
  }

  pub fn set_aps(&mut self, aps: ::models::PushDataObjectAps) {
    self.aps = Some(aps);
  }

  pub fn with_aps(mut self, aps: ::models::PushDataObjectAps) -> PushDataObject {
    self.aps = Some(aps);
    self
  }

  pub fn aps(&self) -> Option<&::models::PushDataObjectAps> {
    self.aps.as_ref()
  }

  pub fn reset_aps(&mut self) {
    self.aps = None;
  }

  pub fn set_extras(&mut self, extras: ::models::PushDataObjectExtras) {
    self.extras = Some(extras);
  }

  pub fn with_extras(mut self, extras: ::models::PushDataObjectExtras) -> PushDataObject {
    self.extras = Some(extras);
    self
  }

  pub fn extras(&self) -> Option<&::models::PushDataObjectExtras> {
    self.extras.as_ref()
  }

  pub fn reset_extras(&mut self) {
    self.extras = None;
  }

}



