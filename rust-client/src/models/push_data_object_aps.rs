/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PushDataObjectAps {
  #[serde(rename = "alert")]
  alert: Option<String>,
  #[serde(rename = "badge")]
  badge: Option<String>,
  #[serde(rename = "sound")]
  sound: Option<String>
}

impl PushDataObjectAps {
  pub fn new() -> PushDataObjectAps {
    PushDataObjectAps {
      alert: None,
      badge: None,
      sound: None
    }
  }

  pub fn set_alert(&mut self, alert: String) {
    self.alert = Some(alert);
  }

  pub fn with_alert(mut self, alert: String) -> PushDataObjectAps {
    self.alert = Some(alert);
    self
  }

  pub fn alert(&self) -> Option<&String> {
    self.alert.as_ref()
  }

  pub fn reset_alert(&mut self) {
    self.alert = None;
  }

  pub fn set_badge(&mut self, badge: String) {
    self.badge = Some(badge);
  }

  pub fn with_badge(mut self, badge: String) -> PushDataObjectAps {
    self.badge = Some(badge);
    self
  }

  pub fn badge(&self) -> Option<&String> {
    self.badge.as_ref()
  }

  pub fn reset_badge(&mut self) {
    self.badge = None;
  }

  pub fn set_sound(&mut self, sound: String) {
    self.sound = Some(sound);
  }

  pub fn with_sound(mut self, sound: String) -> PushDataObjectAps {
    self.sound = Some(sound);
    self
  }

  pub fn sound(&self) -> Option<&String> {
    self.sound.as_ref()
  }

  pub fn reset_sound(&mut self) {
    self.sound = None;
  }

}



