/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateGroupObject {
  #[serde(rename = "fieldName")]
  field_name: Option<String>,
  #[serde(rename = "users")]
  users: Option<Vec<String>>
}

impl UpdateGroupObject {
  pub fn new() -> UpdateGroupObject {
    UpdateGroupObject {
      field_name: None,
      users: None
    }
  }

  pub fn set_field_name(&mut self, field_name: String) {
    self.field_name = Some(field_name);
  }

  pub fn with_field_name(mut self, field_name: String) -> UpdateGroupObject {
    self.field_name = Some(field_name);
    self
  }

  pub fn field_name(&self) -> Option<&String> {
    self.field_name.as_ref()
  }

  pub fn reset_field_name(&mut self) {
    self.field_name = None;
  }

  pub fn set_users(&mut self, users: Vec<String>) {
    self.users = Some(users);
  }

  pub fn with_users(mut self, users: Vec<String>) -> UpdateGroupObject {
    self.users = Some(users);
    self
  }

  pub fn users(&self) -> Option<&Vec<String>> {
    self.users.as_ref()
  }

  pub fn reset_users(&mut self) {
    self.users = None;
  }

}



