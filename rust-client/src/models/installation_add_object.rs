/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InstallationAddObject {
  #[serde(rename = "deviceToken")]
  device_token: String,
  #[serde(rename = "deviceType")]
  device_type: String,
  #[serde(rename = "channels")]
  channels: Option<Vec<String>>
}

impl InstallationAddObject {
  pub fn new(device_token: String, device_type: String) -> InstallationAddObject {
    InstallationAddObject {
      device_token: device_token,
      device_type: device_type,
      channels: None
    }
  }

  pub fn set_device_token(&mut self, device_token: String) {
    self.device_token = device_token;
  }

  pub fn with_device_token(mut self, device_token: String) -> InstallationAddObject {
    self.device_token = device_token;
    self
  }

  pub fn device_token(&self) -> &String {
    &self.device_token
  }


  pub fn set_device_type(&mut self, device_type: String) {
    self.device_type = device_type;
  }

  pub fn with_device_type(mut self, device_type: String) -> InstallationAddObject {
    self.device_type = device_type;
    self
  }

  pub fn device_type(&self) -> &String {
    &self.device_type
  }


  pub fn set_channels(&mut self, channels: Vec<String>) {
    self.channels = Some(channels);
  }

  pub fn with_channels(mut self, channels: Vec<String>) -> InstallationAddObject {
    self.channels = Some(channels);
    self
  }

  pub fn channels(&self) -> Option<&Vec<String>> {
    self.channels.as_ref()
  }

  pub fn reset_channels(&mut self) {
    self.channels = None;
  }

}



