/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FieldObject {
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "fields")]
  fields: Option<Vec<::models::FieldObjectFields>>,
  #[serde(rename = "custom")]
  custom: Option<bool>
}

impl FieldObject {
  pub fn new(name: String) -> FieldObject {
    FieldObject {
      name: name,
      fields: None,
      custom: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> FieldObject {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_fields(&mut self, fields: Vec<::models::FieldObjectFields>) {
    self.fields = Some(fields);
  }

  pub fn with_fields(mut self, fields: Vec<::models::FieldObjectFields>) -> FieldObject {
    self.fields = Some(fields);
    self
  }

  pub fn fields(&self) -> Option<&Vec<::models::FieldObjectFields>> {
    self.fields.as_ref()
  }

  pub fn reset_fields(&mut self) {
    self.fields = None;
  }

  pub fn set_custom(&mut self, custom: bool) {
    self.custom = Some(custom);
  }

  pub fn with_custom(mut self, custom: bool) -> FieldObject {
    self.custom = Some(custom);
    self
  }

  pub fn custom(&self) -> Option<&bool> {
    self.custom.as_ref()
  }

  pub fn reset_custom(&mut self) {
    self.custom = None;
  }

}



