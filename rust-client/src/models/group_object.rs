/* 
 * EMS API Documentation
 *
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupObject {
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "_meta")]
  _meta: ::models::MetaGroupObject,
  #[serde(rename = "users")]
  users: Option<Vec<String>>
}

impl GroupObject {
  pub fn new(name: String, _meta: ::models::MetaGroupObject) -> GroupObject {
    GroupObject {
      name: name,
      _meta: _meta,
      users: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> GroupObject {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set__meta(&mut self, _meta: ::models::MetaGroupObject) {
    self._meta = _meta;
  }

  pub fn with__meta(mut self, _meta: ::models::MetaGroupObject) -> GroupObject {
    self._meta = _meta;
    self
  }

  pub fn _meta(&self) -> &::models::MetaGroupObject {
    &self._meta
  }


  pub fn set_users(&mut self, users: Vec<String>) {
    self.users = Some(users);
  }

  pub fn with_users(mut self, users: Vec<String>) -> GroupObject {
    self.users = Some(users);
    self
  }

  pub fn users(&self) -> Option<&Vec<String>> {
    self.users.as_ref()
  }

  pub fn reset_users(&mut self) {
    self.users = None;
  }

}



