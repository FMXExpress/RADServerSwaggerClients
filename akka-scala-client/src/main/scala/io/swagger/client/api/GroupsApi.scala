/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.FieldGroupObject
import io.swagger.client.model.GroupAddObject
import io.swagger.client.model.GroupObject
import io.swagger.client.model.UpdateGroupObject
import io.swagger.client.model.UpdatedGroupObject
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object GroupsApi {

  /**
   *  |      Used to add a new &#x60;Group&#x60; object to the EMS database.
   * 
   * Expected answers:
   *   code 200 :  (OK)
   *   code 404 :  (Group already exist)
   * 
   * @param body Object to sign up a new EMS User in the EMS Server
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def addGroup(body: GroupAddObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost:8080", "/groups", "application/json")
      .withBody(body)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](404)
        /**
   *  |      Used to delete a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
   * 
   * Expected answers:
   *   code 204 :  (No Content)
   *   code 404 :  (Group not found)
   * 
   * @param item A group name
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def deleteGroup(item: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "http://localhost:8080", "/groups/{item}", "application/json")
      .withPathParam("item", item)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Unit](404)
        /**
   *  |      Used to retrieve all data from a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
   * 
   * Expected answers:
   *   code 200 : GroupObject (OK)
   * 
   * @param item A group name
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def getGroup(item: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[GroupObject] =
    ApiRequest[GroupObject](ApiMethods.GET, "http://localhost:8080", "/groups/{item}", "application/json")
      .withPathParam("item", item)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[GroupObject](200)
        /**
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Group (including the custom fields).
   * 
   * Expected answers:
   *   code 200 : Seq[FieldGroupObject] (OK)
   * 
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def getGroupFields(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[Seq[FieldGroupObject]] =
    ApiRequest[Seq[FieldGroupObject]](ApiMethods.GET, "http://localhost:8080", "/groups/fields", "application/json")
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Seq[FieldGroupObject]](200)
        /**
   *  |      Used to retrieve all data from &#x60;Groups&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   * 
   * Expected answers:
   *   code 200 : Seq[GroupObject] (OK)
   *   code 400 :  (Bad Request)
   * 
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @param skip users skipped
   * @param limit maximum number of results to return
   * @param order order ascending or descending (asc, desc)
   * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
   */
  def getGroups(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None, skip: Option[Double] = None, limit: Option[Double] = None, order: Option[Double] = None, where: Option[String] = None): ApiRequest[Seq[GroupObject]] =
    ApiRequest[Seq[GroupObject]](ApiMethods.GET, "http://localhost:8080", "/groups", "application/json")
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withQueryParam("order", order)
      .withQueryParam("where", where)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Seq[GroupObject]](200)
      .withErrorResponse[Unit](400)
        /**
   *  |      Used to update a &#x60;Group&#x60;. **item** is the unique EMS Group name in the EMS database.
   * 
   * Expected answers:
   *   code 200 : UpdatedGroupObject (OK)
   *   code 404 :  (Group not found / User not found)
   * 
   * @param item A group name
   * @param body Object to sign up a new EMS User in the EMS Server
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def updateGroup(item: String, body: UpdateGroupObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[UpdatedGroupObject] =
    ApiRequest[UpdatedGroupObject](ApiMethods.PUT, "http://localhost:8080", "/groups/{item}", "application/json")
      .withBody(body)
      .withPathParam("item", item)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[UpdatedGroupObject](200)
      .withErrorResponse[Unit](404)
      

}

