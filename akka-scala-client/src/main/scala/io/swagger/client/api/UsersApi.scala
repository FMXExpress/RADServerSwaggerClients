/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.FieldObject
import io.swagger.client.model.GroupName
import io.swagger.client.model.UpdateObject
import io.swagger.client.model.UpdatedObject
import io.swagger.client.model.UserCredentialsObject
import io.swagger.client.model.UserObject
import io.swagger.client.model.UserSignUpResponseObject
import io.swagger.client.model.UserTokenObject
import io.swagger.client.model.UseridObject
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object UsersApi {

  /**
   *  |      Used to add a new &#x60;User&#x60; object to the EMS database.
   * 
   * Expected answers:
   *   code 201 : UseridObject (User Created)
   *   code 409 :  (User already exists)
   * 
   * @param body Object to add a new EMS User in the EMS Server
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def addUser(body: UserCredentialsObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[UseridObject] =
    ApiRequest[UseridObject](ApiMethods.POST, "http://localhost:8080", "/users", "application/json")
      .withBody(body)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[UseridObject](201)
      .withErrorResponse[Unit](409)
        /**
   *  |      Used to delete a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
   * 
   * Expected answers:
   *   code 204 :  (No Content)
   *   code 404 :  (The request does not identify a known application, resource, endpoint, or entity)
   * 
   * @param id A user ID
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def deleteUser(id: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "http://localhost:8080", "/users/{id}", "application/json")
      .withPathParam("id", id)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Unit](404)
        /**
   *  |      Used to retrieve all data from a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
   * 
   * Expected answers:
   *   code 200 : UserObject (OK)
   * 
   * @param id A user ID
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def getUser(id: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[UserObject] =
    ApiRequest[UserObject](ApiMethods.GET, "http://localhost:8080", "/users/{id}", "application/json")
      .withPathParam("id", id)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[UserObject](200)
        /**
   *  |      Used to retrieve all the &#x60;field names&#x60; of the EMS Users (including the custom fields).
   * 
   * Expected answers:
   *   code 200 : Seq[FieldObject] (OK)
   * 
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def getUserFields(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[Seq[FieldObject]] =
    ApiRequest[Seq[FieldObject]](ApiMethods.GET, "http://localhost:8080", "/users/fields", "application/json")
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Seq[FieldObject]](200)
        /**
   *  |      Used to retrieve the EMS Groups the EMS User belongs to. **id** is the unique EMS User identifier (UID) in the EMS database.
   * 
   * Expected answers:
   *   code 200 : Seq[GroupName] (OK)
   * 
   * @param id A user ID
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def getUserGroups(id: String, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[Seq[GroupName]] =
    ApiRequest[Seq[GroupName]](ApiMethods.GET, "http://localhost:8080", "/users/{id}/groups", "application/json")
      .withPathParam("id", id)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Seq[GroupName]](200)
        /**
   *  |      Used to retrieve all data from &#x60;Users&#x60;.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
   * 
   * Expected answers:
   *   code 200 : Seq[UserObject] (OK)
   *   code 400 :  (Bad Request)
   * 
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   * @param skip users skipped
   * @param limit maximum number of results to return
   * @param order order ascending or descending (asc, desc)
   * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
   */
  def getUsers(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None, skip: Option[Double] = None, limit: Option[Double] = None, order: Option[Double] = None, where: Option[String] = None): ApiRequest[Seq[UserObject]] =
    ApiRequest[Seq[UserObject]](ApiMethods.GET, "http://localhost:8080", "/users", "application/json")
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withQueryParam("order", order)
      .withQueryParam("where", where)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Seq[UserObject]](200)
      .withErrorResponse[Unit](400)
        /**
   *  |      Logs in to the EMS Server with a specific EMS User.
   * 
   * Expected answers:
   *   code 200 : UserTokenObject (OK)
   *   code 401 :  (The credentials of the request are not authorized for the requested operation.)
   *   code 404 :  (User not found)
   * 
   * @param body A user object
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def loginUser(body: UserCredentialsObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[UserTokenObject] =
    ApiRequest[UserTokenObject](ApiMethods.POST, "http://localhost:8080", "/users/login", "application/json")
      .withBody(body)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[UserTokenObject](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
        /**
   * sPostLogoutSummaryDesc
   * 
   * Expected answers:
   *   code 200 :  (OK)
   *   code 404 :  (User not found)
   * 
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def logoutUser(xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost:8080", "/users/logout", "application/json")
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](404)
        /**
   *  |      Signs up to the EMS Server with an appropriate EMS User.
   * 
   * Expected answers:
   *   code 200 : UserSignUpResponseObject (OK)
   *   code 409 :  (User already exists)
   * 
   * @param body Object to sign up a new EMS User in the EMS Server
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def signupUser(body: UserCredentialsObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[UserSignUpResponseObject] =
    ApiRequest[UserSignUpResponseObject](ApiMethods.POST, "http://localhost:8080", "/users/signup", "application/json")
      .withBody(body)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[UserSignUpResponseObject](200)
      .withErrorResponse[Unit](409)
        /**
   *  |      Used to update a &#x60;User&#x60;. **id** is the unique EMS User identifier (UID) in the EMS database.
   * 
   * Expected answers:
   *   code 200 : UpdatedObject (OK)
   *   code 400 :  (Operation could not be completed because one or more dynamic names conflicts with a static name.)
   * 
   * @param id A user ID
   * @param body Add any fieldName
   * @param xEmbarcaderoApplicationId 
   * @param xEmbarcaderoAppSecret 
   * @param xEmbarcaderoMasterSecret 
   */
  def updateUser(id: String, body: UpdateObject, xEmbarcaderoApplicationId: Option[String] = None, xEmbarcaderoAppSecret: Option[String] = None, xEmbarcaderoMasterSecret: Option[String] = None): ApiRequest[UpdatedObject] =
    ApiRequest[UpdatedObject](ApiMethods.PUT, "http://localhost:8080", "/users/{id}", "application/json")
      .withBody(body)
      .withPathParam("id", id)
      .withHeaderParam("X-Embarcadero-Application-Id", xEmbarcaderoApplicationId)
      .withHeaderParam("X-Embarcadero-App-Secret", xEmbarcaderoAppSecret)
      .withHeaderParam("X-Embarcadero-Master-Secret", xEmbarcaderoMasterSecret)
      .withSuccessResponse[UpdatedObject](200)
      .withErrorResponse[Unit](400)
      

}

