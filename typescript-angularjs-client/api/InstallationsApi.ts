/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class InstallationsApi {
    protected basePath = 'http://localhost:8080';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     *  |      Used to add a new `Installation` object to the EMS database.
     * @summary Add Installation
     * @param body Object to sign up a new EMS User in the EMS Server
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public addInstallation (body: models.InstallationAddObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.InstallationAddedObject> {
        const localVarPath = this.basePath + '/installations';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addInstallation.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     *  |      Used to delete an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @summary Delete Installation
     * @param id A Installation ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public deleteInstallation (id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/installations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteInstallation.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     *  |       Used to retrieve the available channels to which the device has subscribed. **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @summary Get Installation Channels
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public getChannels (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.ChannelName>> {
        const localVarPath = this.basePath + '/installations/channels';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     *  |      Used to retrieve all data from a specific `Installation` (registered device). **id** is the unique EMS Installation identifier (InstallationID) in the EMS database.
     * @summary Get Installation
     * @param id A Installation ID
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public getInstallation (id: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.InstallationObject> {
        const localVarPath = this.basePath + '/installations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstallation.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     *  |      Used to retrieve all the `field names` of the EMS Installation (including the custom fields).
     * @summary Get Fields
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public getInstallationFields (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.FieldInstallationObject>> {
        const localVarPath = this.basePath + '/installations/fields';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     *  |      Used to retrieve all data from `Installation`.      Optional query param of **skip, limit, order, where** determines       size of returned array, filtered and order by.
     * @summary Get Installations
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     * @param skip users skipped
     * @param limit maximum number of results to return
     * @param order order ascending or descending (asc, desc)
     * @param where filter operators (lt, lte, gt, gte, eq, neq, like, nlike)
     */
    public getInstallations (xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, skip?: number, limit?: number, order?: number, where?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.InstallationObject>> {
        const localVarPath = this.basePath + '/installations';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (skip !== undefined) {
            queryParameters['skip'] = skip;
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (where !== undefined) {
            queryParameters['where'] = where;
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     *  |      Used to update an `Installation`. **id** is the unique EMS Installation identifier (IID) in the EMS database.
     * @summary Update Installation
     * @param id A Installation ID
     * @param body Installation fields to update
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public updateInstallation (id: string, body: models.UpdateInstallationObject, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UpdatedInstallationObject> {
        const localVarPath = this.basePath + '/installations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateInstallation.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateInstallation.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
