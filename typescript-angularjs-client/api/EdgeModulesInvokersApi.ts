/**
 * EMS API Documentation
 * Enterprise Mobility Services API      [Learn about EMS](https://www.embarcadero.com/products/rad-studio/enterprise-mobility-services)      EMS (Enterprise Mobility Services) offers a Mobile Enterprise Application Platform (MEAP)      TurnKey Middleware for Interconnected Distributed Apps
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class EdgeModulesInvokersApi {
    protected basePath = 'http://localhost:8080';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Delete Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public deleteResourceEndpoint (mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling deleteResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling deleteResourceEndpoint.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the DELETE method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Delete Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public deleteResourceEndpointItem (mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling deleteResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling deleteResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling deleteResourceEndpointItem.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Get Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public getResourceEndpoint (mname: string, rname: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling getResourceEndpoint.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the GET method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Get Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public getResourceEndpointItem (mname: string, rname: string, wildcard: string, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling getResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling getResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling getResourceEndpointItem.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Patch Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public patchResourceEndpoint (mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling patchResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling patchResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchResourceEndpoint.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the PATCH method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Patch Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public patchResourceEndpointItem (mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling patchResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchResourceEndpointItem.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Post Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public postResourceEndpoint (mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling postResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling postResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postResourceEndpoint.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the POST method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Post Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public postResourceEndpointItem (mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling postResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postResourceEndpointItem.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource Put Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public putResourceEndpoint (mname: string, rname: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling putResourceEndpoint.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling putResourceEndpoint.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putResourceEndpoint.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Used to invoke the PUT method of the resource from an existing EMS EdgeModule.
     * @summary Invoke Resource/_* Put Method
     * @param mname Is the EMS EdgeModule name
     * @param rname Is the unique EMS EdgeModule Resource name
     * @param wildcard Is the Wild card part of the URL
     * @param body Body Object
     * @param xEmbarcaderoApplicationId 
     * @param xEmbarcaderoAppSecret 
     * @param xEmbarcaderoMasterSecret 
     */
    public putResourceEndpointItem (mname: string, rname: string, wildcard: string, body: any, xEmbarcaderoApplicationId?: string, xEmbarcaderoAppSecret?: string, xEmbarcaderoMasterSecret?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/edgemodules/{mname}/{rname}/{wildcard}'
            .replace('{' + 'mname' + '}', encodeURIComponent(String(mname)))
            .replace('{' + 'rname' + '}', encodeURIComponent(String(rname)))
            .replace('{' + 'wildcard' + '}', encodeURIComponent(String(wildcard)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'mname' is not null or undefined
        if (mname === null || mname === undefined) {
            throw new Error('Required parameter mname was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'rname' is not null or undefined
        if (rname === null || rname === undefined) {
            throw new Error('Required parameter rname was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'wildcard' is not null or undefined
        if (wildcard === null || wildcard === undefined) {
            throw new Error('Required parameter wildcard was null or undefined when calling putResourceEndpointItem.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putResourceEndpointItem.');
        }

        headerParams['X-Embarcadero-Application-Id'] = xEmbarcaderoApplicationId;

        headerParams['X-Embarcadero-App-Secret'] = xEmbarcaderoAppSecret;

        headerParams['X-Embarcadero-Master-Secret'] = xEmbarcaderoMasterSecret;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
